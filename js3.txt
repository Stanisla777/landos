<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Анимированные счетчики</title>
    <style>
        body {
            height: 150vh;
            display: flex;
            justify-content: center;
            padding-top: 50vh;
            font-family: Arial, sans-serif;
        }
        
        .counter-block {
            margin: 20px;
            text-align: center;
        }
        
        .counter-value {
            font-size: 4rem;
            font-weight: bold;
            color: #333;
            height: 1em;
            overflow: hidden;
            position: relative;
        }
        
        .counter-value span {
            position: absolute;
            width: 100%;
            text-align: center;
            transition: transform 0.5s ease-out;
        }
    </style>
</head>
<body>
    <div class="counter-block">
        <div class="counter-value" data-value="100 000">
            <!-- Цифры будут сгенерированы автоматически -->
        </div>
        <p>Пользователей</p>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Подготовка счетчиков
            document.querySelectorAll('.counter-value').forEach(initCounter);
            
            // Наблюдатель за появлением элементов
            const observer = new IntersectionObserver(handleIntersection, {
                threshold: 0.5
            });
            
            document.querySelectorAll('.counter-value').forEach(el => {
                observer.observe(el);
            });
            
            // Инициализация счетчика
            function initCounter(element) {
                const value = element.dataset.value.replace(/\s/g, '');
                element.innerHTML = '';
                
                // Создаем контейнеры для цифр
                for (let i = 0; i < value.length; i++) {
                    const digitContainer = document.createElement('div');
                    digitContainer.className = 'digit-container';
                    digitContainer.style.display = 'inline-block';
                    digitContainer.style.width = `${value[i] === ' ' ? '0.5em' : '1em'}`;
                    digitContainer.style.verticalAlign = 'top';
                    digitContainer.style.overflow = 'hidden';
                    digitContainer.style.position = 'relative';
                    
                    const digitSpan = document.createElement('span');
                    digitSpan.style.display = 'block';
                    digitSpan.style.position = 'relative';
                    
                    // Генерируем цифры от 0 до 9 для анимации
                    for (let d = 0; d < 10; d++) {
                        const digit = document.createElement('div');
                        digit.textContent = d;
                        digit.style.height = '1em';
                        digit.style.textAlign = 'center';
                        digitSpan.appendChild(digit);
                    }
                    
                    // Добавляем последний 0 для зацикливания
                    const zero = document.createElement('div');
                    zero.textContent = '0';
                    zero.style.height = '1em';
                    digitSpan.appendChild(zero);
                    
                    // Устанавливаем начальную позицию
                    const targetDigit = parseInt(value[i]);
                    digitSpan.style.transform = `translateY(${-11 * (10 - targetDigit)}%)`;
                    digitSpan.dataset.target = `translateY(${-11 * (10 - targetDigit)}%)`;
                    digitSpan.dataset.current = -11 * (10 - targetDigit);
                    
                    digitContainer.appendChild(digitSpan);
                    element.appendChild(digitContainer);
                }
            }
            
            // Обработчик появления элементов
            function handleIntersection(entries) {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        animateCounter(entry.target);
                        observer.unobserve(entry.target);
                    }
                });
            }
            
            // Анимация счетчика
            function animateCounter(element) {
                const digitSpans = element.querySelectorAll('.digit-container > span');
                const animationDuration = 2000;
                const startTime = Date.now();
                
                function updateAnimation() {
                    const elapsed = Date.now() - startTime;
                    const progress = Math.min(elapsed / animationDuration, 1);
                    
                    digitSpans.forEach(span => {
                        const target = parseFloat(span.dataset.target.split('(')[1]);
                        const start = parseFloat(span.dataset.current);
                        
                        // Эффект замедления в конце
                        const easing = 1 - Math.pow(1 - progress, 3);
                        const newPosition = start + (target - start) * easing;
                        
                        span.style.transform = `translateY(${newPosition}%)`;
                        span.dataset.current = newPosition;
                    });
                    
                    if (progress < 1) {
                        requestAnimationFrame(updateAnimation);
                    }
                }
                
                requestAnimationFrame(updateAnimation);
            }
        });
    </script>
</body>
</html>