// –í—Å—Ç–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function () {
  console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');

  document.addEventListener('click', function (e) {
    const buttonSelector = '.js--btn-registration-state';
    const btn = document.querySelector(buttonSelector);
    if (!btn || !e.target.closest(buttonSelector)) {
      return;
    }

    e.preventDefault();
    console.log('‚úÖ –ö–ª–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –Ω–∞ —Ñ–∞–∑–µ CAPTURE');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º .js--modal –∫–∞–∫ –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = btn.closest('.js--modal') || document;
    const checkboxWrappers = container.querySelectorAll('.js--checkbox_wrapper');
    const errorClass = 'js--input__error_required';

    let hasError = false;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏ –∏ –∫–ª–∞—Å—Å—ã
    checkboxWrappers.forEach(wrapper => {
      const formBlock = wrapper.querySelector('.feed_back__user-form-block');
      if (formBlock) {
        const error = formBlock.querySelector('.' + errorClass);
        if (error) error.remove();
      }
      wrapper.classList.remove('input_error');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ required-—á–µ–∫–±–æ–∫—Å—ã
    checkboxWrappers.forEach(wrapper => {
      const checkbox = wrapper.querySelector('input[type="checkbox"]');
      const formBlock = wrapper.querySelector('.feed_back__user-form-block');

      if (!checkbox || !formBlock) return;

      if (checkbox.hasAttribute('required') && !checkbox.checked) {
        const message = checkbox.getAttribute('data-required-hint') || '–°–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏';
        const error = document.createElement('p');
        error.className = 'input__error ' + errorClass;
        error.textContent = message;
        formBlock.appendChild(error);
        wrapper.classList.add('input_error'); // –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å-–æ—à–∏–±–∫—É –∫ –æ–±—ë—Ä—Ç–∫–µ
        hasError = true;
      }
    });

    if (hasError) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
      return;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π onclick
    const onclickAttr = btn.getAttribute('onclick');
    console.log('üîç onclick –∞—Ç—Ä–∏–±—É—Ç:', onclickAttr);

    if (onclickAttr) {
      try {
        console.log('‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º onclick');
        new Function(onclickAttr)();
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è onclick:', err);
      }
    } else {
      console.warn('‚ùå –ê—Ç—Ä–∏–±—É—Ç onclick –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
  }, true); // useCapture: true

  console.log('üîê –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ñ–∞–∑–µ capture');
});
