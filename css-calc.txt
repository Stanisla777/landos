async smoothScrollToElement(element) {
  const container = this.$refs.mobileShedule;
  
  // Вычисляем все необходимые позиции
  const elementRect = element.getBoundingClientRect();
  const containerRect = container.getBoundingClientRect();
  
  // Вычисляем относительную позицию элемента внутри контейнера
  const relativeTop = elementRect.top - containerRect.top;
  const targetContainerScroll = container.scrollTop + relativeTop - 20; // -20 для небольшого отступа
  
  // Проверяем, виден ли контейнер в окне браузера
  const containerVisible = this.isElementInViewport(container);
  
  // Проверяем, будет ли элемент виден после скролла контейнера
  const elementVisibleAfterScroll = 
    (targetContainerScroll >= 0) && 
    (targetContainerScroll <= container.scrollHeight - container.clientHeight);
  
  if (!containerVisible) {
    // Если контейнер не виден, скроллим страницу к контейнеру
    const targetWindowScroll = window.scrollY + containerRect.top - 20;
    
    await Promise.all([
      this.animateScroll(window, targetWindowScroll, 600),
      elementVisibleAfterScroll ? this.animateScroll(container, targetContainerScroll, 600) : Promise.resolve()
    ]);
  } else if (elementVisibleAfterScroll) {
    // Если контейнер виден и элемент будет виден после скролла
    await this.animateScroll(container, targetContainerScroll, 600);
  } else {
    // Если элемент не будет виден после скролла контейнера (например, в самом низу)
    // Скроллим страницу так, чтобы элемент оказался внизу видимой области
    const elementBottomRelative = relativeTop + elementRect.height;
    const targetWindowScroll = window.scrollY + containerRect.top + elementBottomRelative - window.innerHeight + 20;
    
    await Promise.all([
      this.animateScroll(window, targetWindowScroll, 600),
      this.animateScroll(container, container.scrollHeight - container.clientHeight, 600)
    ]);
  }
},

isElementInViewport(el) {
  const rect = el.getBoundingClientRect();
  return (
    rect.top >= 0 &&
    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)
  );
},
