errorMessage() {
  // Получаем числовые значения без пробелов
  const totalNum = parseInt(this.total_calculate.replace(/\s/g, '')) || 0;
  const deductionNum = parseInt(this.dataField_deduction.replace(/\s/g, '')) || 0;

  let shouldShowError = false;

  // Правило 1: Если вычеты есть, но превышают максимально возможный лимит
  if (totalNum > 0 && deductionNum > 0 && totalNum > deductionNum) {
    shouldShowError = true;
  }
  // Правило 2: Если есть вычеты, но доходы не указаны (лимит = 0)
  else if (totalNum > 0 && deductionNum === 0) {
    shouldShowError = true;
  }
  // ✅ ПРАВИЛО 3: КЛЮЧЕВОЕ ИСПРАВЛЕНИЕ!
  // Если ВСЕ вычеты очищены (total == 0), но доходы были указаны (deduction > 0)
  // → это НЕ ошибка! Это означает, что человек решил не использовать лимит.
  // Предупреждение должно исчезнуть!
  else if (totalNum === 0 && deductionNum > 0) {
    shouldShowError = false; // <-- Явно указываем: ошибки нет!
  }
  // Все остальные случаи (оба нули, или total <= deduction) — ошибки нет
  else {
    shouldShowError = false;
  }

  // Используем $nextTick для надежности
  this.$nextTick(() => {
    this.error_message = shouldShowError;
  });
},
