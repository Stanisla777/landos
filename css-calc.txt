mounted() {
  this.$nextTick(() => {
    this.inputRate();
  });
},

methods: {
  inputRate() {
    const el = this.$refs.inputPersent;
    if (!el) {
      console.warn('Инпут для ставки не найден');
      return;
    }

    this.mask_interest = IMask(el, {
      mask: Number,
      scale: 2,
      radix: ',',
      thousandsSeparator: '',
      min: 0.01,
      max: 99.99,
      autofix: true
    });

    this.mask_interest.on('accept', () => {
      this.i_calculation = parseFloat(this.mask_interest.value.replace(',', '.')) || 0;
    });
  }
}




.calc-tax-deduc-new__col-input.js--number-debt.js--tex-deduc-input.js--interest-rate-calc.js--for-clear-field
                  input.js--normal-field.js-mor-required(
                    ref="inputPersent"
                    inputmode="decimal"
                    placeholder="Введите процент"
                    @keyup="fieldNotEmpty"
                    @focus="inpFocus"
                    @blur="inpBlur"
                    @input="maxPercent"
                  )




MortgageRepaymentCalculator
<script>
import ComponentInformationMortgage from './components/v-component-information-mortgage.vue';
import ComponentMortgageHolidays from './components/v-component-mortgage-holidays.vue';
import ComponentEarlyRepayment from './components/v-component-early-repayment.vue';
import ComponentRepaymentData from './components/v-component-repayment-data.vue';
import ComponentPaymentSchedule from './components/v-component-payment-schedule.vue';
import ComponentCalendarMobileShedule from './components/v-2-component-calendar-mobile-shedule.vue';
import numberFormatting from "./mixin/numberFormatting";
import eventBus from './development-tools/eventBus.vue';
import axios from 'axios';
import VanillaCalendar from '../vanilla-calendar2';
import IMask from 'imask';

export default {
  name: 'MortgageRepaymentCalculator',
  mixins: [numberFormatting],
  props:['answers','limit_mortgage_holidays','period_holidays','tooltip_information','tooltip_holidays','tooltip_early','tooltip_result','html_tooltip','can_share','calculatorId','answersIdProps','answerLinkProps'],
  data(){
    return {
      placeholder:'Размер выплаты',
      screenWidth : window.innerWidth,
      screenHeight: window.innerHeight,
      min_date_mobile:`${new Date().getFullYear() - 30}-01-01`,
      max_date_mobile:`${new Date().getFullYear() + 99}-12-31`,

      //для отображения блока ипотечные каникулы
      // limit_mortgage_holidays:15000000, // ИЗ АДМИНКИ!!! лимит для ипотечных каникул, получаю его из админки(пока поставил 15000000)
      visibility_mortgage_holidays_block:true, //если false блок с каникулами не отображать, зависит превышен или нет лимит
      result_comparing_holidays_early:[], //массив с объектом месяца, года и id, который формируется если есть совпадения досрочки и каникул,
      //оющий стэйт с полученными данными из блоков для расчёта
      state:{
        payment_type:null,
        count:0, // чтобы понять сколько месяцев было до досрочного погашения и остановить обычную формулу расчёта
        // просто массив с названиями месяцев
        obj_month:["январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь"],
        obj_month_holiday:["январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь","январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь"],
        loan_registration_date: {//дата оформления кредита
          'month':null,
          'year':null
        },
        array_month:[],//массив из названий месяцев для графика платежей
        array_payment_schedule:[], //массив графика платежей
        array_holiday_schedule:[], //массив c месяцами и годами ипотечных каникул
        array_final_month_massive:[],
        n_calculation:0, // количество платежей(срок кредита)
        n_calculation_constanta:0, // количество платежей(срок кредита)
        n_calculation_with_holiday:0,
        n_calculation_constanta_with_holiday:0,
        array_n_calculation:[],
        a_calculation:[], //массив исходных ежемесячных платежей
        a_calculation_constanta:0, //исходный ежемесячный платеж
        i_calculation:null, //ежемесячная процентная ставка
        loan_amount:0, //сумма кредита
        premaining:0, //остаток долга по кредиту(задолженность)
        array_premaining:[], //массив с остаток долга по кредиту(задолженностями)
        a_proc:0,//часть ежемесячного платежа, направленная на погашение процентов
        array_interest_repayment_payments : [], //платежи на погашение процентов (погашение процентов)
        a_ocn:null, //часть ежемесячного платежа, направленная на погашение основного долга;
        array_main_debt_repayment_payments : [], //платежи на основоного долга(Погашение основного долга)
        holidays_term:0, //срок каникул
        holidays_date: {//дата начала каникул
          'month':null,
          'year':null
        },
        array_calculate_holiday:[],
        array_holiday_schedule__2:[],
        massive_for_obj_2:[], //массив отсроченных месяцев

        //ДОСРОЧНОЕ ПОГАШЕНИЕ
        periodicity_early_repayment:0, //передичность досрочного погашения 1-единовременно, 2 раз в месяц, 3 раз в год пока временно тут это буду засовыввать в массив ниже
        array_early_repayment:[],//массив с досрочным погашением вида
        array_premaining_early_repayment_term:[], //массив задолжностей (задолжность минус досрочное погашение) на весь срок, если её не было, то стоит 0
        array_monthly_arrears:[], //массив с суммой досрочного погашения на весь срок, если её не было, то стоит 0
        months_before_early_repayment:0,  //индекс месяца, чтобы можно было определить по его индексу, сколько было платежей до досрочки
        monthly_payment_before_early_repayment:0,  //последний аануитентный ежемесячный платёж
        integer_number_months:true, //целое или нет количество месяцев
      },

      //-------------------Новое-----------------

      //массив месяцев, чтобы формировать названия из их порядкого номера
      obj_month:["январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь","январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь"],
      loanAmount:0, //сумма кредита
      loanTerm:0, // срок кредита
      termMonthOrYear:'',
      annualInterestRate:0, //годовая ставка
      startMonth:null, //месяц взфтия кредита
      startYear:0,//год взятия кредита
      shedule:[], //окончательный  график платежей, который будет формироваться c досрочками и ипотечными календарями
      shedule_first:[], // график платежей, который будет формироваться без досрочек и ипотечных каникул

      //КАНИКУЛЫ
      holidays_term:0, // срок ипотечных каникул
      holidays_date: [], // массив с началом каникул
      holidays_date_to_send: [], // массив с началом каникул для отправки на сервер

      array_holidays:[], //окончатедбный масив со всеми каникулами
      array_early_repayment:[], // массив с досрочными погашениями
      array_repayment_end:[],
      array_repayment_main:[],
      array_repayment_all_period:[],
      array_repayment_select_period:[],
      array_repayment_date:[],
      array_repayment_amount:[],
      array_repayment_selected_dates:[],
      array_repayment_what_reduce:[],
      array_block_requared:[],

      array_early_repayment_to_send:[], // массив с досрочными погашениями
      //ещё новенькое
      startMortage:'',
      startMortageDiff:'',
      //Даныые о погашении
      repayment_information:{
        mortgage_closure_month:null, //Вы закроете ипотеку месяц
        mortgage_closure_year:null, //Вы закроете ипотеку год
        if_earlier_month:0, //Раньше на 2 месяца(если раньше)
        monthly_payment_annuity:null,//Ежемесячный платеж для аннуитентных платежей
        monthly_payment_min:null,//Ежемесячный платеж
        monthly_payment_max:null,//Ежемесячный платеж
        main_debt:0,//Основной долг:
        percentages:0,//сумма всех Процентов
        percentages_first:0, //сумма всех Процентов из графика платежей, который будет формироваться без досрочек и ипотечных каникул
        principal:0,//сумма всех основной долг

        pay_in_total:0,//Всего заплатите
        savings:0//Экономия
      },
      result_button:[],
      btn_status:false,

      dateLoanReceipt:null,


      flag_send_results:true,
      answersToSand:[],
      captcha_id:null,

      answerLink:null,
      answersId:null,
      description_after_sand:null,
      description_after_sand_mail:null,
      answer_code:null,
      mask_mail:null,
      check_agree_advertisement:false,
      check_agree_personal:false,
      mail_error:false,
      mail_fill:false,

      error_mail_fill:false,
      chek_error:false,
      isAnimatingMobile:false,
      isAnimatingMobileEarly:false,

      not_field_information:false,
      not_field_holidays:false,
      not_field_early:false,
      not_field_early_period:false




    }
  },
  methods: {
    async copyLink(event){
      const link = event.currentTarget.dataset.link;
      const element = event.currentTarget

      try{
        if (navigator.clipboard){
          await navigator.clipboard.writeText(link);
          element.querySelector('p').textContent='Скопировано';
          setTimeout(()=>{
            element.querySelector('p').textContent='Скопировать ссылку';
          },3000)
        } else {
          throw new Error ('not supported')
        }

      } catch (err) {
        const texarea = document.createElement('textarea');
        texarea.value = link;
        texarea.style.position='fixed';
        document.body.appendChild(texarea)
        texarea.select();
        document.execCommand('copy')
        document.body.removeChild(texarea)
        console.log('Ошибка копирования');
        console.log(err);
      }

    },

    dropdownAreaMobileShedule(e){
      const target = e.target
      const element = e.currentTarget;
      // console.log(element);
      const parent = element.closest('.js-accordion-parent-calc');
      if (parent){
        if (this.isAnimatingMobile) return
        this.isAnimatingMobile = true

        if(parent.classList.contains('active')){
          parent.classList.remove('active-overflow')
          setTimeout(()=>{
            parent.classList.remove('active')
          },300)
        }
        else{
          parent.classList.add('active')
          setTimeout(()=>{
            parent.classList.add('active-overflow')
          },500)
        }
      }

    },
    dropdownAreaMobileSheduleEarly(e){
      const target = e.target
      const element = e.currentTarget;
      // console.log(element);
      const parent = element.closest('.js-accordion-parent-calc-early');
      if (parent){
        if (this.isAnimatingMobileEarly) return
        this.isAnimatingMobileEarly = true

        if(parent.classList.contains('active-early')){
          parent.classList.remove('active-overflow')
          setTimeout(()=>{
            parent.classList.remove('active-early')
          },300)
        }
        else{
          parent.classList.add('active-early')
          setTimeout(()=>{
            parent.classList.add('active-overflow')
          },500)
        }
      }

    },
    handleTransitionEnd(event){
      if (event.propertyName==='grid-template-rows') {
        this.isAnimatingMobile=false
      }
    },
    handleTransitionEndEarly(event){
      if (event.propertyName==='grid-template-rows') {
        this.isAnimatingMobileEarly=false
      }
    },




    resultClearCalendarHolidayAll(){
      this.result_comparing_holidays_early=[]
    },
    resultClearCompareWhithHoliday(data) {

      // this.result_comparing_holidays_early = this.result_comparing_holidays_early.filter(obj => obj.id !==parseInt(data))

      for(let i=this.result_comparing_holidays_early.length-1;i>=0;i--) {
        if (this.result_comparing_holidays_early[i].id === data) {
          this.result_comparing_holidays_early.splice(i,1)
        }
      }


      // const index = this.result_comparing_holidays_early.findIndex(obj => obj.id === data);
      // if (index !== -1) {
      //   this.result_comparing_holidays_early.splice(index, 1);
      // }
    },

    changeAgree(el){
      const element = el.currentTarget
      if (element.checked) {
        this.check_agree_advertisement=true
      }
      else {
        this.check_agree_advertisement=false
      }
    },
    changePersonal(el){
      const element = el.currentTarget
      this.chek_error=false
      if (element.checked) {
        this.check_agree_personal=true
      }
      else {
        this.check_agree_personal=false
      }
    },
    sendingResultError(){
      if (this.mail_fill===false) {
        this.error_mail_fill = true
      }
      this.mail_error=false
      if (this.check_agree_personal===false) {
        this.chek_error = true
      }


    },
    onInputMail(e){
      const element = e.target
      let char = e.data
      const reg = e.inputType!=='deleteContentBackward'&&e.inputType!=='deleteContentForward'&&e.inputType!=='insertFromPaste'&&e.inputType!=='historyUndo'
      if (typeof char != 'undefined' && !/^[a-z0-9@!#$%&'.+-=?^_"\\`{|}~]*$/i.test(char) && reg) {
        this.mail_error=true
      }
      else if(((char&&char!=null)&&typeof char != 'undefined' && /^[a-z0-9@!#$%&'.+-=?^_"\\`{|}~]*$/i.test(char))||e.inputType==='deleteContentBackward'||e.inputType==='deleteContentForward'){
        this.mail_error=false
      }
      if(element.value.match(/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i)) {
        this.mail_fill=true
      } else{
        this.mail_fill=false
      }
      this.error_mail_fill = false

    },

    inputMaskEarly() {
      this.mask_mail = IMask(this.$refs.inputMail, {
        mask: /^[a-z0-9@!#$%&'.+-=?^_"`{|}~]*$/i
      });
      this.mask_mail.on('accept', () => {


      })
      this.mask_mail.on('reject', () => {

      })
    },

    //открыл модалку с подсказкой
    openModal(el) {
      const element = el.currentTarget
      this.$refs.dataModalMail.classList.add('open')
      this.AddClassBody()

    },
    closeModal(e){
      this.$refs.dataModalMail.classList.remove('open')
      this.RemoveClassBody()
    },
    closeModalBody(e){
      if(e.target===this.$refs.dataModalMail){
        this.$refs.dataModalMail.classList.remove('open')
        this.RemoveClassBody()
      }
    },






    getItemClasses(item) {
      return {
        'mortgage-holidays':item.isHoliday===true,
        'mortgage-early':item.prepayments && item.prepayments.length > 0
      }
    },

    //получаю, когда происходит действие непосредственно в компоненте
    receivedDateMobile([year, month]) {
      const dateString = `${year}-${month}`;
      this.$nextTick(()=>{
        const element = this.$refs.mobileShedule.querySelector(`[data-date="${dateString}"]`)
        if (element) {
          element.scrollIntoView({
            behavior:'smooth',
            block:'start'
          })
        }
      })

    },

    //получаю сумму кредита, когда меняется поле, чтобы отображать или нет ипотечные каникулы
    receivedLoanAmountForHolidays(data) {
      if (data > this.limit_mortgage_holidays) {
        this.visibility_mortgage_holidays_block = false
        this.holidays_term = 0
        this.holidays_date = []
        this.array_holidays = []
      } else {
        this.visibility_mortgage_holidays_block = true
      }

    },

    //получил клик о стирании поля Сумма кредита
    receivedClearInputLoanAmount(){
      this.visibility_mortgage_holidays_block=true
    },

    //---ТО ЧТО ПОЛУЧАЮ ДЛЯ РАСЧЁТОВ

    //нажата кнопка рассчитать в мобильной версии
    totalCalculationMobile(){
      if (this.$el &&  this.$el.querySelector('.js--mor-btn-result')) {
        // this.$el.querySelector('.js--mor-btn-result').click()
        eventBus.$emit('mobileTotalCalculation')
      }
      if (this.$el && this.$el.querySelector('.js--mobile-calendar-shedule')){
        this.$el.querySelector('.js--mobile-calendar-shedule').value = ''
        if (this.$el.querySelector('.js--mobile-calendar-shedule').closest('.js--for-clear-field') && this.$el.querySelector('.js--mobile-calendar-shedule').closest('.js--for-clear-field').querySelector('.js--clear-calc-tax')){
          this.$el.querySelector('.js--mobile-calendar-shedule').closest('.js--for-clear-field').querySelector('.js--clear-calc-tax').classList.remove('active')
        }
      }


      // this.$nextTick(()=>{

      setTimeout(()=>{
        if(this.shedule.length>0){
          const target = this.$refs.heightBlock
          if (target) {
            const offset = 10
            const position = target.getBoundingClientRect().top + window.scrollY;
            window.scrollTo({
              top:position - offset,
              bahavior:'smooth'
            })
          }
        }
      },500)

      // })

    },

    //полученные данные из компонентов

    //получил от календаря месяц - год даты получения кредита
    receivedDateLoanReceipt(data){


      if (data) {
        this.dateLoanReceipt = data
        this.startMonth=data[0] + 1
        this.startYear=parseInt(data[1])
        this.startMortage = `${data[1]}-${data[0]+1}`
        this.startMortageDiff = {month:this.startMonth +1, year:this.startYear}
        this.min_date_mobile = `${data[1]}-${data[0]}`
      }
    },

    //получил тип платежа
    receivedPaymentType(data){
      if (data) {
        this.state.payment_type=data
      }
    },

    //указан срок кредита в годах или месяцах
    resultTermMonthOrYear(data) {
      this.termMonthOrYear = data
    },

    //общеее количества ежемесячных платежей
    receivedMonthlyPayment(data){
      //
      this.loanTerm = data
      // this.state.n_calculation_constanta = data
    },

    //получаю ежемесячную процентную ставку
    receivedMonthlyInterestRate(data){
      this.annualInterestRate = data
    },

    //получаю сумму кредита
    receivedLoanAmount(data){
      this.loanAmount = data
    },

    //получаю срок каникул
    receivedHolidaysTerm(data){
      this.holidays_term = parseInt(data)
    },


    //получил от календаря месяц - год даты начала каникул
    receivedBeginningHolidays(data){
      this.holidays_date_to_send = data

      // this.holidays_array_date = date
      this.holidays_date = []
      if (data!==undefined && data!==null && this.holidays_date.length===0) {
        let obj = {//дата начала каникул
          'month':null,
          'year':null,
          'firstMonthHoliday':true
        }
        obj.month=data[0] + 1
        obj.year=parseInt(data[1])
        this.holidays_date.push(obj)
      }
      this.array_holidays = this.addFutureMonths(this.holidays_date,this.holidays_term)
    },

    //формирую массив с ипотечными каникулами на основе месаца начала каникул и срока каникул
    addFutureMonths(array,count) {
      if (array.length ===0 || count<=1) return array;

      const lastEntry = array[array.length -1];
      let [month, year] = [lastEntry.month, lastEntry.year];

      const newEntries = [];
      for (let i = 0;i<count-1; i++) {
        month++;
        if (month ===13) {
          month = 1;
          year++
        }
        newEntries.push({month, year})
      }
      return array.concat(newEntries)
    },

    //ДОСРОЧНОЕ ПОГАШЕНИЕ

    //получил массим с данными о досрочном погашении
    receivedArrayEarlyRepayment(data){
      this.array_early_repayment=data
    },
    receivedRepaymentEnd(data){
      this.array_repayment_end = data
    },
    receivedRepaymentMain(data){
      this.array_repayment_main = data
    },
    receivedRepaymentAllPeriod(data){
      this.array_repayment_all_period = data
    },
    receivedRepaymentSelectPeriod(data){
      this.array_repayment_select_period = data
    },
    receivedRepaymentDate(data){
      this.array_repayment_date = data
    },
    receivedRepaymentAmount(data){
      this.array_repayment_amount = data
    },
    receivedRepaymentSelectedDates(data){
      this.array_repayment_selected_dates = data

    },
    receivedRepaymentWhatReduce(data){
      this.array_repayment_what_reduce = data
    },
    receivedBlockRequared(data){
      this.array_block_requared = data
    },










    receivedArrayEarlyRepaymentTotal(data){
      if(data[0]&&data[0].field_amount!==''){
        this.array_early_repayment_to_send = data
      }

    },


    //метод, который сравнивает, не совпадают ли даты досрочного погашения с датами ипотечных каникул
    mergeMatchedData(arr1,arr2) {
      // console.log('arr1 - this.array_early_repayment');
      // console.log(arr1);
      // console.log('arr2 - holidays');
      // console.log(arr2);


      const monthYearSet = new Set();
      for (const item of arr2) {
        monthYearSet.add(`${item.month}-${item.year}`);
      }
        const result = [];
        for (const item of arr1) {
          const key = `${item.month}-${item.year}`;
          if (monthYearSet.has(key)) {
            // console.log('this.array_block_requared fffffff');
            // console.log(this.array_block_requared);
            const existingItemsFieldData = this.array_block_requared.find(iteme => iteme.id === item.id);
            if (existingItemsFieldData&&existingItemsFieldData.date_begin !==false) {
              result.push({month:item.month, year: item.year, id: item.id});
            }

          }
        }
        return result;
      },

    //-------------------END ТО ЧТО ПОЛУЧАЮ ДЛЯ РАСЧЁТОВ------------------------------------------------


    //-------------------РАСЧЁТ ИТОГОВЫХ РЕЗУЛЬТАТОВ

    calculateAnnuity(P, r ,n){
      if (r ===  0) return P /n;
      return (P * r) / (1 - Math.pow(1 + r, -n));
    },

    calculateMortgageSheduleFirst(
      loanAmount,
      annualInterestRate,
      initialTermMonths,
      startDate,
      prepayments = []
    ) {
      const montlyRate = annualInterestRate /12 /100;
      let currentBalance = loanAmount;
      let currentPayment = this.calculateAnnuity(loanAmount, montlyRate, initialTermMonths);
      let remainingTerm = initialTermMonths;
      const shedule = [];

      const startDateNew = startDate.replace(/-(\d)$/, '-0$1')
      const [year,month] = startDateNew.split('-').map(Number)
      const currentDate = new Date(year, month - 1)
      currentDate.setMonth(currentDate.getMonth() +1);


      // const currentDate = new Date(startDate);
      // currentDate.setMonth(currentDate.getMonth() +1);

      while (currentBalance > 0 && remainingTerm > 0) {
        const currentMonth = currentDate.getMonth() + 1;
        const currentYear = currentDate.getFullYear();
        const interest = currentBalance * montlyRate;
        let principal = currentPayment - interest;
        let totalPayment = principal + interest;
        if (principal > currentBalance) {
          principal = currentBalance;
          totalPayment = principal + interest
        }
        const remainingBeforePrepayments = currentBalance - principal;
        const sheduleEntry = {
          month: currentMonth,
          year: currentYear,
          nameMonth:this.obj_month[currentMonth - 1],
          payment: totalPayment,
          principal: principal,
          interest: interest,
          remainingBalance: remainingBeforePrepayments,
          prepayments: []
        };
        currentBalance = remainingBeforePrepayments;
        shedule.push(sheduleEntry)
        currentDate.setMonth(currentDate.getMonth() + 1);
        remainingTerm--
      }
      return shedule
    },

    calculateMortgageShedule(
      loanAmount,
      annualInterestRate,
      initialTermMonths,
      startDate,
      prepayments = []
    ) {
      const montlyRate = annualInterestRate /12 /100;
      let currentBalance = loanAmount;
      let currentPayment = this.calculateAnnuity(loanAmount, montlyRate, initialTermMonths);
      let remainingTerm = initialTermMonths;
      const shedule = [];


      const startDateNew = startDate.replace(/-(\d)$/, '-0$1')
      const [year,month] = startDateNew.split('-').map(Number)
      const currentDate = new Date(year, month - 1)
      currentDate.setMonth(currentDate.getMonth() +1);


      // const currentDate = new Date(startDate);
      // currentDate.setMonth(currentDate.getMonth() +1);

      const sortedPrepayments = [...prepayments].sort((a,b)=>{
        const aDate = new Date(a.year, a.month - 1);
        const bDate = new Date(b.year, b.month - 1);
        return aDate - bDate;
      });

      let prepaymentIndex = 0;
      while (currentBalance > 0 && remainingTerm > 0) {
        const currentMonth = currentDate.getMonth() + 1;
        const currentYear = currentDate.getFullYear();

        const currentPrepayments = [];
        while (
          prepaymentIndex < sortedPrepayments.length &&
            sortedPrepayments[prepaymentIndex].month ===currentMonth &&
            sortedPrepayments[prepaymentIndex].year ===currentYear
          ) {
          currentPrepayments.push(sortedPrepayments[prepaymentIndex]);
          prepaymentIndex++;
        }

        const interest = currentBalance * montlyRate;
        let principal = currentPayment - interest;
        let totalPayment = principal + interest;

        if (principal > currentBalance) {
          principal = currentBalance;
          totalPayment = principal + interest
        }

        const remainingBeforePrepayments = currentBalance - principal;

        const sheduleEntry = {
          month: currentMonth,
          year: currentYear,
          nameMonth:this.obj_month[currentMonth - 1],
          payment: totalPayment,
          principal: principal,
          interest: interest,
          remainingBalance: remainingBeforePrepayments,
          prepayments: []
        };

        currentBalance = remainingBeforePrepayments;

        for (const prep of currentPrepayments) {
          if (currentBalance <=0) break;

          const prepaymentAmount = Math.min(prep.amount, currentBalance);
          currentBalance -= prepaymentAmount;
          sheduleEntry.prepayments.push({
            amount:prepaymentAmount,
            month: prep.month,
            nameMonth:this.obj_month[prep.month - 1],
            year: prep.year,
            type: prep.type,
            remainingBalance:currentBalance
          });

          if(prep.type === 'term') {
            if (currentPayment <= currentBalance * montlyRate) {
              remainingTerm = Infinity;

            } else {
              const numerator = Math.log(currentPayment / (currentPayment - currentBalance * montlyRate));
              const denominator = Math.log(1 + montlyRate);
              remainingTerm = Math.ceil(numerator / denominator)

              if (Number.isInteger(numerator / denominator) ===false) {
                remainingTerm+=1
              }

            }
          } else if (prep.type === 'payment') {
            if (remainingTerm > 1) {
              currentPayment = this.calculateAnnuity(currentBalance, montlyRate, remainingTerm - 1);
            } else {
              currentPayment = currentBalance + currentBalance + montlyRate
            }
          }
        }

        // sheduleEntry.remainingBalance = currentBalance;
        shedule.push(sheduleEntry)

        currentDate.setMonth(currentDate.getMonth() + 1);
        remainingTerm--

      }
      return shedule
    },

    calculateAnnuityDiff(P, r ,n){
      if (r ===  0) return P /n;
      return (P * r) / (1 - Math.pow(1 + r, -n));
    },

    calculateMortgageSheduleDiffFirst(
      loanAmount,
      annualInterestRate,
      initialTermMonths,
      startDate,
      prepayments = []
    ) {

      const montlyRate = annualInterestRate / 12 /100;
      let currentBalance = loanAmount;
      let currentPayment = this.calculateAnnuity(loanAmount, montlyRate, initialTermMonths);
      let remainingTerm = initialTermMonths;
      let remainingTermTerm = initialTermMonths;
      const shedule = [];


      const startDateNew = startDate.replace(/-(\d)$/, '-0$1')
      const [year,month] = startDateNew.split('-').map(Number)
      const currentDate = new Date(year, month - 1)
      currentDate.setMonth(currentDate.getMonth() +1);



      // const currentDate = new Date(startDate);
      // currentDate.setMonth(currentDate.getMonth() +1);

      const sortedPrepayments = [...prepayments].sort((a,b)=>{
        const aDate = new Date(a.year, a.month - 1);
        const bDate = new Date(b.year, b.month - 1);
        return aDate - bDate;
      });
      let principal = loanAmount / initialTermMonths;
      while (currentBalance > 0 && remainingTerm > 0) {
        const currentMonth = currentDate.getMonth() + 1;
        const currentYear = currentDate.getFullYear();
        const interest = currentBalance * montlyRate;
        let totalPayment = principal + interest;
        if (principal > currentBalance) {
          principal = currentBalance;
          totalPayment = principal + interest
        }
        const remainingBeforePrepayments = currentBalance - principal;
        const sheduleEntry = {
          month: currentMonth,
          year: currentYear,
          nameMonth:this.obj_month[currentMonth - 1],
          payment: totalPayment,
          principal: principal,
          interest: interest,
          remainingBalance: remainingBeforePrepayments,
          prepayments: []
        };
        currentBalance = remainingBeforePrepayments;
        shedule.push(sheduleEntry)
        currentDate.setMonth(currentDate.getMonth() + 1);
        remainingTerm--
      }
      return shedule
    },

    calculateMortgageSheduleDiff(
      loanAmount,
      annualInterestRate,
      initialTermMonths,
      startDate,
      prepayments = []
    ) {

      const montlyRate = annualInterestRate /12 /100;
      let currentBalance = loanAmount;
      let currentPayment = this.calculateAnnuity(loanAmount, montlyRate, initialTermMonths);
      let remainingTerm = initialTermMonths;
      let remainingTermTerm = initialTermMonths;

      const shedule = [];

      const startDateNew = startDate.replace(/-(\d)$/, '-0$1')
      const [year,month] = startDateNew.split('-').map(Number)
      const currentDate = new Date(year, month - 1)
      currentDate.setMonth(currentDate.getMonth() +1);

      // const currentDate = new Date(startDate);
      // currentDate.setMonth(currentDate.getMonth() +1);

      const sortedPrepayments = [...prepayments].sort((a,b)=>{
        const aDate = new Date(a.year, a.month - 1);
        const bDate = new Date(b.year, b.month - 1);
        return aDate - bDate;
      });

      let prepaymentIndex = 0;

      let principal = loanAmount / initialTermMonths;


      while (currentBalance > 0 && remainingTerm > 0) {
        const currentMonth = currentDate.getMonth() + 1;
        const currentYear = currentDate.getFullYear();

        const currentPrepayments = [];
        while (
          prepaymentIndex < sortedPrepayments.length &&
          sortedPrepayments[prepaymentIndex].month ===currentMonth &&
          sortedPrepayments[prepaymentIndex].year ===currentYear
          ) {
          currentPrepayments.push(sortedPrepayments[prepaymentIndex]);
          prepaymentIndex++;
        }

        const interest = currentBalance * montlyRate;
        // let principal = currentPayment - interest;
        let totalPayment = principal + interest;

        if (principal > currentBalance) {
          principal = currentBalance;
          totalPayment = principal + interest
        }

        const remainingBeforePrepayments = currentBalance - principal;

        const sheduleEntry = {
          month: currentMonth,
          year: currentYear,
          nameMonth:this.obj_month[currentMonth - 1],
          payment: totalPayment,
          principal: principal,
          interest: interest,
          remainingBalance: remainingBeforePrepayments,
          prepayments: []
        };

        currentBalance = remainingBeforePrepayments;

        for (const prep of currentPrepayments) {
          if (currentBalance <=0) break;

          const prepaymentAmount = Math.min(prep.amount, currentBalance);
          currentBalance -= prepaymentAmount;
          sheduleEntry.prepayments.push({
            amount:prepaymentAmount,
            month: prep.month,
            nameMonth:this.obj_month[prep.month - 1],
            year: prep.year,
            type: prep.type,
            remainingBalance:currentBalance
          });

          if(prep.type === 'term') {
            // if (currentPayment <= currentBalance * montlyRate) {
            //   remainingTerm = Infinity;
            //
            // } else {
            //   const numerator = Math.log(currentPayment / (currentPayment - currentBalance * montlyRate));
            //   const denominator = Math.log(1 + montlyRate);

            remainingTerm = Math.ceil(currentBalance / principal)
            remainingTermTerm = remainingTerm

            if (Number.isInteger(currentBalance / principal) ===false) {
                remainingTerm+=1
              }

            // }
          } else if (prep.type === 'payment') {
            if (remainingTerm > 1) {
              // currentPayment = this.calculateAnnuity(currentBalance, montlyRate, remainingTerm - 1);
              principal = currentBalance / (remainingTermTerm - (remainingTermTerm - remainingTerm + 1))

            } else {
              currentPayment = currentBalance + currentBalance + montlyRate
            }




          }
        }

        // sheduleEntry.remainingBalance = currentBalance;
        shedule.push(sheduleEntry)

        currentDate.setMonth(currentDate.getMonth() + 1);
        remainingTerm--

      }
      return shedule
    },

    //метод, котоороый буду использовать для добавления ипотечных каникул в сформированный график
    addingMortgageHolidays(sourceArray, dateArray){
      let obj = {}
      sourceArray.map(item => {
        const isHoliday = dateArray.some(
          d => d.month === item.month && d.year === item.year
        );
        if (isHoliday===true){

          //записал данные по этому месяцу в объект и поместил в конец уже сформированного ранее графика платежа
          obj.nameMonth = item.nameMonth
          obj.month = 0
          obj.year = 0
          obj.remainingBalance = 0 //поставил ноль, так как в задолжности в отложенных месяцах должен стоять именно ноль
          obj.interest = item.interest
          obj.principal = item.principal
          obj.payment = item.payment

          this.shedule.push(obj)
          obj = {}

          //а тут в месяце, где ипотечные каникулы нужным данным ставлю ноль
          item.interest=0
          item.principal=0
          item.payment=0
          item.isHoliday=true
        }




      });
    },
    updatePayementsShedule(payments) {
      let lastEntry = payments.reduce((acc, entry, index) => {
        if (entry.month > 0 && entry.year >0) return {index, month:entry.month, year: entry.year};
        return acc;
      }, {index:-1,month:null, year:null});

      if(lastEntry.index===-1 || lastEntry.index === payments.length -1) return payments

      let currentMonth = lastEntry.month;
      let currentYear = lastEntry.year;

      let nameMonth


      for (let i = lastEntry.index +1; i < payments.length; i++) {
        currentMonth++;


        if (currentMonth!==13) {
          nameMonth = this.obj_month[currentMonth-1]
        }
        else if (currentMonth ===13) {
          currentMonth = 1
          currentYear++
          nameMonth = this.obj_month[0]

        }

        payments[i] = {
          ...payments[i],
          month:currentMonth,
          year:currentYear,
          nameMonth:nameMonth

        };
      }
      return payments

    },

    fieldOccupancy(arrRequiredField,arrFilledRequired){
      return arrRequiredField - arrFilledRequired
    },

    resultButtonStatus(){

      const main_container = this.$el
      const array_required_field_information = main_container.querySelectorAll('.js-mor-required')
      const array_filled_required_field_information = main_container.querySelectorAll('.js-mor-required.js-filled')
      const required_compair_information =  this.fieldOccupancy(array_required_field_information.length,array_filled_required_field_information.length)

      const array_required_field_holidays = main_container.querySelectorAll('.js-holidays-required')
      const array_filled_required_field_holidays = main_container.querySelectorAll('.js-holidays-required.js-filled')
      const required_compair_holidays =  this.fieldOccupancy(array_required_field_holidays.length,array_filled_required_field_holidays.length)


      let flag = []
      let flag_period = []
      const array_block_early = main_container.querySelectorAll('.js--container-block-early')
      for (let i = 0; i<array_block_early.length; i++) {
        let array_required_field_early = array_block_early[i].querySelectorAll('.js-early-required')
        let array_filled_required_field_early = array_block_early[i].querySelectorAll('.js-early-required.js-filled')
        const required_compair_early =  this.fieldOccupancy(array_required_field_early.length,array_filled_required_field_early.length)

        if (array_filled_required_field_early.length !==0 && required_compair_early !==0) {
          flag.push(false)
        }
      }

      //ошибки в календаре переодичности
      for (let i = 0; i<array_block_early.length; i++) {
        if(!array_block_early[i].querySelector('.js--period-calendar').classList.contains('not-show')) {
          let array_required_field_early = array_block_early[i].querySelectorAll('.js-early-period-required')
          let array_filled_required_field_early = array_block_early[i].querySelectorAll('.js-early-period-required.js-filled')
          const required_compair_early =  this.fieldOccupancy(array_required_field_early.length,array_filled_required_field_early.length)

          if (array_filled_required_field_early.length !==0 && required_compair_early !==0) {
            flag_period.push(false)
          }
        }
      }

      // if (required_compair_information===0
      //   && (array_filled_required_field_holidays.length ===0 || required_compair_holidays ===0) && flag.length===0 && flag_period.length===0) {
      //   this.receivedTotalCalculation()
      // }
      // if (required_compair_information===0 && (array_filled_required_field_holidays.length ===0 || required_compair_holidays ===0) && flag.length===0 && flag_period.length===0) {
      if (required_compair_information===0 && (array_filled_required_field_holidays.length ===0 || required_compair_holidays ===0)) {
        this.btn_status=true
      }
      else {
        this.btn_status=false
      }

    },
    async checkingBeforeCreatingScheduleAsync(){
      await this.$nextTick()
      this.checkingBeforeCreatingSchedule()
    },


    checkingBeforeCreatingSchedule(){
      this.shedule=[]
      this.shedule_first=[]
      this.answersToSand=[]
      this.repayment_information = {
        mortgage_closure_month:null,
        mortgage_closure_year:null,
        if_earlier_month:0,
        monthly_payment_annuity:null,
        monthly_payment_min:null,
        monthly_payment_max:null,
        main_debt:0,
        percentages:0,
        percentages_first:0,
        principal:0,
        pay_in_total:0,
        savings:0
      }


      //проверка, что заполнены все обязательные поля
      const main_container = this.$el
      const array_required_field_information = main_container.querySelectorAll('.js-mor-required')
      const array_filled_required_field_information = main_container.querySelectorAll('.js-mor-required.js-filled')
      const required_compair_information =  this.fieldOccupancy(array_required_field_information.length,array_filled_required_field_information.length)

      const array_required_field_holidays = main_container.querySelectorAll('.js-holidays-required')
      const array_filled_required_field_holidays = main_container.querySelectorAll('.js-holidays-required.js-filled')
      const required_compair_holidays =  this.fieldOccupancy(array_required_field_holidays.length,array_filled_required_field_holidays.length)


      let flag = []
      let flag_period = []
      const array_block_early = main_container.querySelectorAll('.js--container-block-early')
      for (let i = 0; i<array_block_early.length; i++) {
        let array_required_field_early = array_block_early[i].querySelectorAll('.js-early-required')
        let array_filled_required_field_early = array_block_early[i].querySelectorAll('.js-early-required.js-filled')
        const required_compair_early =  this.fieldOccupancy(array_required_field_early.length,array_filled_required_field_early.length)


        if (array_filled_required_field_early.length !==0 && required_compair_early !==0) {
          flag.push(false)

          for (let item of array_required_field_early) {
            if (!item.classList.contains('js-filled') && item.closest('.js--container-block-required')
              && item.closest('.js--container-block-required').querySelector('.js--required-error') ) {
              item.closest('.js--container-block-required').querySelector('.js--required-error').classList.remove('display-none')
            }
            if (!item.classList.contains('js-filled') && item.closest('.js--for-clear-field')){
              item.closest('.js--for-clear-field').classList.add('input_error')
              item.closest('.js--container-block-early').classList.add('mobile-error')
              item.closest('.js--container-block-early').querySelector('.js--wrapper-match-alarm').classList.add('display-none-alarm')
            }
          }

        }

      }
      if (flag.length>0) {
        this.not_field_early=true
      } else {
        this.not_field_early=false
      }

      //ошибки в календаре переодичности
      for (let i = 0; i<array_block_early.length; i++) {
        if(!array_block_early[i].querySelector('.js--period-calendar').classList.contains('not-show')) {
          let array_required_field_early = array_block_early[i].querySelectorAll('.js-early-period-required')
          let array_filled_required_field_early = array_block_early[i].querySelectorAll('.js-early-period-required.js-filled')
          const required_compair_early =  this.fieldOccupancy(array_required_field_early.length,array_filled_required_field_early.length)


          if (array_filled_required_field_early.length !==0 && required_compair_early !==0) {
            flag_period.push(false)

            for (let item of array_required_field_early) {
              if (!item.classList.contains('js-filled') && item.closest('.js--container-block-required')
                && item.closest('.js--container-block-required').querySelector('.js--required-error') ) {
                item.closest('.js--container-block-required').querySelector('.js--required-error').classList.remove('display-none')
              }
              if (!item.classList.contains('js-filled') && item.closest('.js--for-clear-field')){
                item.closest('.js--for-clear-field').classList.add('input_error')
                item.closest('.js--container-block-early').classList.add('mobile-error')
                item.closest('.js--container-block-early').querySelector('.js--wrapper-match-alarm').classList.add('display-none-alarm')
              }
            }
          }
        }
      }
      if (flag_period.length>0) {
        this.not_field_early_period=true
      } else {
        this.not_field_early_period=false
      }

      //ошибки, если не заполнены обязательные поля в блоке информация
      if (required_compair_information>0) {
        for (let item of array_required_field_information) {
          if (!item.classList.contains('js-filled') && item.closest('.js--container-block')
            && item.closest('.js--container-block').querySelector('.js--required-error') ) {
            item.closest('.js--container-block').querySelector('.js--required-error').classList.remove('display-none')
          }
          if (!item.classList.contains('js-filled') && item.closest('.js--for-clear-field')){
            item.closest('.js--for-clear-field').classList.add('input_error')
          }
        }
        this.not_field_information=true

      }
      else if (required_compair_information===0) {
        this.not_field_information=false

      }
      //ошибки, если не заполнены обязательные поля в блоке каникулы
      if (array_filled_required_field_holidays.length !==0 && required_compair_holidays !==0) {

        for (let item of array_required_field_holidays) {
          if (!item.classList.contains('js-filled') && item.closest('.js--container-block')
            && item.closest('.js--container-block').querySelector('.js--required-error') ) {
            item.closest('.js--container-block').querySelector('.js--required-error').classList.remove('display-none')
            eventBus.$emit('emitErrorFieldBlock',true)
          }
          if (!item.classList.contains('js-filled') && item.closest('.js--for-clear-field')){
            item.closest('.js--for-clear-field').classList.add('input_error')
          }
        }
        this.not_field_holidays=true
      }
      else {
        this.not_field_holidays=false
      }


      //проверка, что каникулы не совпадают с досрочкой
      this.result_comparing_holidays_early=[]
      // console.log('Прибежало this.array_early_repayment_to_send');
      // console.log(this.array_early_repayment_to_send);
      if (this.array_early_repayment.length>0&&this.array_holidays.length>0) {
        this.result_comparing_holidays_early = this.mergeMatchedData(this.array_early_repayment,this.array_holidays)
        // this.result_comparing_holidays_early = this.mergeMatchedData(this.array_early_repayment_to_send,this.array_holidays)

      }

      if (this.result_comparing_holidays_early.length === 0 && required_compair_information===0
        && (array_filled_required_field_holidays.length ===0 || required_compair_holidays ===0) && flag.length===0 && flag_period.length===0) {
          this.receivedTotalCalculation()
      }
      // console.log('this.result_comparing_holidays_early');
      // console.log(this.result_comparing_holidays_early);

    },

    //формирование графика платежа по месацам со
    receivedTotalCalculation(){
      eventBus.$emit('emitClearAllError')

      if (this.state.payment_type==='annuity') {
        this.shedule_first = this.calculateMortgageSheduleFirst(
          this.loanAmount,this.annualInterestRate,this.loanTerm,this.startMortage,this.array_early_repayment
        )
        this.shedule = this.calculateMortgageShedule(
          this.loanAmount,this.annualInterestRate,this.loanTerm,this.startMortage,this.array_early_repayment
        )
      }
      else if (this.state.payment_type==='differentiated') {
        this.shedule_first = this.calculateMortgageSheduleDiffFirst(
          this.loanAmount,this.annualInterestRate,this.loanTerm,this.startMortage,this.array_early_repayment
        )
        this.shedule = this.calculateMortgageSheduleDiff(
          this.loanAmount,this.annualInterestRate,this.loanTerm,this.startMortage,this.array_early_repayment
        )
      }
      // ипотечные каникулы
      if (this.holidays_term!==0){
        this.addingMortgageHolidays(this.shedule, this.array_holidays)
        this.updatePayementsShedule(this.shedule)
      }

      //формирую объект со значениями, которые буду подставлять в данные об ипотеке

      if (this.shedule.length > 0) {
        this.repayment_information.mortgage_closure_month = this.shedule[this.shedule.length - 1].nameMonth
        this.repayment_information.mortgage_closure_year = this.shedule[this.shedule.length - 1].year
        this.repayment_information.if_earlier_month = this.shedule_first.length - this.shedule.length

        //если аннуитентный и досрочек в уменьшение платежа не было
        if (this.array_early_repayment.length === 0 && this.state.payment_type==='annuity') {
          this.repayment_information.monthly_payment_annuity = this.shedule[0].payment

        }
        if (this.array_early_repayment.length === 0 && this.state.payment_type==='differentiated') {
          const result = this.findMinMax(this.shedule,'payment')
          this.repayment_information.monthly_payment_min = result.min
          this.repayment_information.monthly_payment_max = result.max

        }
        if (this.array_early_repayment.length > 0 && this.state.payment_type === 'annuity') {
          const availability = this.array_early_repayment.some(obj => obj.hasOwnProperty('type') && (obj['type'] === 'payment'||obj['type'] === 'term') );
          if (availability === true) {
            const result = this.findMinMax(this.shedule, 'payment');
            this.repayment_information.monthly_payment_min = result.min;
            this.repayment_information.monthly_payment_max = result.max;
          }
          else {
            this.repayment_information.monthly_payment_min = this.shedule[0].payment
            this.repayment_information.monthly_payment_max = this.shedule[0].payment
          }

          // const availabilityTerm = this.array_early_repayment.some(obj => obj.hasOwnProperty('type') && obj['type'] === 'term');
          // if (availabilityTerm === true) {
          //   const result = this.findMinMax(this.shedule, 'term');
          //   this.repayment_information.monthly_payment_min = result.min;
          //   this.repayment_information.monthly_payment_max = result.max;
          // }


        }
        if (this.array_early_repayment.length > 0 && this.state.payment_type==='differentiated') {
          const availability = this.array_early_repayment.some(obj => obj.hasOwnProperty('type') && obj['type'] === 'payment')
          if(availability === true) {
            const result = this.findMinMax(this.shedule,'payment')
            this.repayment_information.monthly_payment_min = result.min
            this.repayment_information.monthly_payment_max = result.max
          }
          else {
            const result = this.findMinMax(this.shedule,'payment')
            this.repayment_information.monthly_payment_min = result.min
            this.repayment_information.monthly_payment_max = result.max
          }

        }

        //проценты
        this.repayment_information.percentages = this.shedule.reduce((acc,obj) => {
          return obj.hasOwnProperty('interest') ? acc + obj['interest'] : acc;
        }, 0)

        //всего заплатите
        this.repayment_information.principal = this.shedule.reduce((acc,obj) => {
          return obj.hasOwnProperty('principal') ? acc + obj['principal'] : acc;
        }, 0)
        this.repayment_information.pay_in_total = this.repayment_information.percentages + this.loanAmount

        //экономия
        this.repayment_information.percentages_first = this.shedule_first.reduce((acc,obj) => {
          return obj.hasOwnProperty('interest') ? acc + obj['interest'] : acc;
        }, 0)

        this.repayment_information.savings = this.repayment_information.percentages_first - this.repayment_information.percentages


      }

      // console.log('Новое this.flag_send_results');
      // console.log(this.flag_send_results);

      if (this.can_share===1 && this.flag_send_results===true) {
        this.sendingResult('result');//для финальной отправки нужно это
        // this.sendingResultToApi(888)//это не нужно

      }
    },

    //---------ОТПРАВКА------------------------------------

    captchaInit(flag) {
      this.captcha_id = window.smartCaptcha.render('yandex-captcha-mortgage-calculator', {
        sitekey: conf.smartcaptcha_key,
        invisible: true,
        callback: (token) => {
          if (flag==='result'){
            this.sendingResultToApi(token)
          }
          if (flag==='mail') {
            this.sendingMailToApi(token)
          }
        },
      });
    },
    sendingResultToApi(token){
      this.answersToSand = []
      const obj_information = {}
      const obj_holidays = {}
      const obj_early = []
      obj_information.loanAmount=`${this.loanAmount}`
      obj_information.dateReceipt=JSON.stringify(this.dateLoanReceipt)
      obj_information.bet=`${this.annualInterestRate}`
      // obj_information.term=this.termMonthOrYear
      obj_information.term=`${this.termMonthOrYear}`
      obj_information.loanTerm=`${this.loanTerm}`
      obj_information.paymentType=this.state.payment_type
      this.answersToSand.push(obj_information)

      if(this.holidays_term!==0){
        obj_holidays.termHoliday=`${this.holidays_term}`
      }
      if(this.holidays_date_to_send.length!==0){
        obj_holidays.beginningHolidays=JSON.stringify(this.holidays_date_to_send)
      }
      // if(this.holidays_term!==0&&this.holidays_date_to_send.length!==0){
      //   this.answersToSand.push(obj_holidays)
      // } else if(this.holidays_term===0){
        this.answersToSand.push(obj_holidays)
      // }

      //досрочка
      const array2MapEnd = this.array_repayment_end.reduce((map,item) => {
        map[item.id] =item
        return map
      }, {})
      this.array_early_repayment_to_send.forEach(item => {
        if (array2MapEnd[item.id]) {
          item.earlyEnd = array2MapEnd[item.id]
        }
      })

      const array2MapMain = this.array_repayment_main.reduce((map,item) => {
        map[item.id] =item
        return map
      }, {})
      this.array_early_repayment_to_send.forEach(item => {
        if (array2MapMain[item.id]) {
          item.earlyMain = array2MapMain[item.id]
        }
      })

      const array2MapAllPeriod = this.array_repayment_all_period.reduce((map,item) => {
        map[item.id] =item
        return map
      }, {})
      this.array_early_repayment_to_send.forEach(item => {
        if (array2MapAllPeriod[item.id]) {
          item.earlyAllPeriod = array2MapAllPeriod[item.id]
        }
      })

      const array2MapPeriod = this.array_repayment_select_period.reduce((map,item) => {
        map[item.key] =item
        return map
      }, {})
      this.array_early_repayment_to_send.forEach(item => {
        if (array2MapPeriod[item.id]) {
          item.earlySelectPeriod = array2MapPeriod[item.id]
        }
      })

      const dateMap = {}
      this.array_repayment_date.forEach(item => {
        const id = item[1]
        dateMap[id] = item
      })
      this.array_early_repayment_to_send.forEach(obj => {
        const dateItem = dateMap[obj.id]
        if (dateItem) {
          obj.earlyDate = dateItem
        }
      })

      const array2MapAmount = this.array_repayment_amount.reduce((map,item) => {
        map[item.index] =item
        return map
      }, {})
      this.array_early_repayment_to_send.forEach(item => {
        if (array2MapAmount[item.id]) {
          item.earlyAmount = array2MapAmount[item.id]
        }
      })

      const array2MapWhatReduce = this.array_repayment_what_reduce.reduce((map,item) => {
        map[item.index] =item
        return map
      }, {})
      this.array_early_repayment_to_send.forEach(item => {
        if (array2MapWhatReduce[item.id]) {
          item.whatReduceArray = array2MapWhatReduce[item.id]
        }
      })

      const array2MapBlockRequared = this.array_block_requared.reduce((map,item) => {
        map[item.id] =item
        return map
      }, {})
      this.array_early_repayment_to_send.forEach(item => {
        if (array2MapBlockRequared[item.id]) {
          item.blockRequared = array2MapBlockRequared[item.id]
        }
      })



      // const dateMapDate = {}
      // this.array_repayment_selected_dates.forEach(item => {
      //   const id = item[1]
      //   dateMapDate[id] = item
      // })
      // this.array_early_repayment_to_send.forEach(obj => {
      //   const dateItem = dateMapDate[obj.id]
      //   if (dateItem) {
      //     obj.earlyDate = dateItem
      //   }
      // })









      if (this.array_early_repayment_to_send.length>0) {
        this.answersToSand.push(this.array_early_repayment_to_send)
      }



      // console.log('this.answersToSand');
      // console.log(this.answersToSand);


      // prepayments;

      let data = {
        "calculatorId": this.calculatorId,
        "answers": this.answersToSand,
        "smart-token": token
      }



      //это для тестирования
      //-------------------------------------------------

      // this.answersId = 6
      // setTimeout(()=>{
      //   this.answerLink = {"link":"link.ru","vk":'sss.ru', "tg":'dddd.ru', "wp":"rrr.ru"}
      // },3000)





      //-------------------------------------------------------------------------

      axios({
        method:'post',
        url:'/api/local/calculator/answers/',

        headers: {
          "Content-type": "application/json; charset=UTF-8",
          'X-Bitrix-Csrf-Token': window.BX.bitrix_sessid(),
        },

        data:data
      })
        .then((res)=>{
          if(res.data.code===200&&res.data.result){
            this.answersId = res.data.result.answersId
            this.answerLink = res.data.result.answerLink
            this.description_after_sand=null
          }
          if (res.data.code!==200) {
            if (res.data.description) {
              this.description_after_sand=res.data.description
            }
            if (res.data.code) {
              this.answer_code=res.data.code
            }
          }
          this.answersToSand=[]
        })

        //Если запрос с ошибкой
        .catch((error)=> {
          if(error.response){
            if (error.response.data!==undefined){
              console.log(error.response);
              this.description_after_sand=error.response.data.description
            }
          }
          // state.preload_btn=false
          console.log(error);
        });

    },
    sendingMailToApi(token){
      const modal_main_content = this.$refs.dataModalMail.querySelector('.js--modal-main-content')
      const modal_success_content = this.$refs.dataModalMail.querySelector('.js--modal-wr-success')
      const modal_failed_content = this.$refs.dataModalMail.querySelector('.js--modal-wr-failed')
      let data = {
        "userEmail":this.mask_mail.value,
        "smart-token":token,
        "answersId":this.answersId,
        "agree":this.check_agree_advertisement
      }

      //это для тестирования

      // setTimeout(()=>{
      //
      //   if (modal_main_content) {
      //     modal_main_content.classList.add('unactive')
      //   }
      //   if (modal_failed_content) {
      //     modal_failed_content.classList.add('active')
      //   }
      //
      // },3000)

      // ---------------------------------------


      axios({
        method:'post',
        url:'/api/local/calculator/answers/sendmail/',
        headers: {
          "Content-type": "application/json; charset=UTF-8",
          'X-Bitrix-Csrf-Token': window.BX.bitrix_sessid(),
        },
        data: data
      })
        .then((res)=>{
          if (modal_main_content) {
            modal_main_content.classList.add('unactive')
          }
          if (modal_success_content) {
            modal_success_content.classList.add('active')
          }

        })

        //Если запрос с ошибкой
        .catch((error)=> {
          if (error.response.data!==undefined&&error.response.data.description!==undefined){
            console.log(error.response);
            this.description_after_sand_mail=error.response.data.description
          }
          // state.preload_btn=false
          console.log(error);
          if (modal_main_content) {
            modal_main_content.classList.add('unactive')
          }
          if (modal_failed_content) {
            modal_failed_content.classList.add('active')
          }
        });

    },

    sendingResult(flag){
      //закоментировать
      // this.sendingMailToApi('8888')


      //расскоментировать
      this.captchaInit(flag);
      let recaptchaKey = null;
      if(typeof conf !== 'undefined'){
        recaptchaKey = conf.smartcaptcha_key
      }
      if ((typeof recaptchaKey !== 'undefined') && recaptchaKey!==null) {
        window.smartCaptcha.execute(this.captcha_id);
      }
    },

    //-----------------------------------------------------

    //поиск минимального и максимального значния платежа в сформированнм графике
    findMinMax(arr, key) {
      return arr.reduce((acc,obj) => {
        const value = obj[key];

        if (typeof value !=='undefined' && value!==0) {
          acc.min = value < acc.min ? value : acc.min;
          acc.max = value > acc.max ? value : acc.max
        }
        return acc;
      }, {min: Infinity, max: -Infinity})


      // let min = Infinity;
      // let max = Infinity;
      //
      // for (const item of arr) {
      //   const payment = item.payment
      //   if(payment === 0) continue;
      //
      //   if(payment < min) min = payment;
      //   if(payment > max) max = payment;
      // }
      // if(min === Infinity) {
      //   return {min:undefined, max:undefined}
      // }
      // return {min,max}




    },

    updateScreenWidth() {
      this.screenWidth = window.innerWidth;
      this.screenHeight = window.innerHeight;
    },

    //склонение слово месяц

    getMonthDeclension(number) {
      number = Math.abs(number)
      const cases = [2,0,1,1,1,2]
      const word_titl = ['месяц', 'месяца', 'месяцев']

      return word_titl[
        number % 100 > 4 && number % 100 < 20 ? 2 :cases[number % 10 < 5 ? number % 10 : 5]
      ]

    }
  },
  filters: {
    capitalize(str) {
      if (!str) return '';
      return str.charAt(0).toUpperCase() + str.slice(1)
    },
    format_decimal:(val) => {
      if (val!==undefined && val!==null){
        return new Intl.NumberFormat("ru-RU").format(Math.abs(val.toFixed(2)));
      }

    },
    format_month:(val) => {
      return val===1?'Январь':
        val===2?'Февраль':
          val===3?'Март':
            val===4?'Апрель':
              val===5?'Май':
                val===6?'Июнь':
                  val===7?'Июль':
                    val===8?'Август':
                      val===9?'Сентябрь':
                        val===10?'Октябрь':
                          val===11?'Ноябрь':
                            val===12?'Декабрь':''
    },
  },
  computed: {
  },
  watch: {
    screenWidth() {
      if (this.screenWidth > 480 && this.error_message === true) {
        document.body.classList.remove('body-modal')
        if (document.querySelector('.js--layer-overlay')) {
          document.querySelector('.js--layer-overlay').classList.remove('active')
        }
      }
      else if (this.screenWidth <= 480 && this.error_message === true) {
        document.body.classList.add('body-modal')
        if (document.querySelector('.js--layer-overlay')) {
          document.querySelector('.js--layer-overlay').classList.add('active')
        }
      }
    },
    screenHeight(){

    },




  },

  created(){
    if (this.answers.length>0){
      this.flag_send_results = false

    }



  },
  mounted() {
    this.inputMaskEarly()
    this.answerLink=this.answerLinkProps
    this.answersId=this.answersIdProps
    window.addEventListener('resize', this.updateScreenWidth);
    if(this.answers.length>0){
      this.flag_send_results = false
      this.$nextTick(()=>{

        if (this.$el.querySelector('.js--mobileButtonResult')) {

          this.$el.querySelector('.js--mobileButtonResult').click();
          setTimeout(()=>{
            this.flag_send_results = true
          },1000)

          // console.log('Нажалась кнопка когда делишься ссылкой');
        }

      })



    }

  },
  components:{
    ComponentInformationMortgage,
    ComponentMortgageHolidays,
    ComponentEarlyRepayment,
    ComponentRepaymentData,
    ComponentPaymentSchedule,
    ComponentCalendarMobileShedule
  }

};
</script>
<style scoped>
</style>




v-component-information-mortgage

<script>
import eventBus from '../development-tools/eventBus.vue';
import componentCalendar from './v-2-component-calendar-mortgage-data.vue';
import numberFormatting from '../mixin/numberFormatting.js';
import IMask from 'imask';

let maskCalendarMortgageData

let mask_interest;
export default {
  name: 'v-component-information-mortgage',
  mixins: [numberFormatting],
  props:['answers','tooltip_information', 'screenWidth'],
  data(){
    return {
      mask_interest:null,
      term:'year',
      //поля
      payment_type:'annuity',
      a_calculation:null,// исходный ежемесячный платеж (нужно передавать в стейт)
      n_calculation:0, // количество платежей (возможно нужно передавать в общий стейт)

      date_receipt_mortgage:null, //дата получения ипотеки
      field_loan_term:null, //срок кредита
      field_loan_term_error:'',
      loan_amount:0, //сумма кредита
      i_calculation:0,//  ежемесячная процентная ставка (возможно не нужно передавать в стейт)



    }
  },
  methods:{
    //ВБИВАНИЯ В ПОЛЯ

    receivedTimeDataLoan(data){
      eventBus.$emit('emitTimeDataLoan',data)
    },


    //отправляю сумму кредита
    loanAmount(el) {
      let element;
      if (el instanceof Event) {
       element = el.currentTarget;
      }
      else if(el instanceof HTMLElement ) {
        element = el;
      }

      let parse_element = element.value.replace(/\s/g, '')
      this.loan_amount = parseInt(parse_element)
      if (element.value.length>0) {
        this.$emit('sendLoanAmountForHolidays',this.loan_amount)
        if (element.classList.contains('js-mor-required')) {
          element.classList.add('js-filled')
          this.$emit('sendButtonResult')
        }
        if (element.closest('.js--container-block')
          && element.closest('.js--container-block').querySelector('.js--required-error')) {
          element.closest('.js--container-block').querySelector('.js--required-error').classList.add('display-none')
        }
        if (element.closest('.js--for-clear-field')) {
          element.closest('.js--for-clear-field').classList.remove('input_error')
        }


      }
      else if (element.value.length===0) {
        this.loan_amount=0
        element.classList.remove('js-filled')
        this.$emit('sendButtonResult')

      }
    },

    ////ввод только цифр в строке
    justNumber(count,e){
      let element;
      if (e instanceof Event) {
        element = e.currentTarget;
      }
      else if(e instanceof HTMLElement ) {
        element = e;
      }
      element.value = element.value.replace(/[^\d]/g, '');

      if (element.value.length > 0 && element.value[0] === '0'){
        element.value = '1' +  element.value.slice(1)
      }

      // if (element.value.length>count){
      //   element.value = element.value.substring(0, count);
      // }


      if (parseInt(element.value) > count) {
        element.value = count
      }



      this.field_loan_term_error=element.value


      if (element.value.length===0) {
        this.field_loan_term=null
        if (element.closest('.js-mor-required')) {
          element.closest('.js-mor-required').classList.remove('js-filled')
          this.$emit('sendButtonResult')
        }
        if (element.closest('.js--for-clear-field')) {
          element.closest('.js--for-clear-field').classList.remove('input_error')
        }
        eventBus.$emit('emitMonthlyPayment',0)
      }
      else if(element.value.length>0) {
        this.field_loan_term = parseInt(element.value)
        if (this.term==='year') {
          this.n_calculation = this.field_loan_term * 12
        } else {
          this.n_calculation = this.field_loan_term
        }
        if (element.closest('.js-mor-required').classList.contains('js-mor-required')) {
          element.closest('.js-mor-required').classList.add('js-filled')
          this.$emit('sendButtonResult')
        }
        if (element.closest('.js--container-block')
          && element.closest('.js--container-block').querySelector('.js--required-error')) {
          element.closest('.js--container-block').querySelector('.js--required-error').classList.add('display-none')
        }
        if (element.closest('.js--for-clear-field')) {
          element.closest('.js--for-clear-field').classList.remove('input_error')
        }

        //передаю срок кредита в родитель и в компоненту Ипотечные каникулы и Досрочное погашение
        eventBus.$emit('emitMonthlyPayment',this.n_calculation)
      }




    },

    //СТИРАНИЯ ПОЛЕЙ

    //стирание в поле сумма ипотеки находится в файле nimbertFormattng.js
    receivedClearDateReceive(){

      this.date_receipt_mortgage=null
      //отправил стирание в календарь каникул и досрочки
      eventBus.$emit('emitClearCalendarHolidaysPayment')
      this.$emit('sendButtonResult')
    },

    //стираю срок кредита
    clearInputTermAmount(e){
      const element = e.currentTarget;
      const parent = element.closest('.js--tex-deduc-input');
      if (parent) {
        parent.querySelector('input').value='';
        parent.querySelector('input').classList.remove('active')
        parent.classList.remove('js-filled')
        element.classList.remove('active')
      }
      this.field_loan_term=null
      this.field_loan_term_error=''
      eventBus.$emit('emitMonthlyPayment',0)
      this.$emit('sendButtonResult')
    },

    //Очистка поля с процентами
    clearInputPercent(el) {
      const element = el.currentTarget
      const parent = element.closest('.js--tex-deduc-input');
      if (parent) {
        this.mask_interest.value='';
        parent.querySelector('input').classList.remove('active')
        element.classList.remove('active')
      }
      this.i_calculation=0
      if (element.closest('.js--for-clear-field')
        && element.closest('.js--for-clear-field').querySelector('.js-mor-required')) {
        element.closest('.js--for-clear-field').querySelector('.js-mor-required').classList.remove('js-filled')
      }
      this.$emit('sendButtonResult')

    },




    //именение радио-кнопок Годы - месяцы, в зависимости от данных формируется вввод в поле "Срок кредита"
    // возможность вбивать двух или трёхзначное число
    changeMortgageTerm(el) {
      const element = el.currentTarget
      this.term = element.getAttribute('value')

      if (this.field_loan_term!==null){
        if (this.term==='year') {
          this.n_calculation = this.field_loan_term * 12
        } else {
          this.n_calculation = this.field_loan_term
        }
      } else {
        this.n_calculation = 0
      }

      //передаю срок кредита в родитель и в компоненту Ипотечные каникулы
      eventBus.$emit('emitMonthlyPayment',this.n_calculation)


    },
    //маска для ввода процентов
    inputRate(){
      const input_status = document.querySelectorAll('.js--interest-rate-calc input');
      const maskOptions = {
        mask: Number,
        scale: 2,
        thousandsSeparator: '',
        padFractionalZeros:false,
        normalizeZeros:'trim',
        // padFractionalZeros: true,
        radix: ',',
        mapToRadix: ['.',','],
        min: 0.1,
        max: 100,
        autofix:true,
        // validate:function (value) {
        //   return value ===0 || value >=0.1
        // }

        // autofix:true
      };
      for (const item of input_status) {
        // eslint-disable-next-line no-new
        this.mask_interest = IMask(item, maskOptions);
      }
      this.mask_interest.on('accept',()=>{
        const parse_element = this.mask_interest.value.replace(',', '.')
        this.i_calculation = parseFloat(parse_element)
        if (this.mask_interest.value.length===0) {
          this.i_calculation=0
        }

      })
    },
    //ограничение ввода процентной ставки, число не больше 100
    maxPercent(el) {
      let element;
      if (el instanceof Event) {
        element = el.currentTarget;
      }
      else if(el instanceof HTMLElement ) {
        element = el;
      }
      if (parseInt(element.value)>100){
        element.value=100
      }
      if(element.value=='100,') {
        element.value=100
      }
      if (element.value.length>0) {
        if (element.classList.contains('js-mor-required')) {
          element.classList.add('js-filled')
          this.$emit('sendButtonResult')
        }
        if (element.closest('.js--container-block')
          && element.closest('.js--container-block').querySelector('.js--required-error')) {
          element.closest('.js--container-block').querySelector('.js--required-error').classList.add('display-none')
        }
        if (element.closest('.js--for-clear-field')) {
          element.closest('.js--for-clear-field').classList.remove('input_error')
        }

      }
      else if (element.value.length===0) {
        element.classList.remove('js-filled')
        this.$emit('sendButtonResult')
      }
    },


    // общая функция для методов при вводе в поле срок кредита
    multiplyActionsInputLoanTerm(perem,el) {
      this.justNumber(perem,el)
      this.totalCountPayments(el);
    },

    //передаю в родитель, что стёрли поле сумма кредита
    clearInputLoanAmount(e) {
      const element = e.currentTarget
      const container = element.closest('.js--container-block')

      if (element.closest('.js--for-clear-field')
        && element.closest('.js--for-clear-field').querySelector('.js-mor-required')) {
        element.closest('.js--for-clear-field').querySelector('.js-mor-required').classList.remove('js-filled')
      }

      this.$emit('sendClearInputLoanAmount')
      this.$emit('sendButtonResult')
    },
    clearInputLoanAmountAll(e) {
      const element = e.currentTarget
      const container = element.closest('.js--container-block')
      const array_requared = container.querySelectorAll('.js-mor-required')
      for (let item of array_requared) {
        item.classList.remove('js-filled')
      }
      this.$emit('sendButtonResult')

      this.mask_interest.value='';

      this.$emit('sendClearInputLoanAmount')
    },



    //---------------------------------------------------------------------------------------------

    //общая функция для клика по стереть все поля блока
    multiClickClearAllLoanAmount(e) {
      this.clearAllFieldBlock(e)
      this.clearInputLoanAmountAll(e)
    },

    //очистить все поля блока
    clearAllFieldBlock(el) {
      const element = el.currentTarget
      const parent = element.closest('.js--container-block');
      if (parent) {
        const array_block_input = parent.querySelectorAll('.js--for-clear-field')
        for (let item of array_block_input) {
          if (item.querySelector('input.js--normal-field')) {
            item.querySelector('input.js--normal-field').value = ''
          }
          //при клике очистить всё переключение в дефолтное состояние радиокнопки группы срок кредита в группе данные об ипотеке
          if (item.classList.contains('js--for-clear-radio-term')) {
            if(item.querySelector('input[type="radio"]').value==='year') {
              item.querySelector('input[type="radio"]').click();
            }
          }
          //при клике очистить всё переключение в дефолтное состояние радиокнопки группы тип платежав группе данные об ипотеке
          if (item.classList.contains('js--for-clear-radio-type-payment')) {
            if(item.querySelector('input[type="radio"]').value==='annuity') {
              item.querySelector('input[type="radio"]').click();
            }
          }

          //при клике очистить всё очищение поля инпут календаря
          if (item.querySelector('input.js--calendar-field')) {
            item.querySelector('input.js--calendar-field').value = ''
          }
          if (item.querySelector('.js--clear-calc-tax')) {
            item.querySelector('.js--clear-calc-tax').classList.remove('active')
          }
          //отправил в календарь что всё стёрли
          eventBus.$emit('emitClearCalendarHolidaysPaymentAll')

          //отправляю в календарь блока
          eventBus.$emit('emitClearCalendarHolidaysPayment')



        }
      }

      this.date_receipt_mortgage=null
      this.field_loan_term=null
      this.field_loan_term_error=''
      this.loan_amount=0
      this.i_calculation=0
      eventBus.$emit('emitMonthlyPayment',0)
    },


    //-----------------------------------------------------------------------------------

    //общая функция для клика по стереть поле Сумма кредита
    multiClickCloseLoanAmount(e) {
      this.clearInput(e)
      this.clearInputLoanAmount(e)
    },

    // общая функция для методов при вводе в поле сумма кредита
    multiplyActionsInpuLoanAmount(perem,el) {
      this.numberFormattingThousandths(perem,el)
      //сумма кредита
      this.loanAmount(el)
    },


    //формирую тип платежа
    paymentType(el){
      const element = el.currentTarget
      this.payment_type = element.value
    },


    //РАСЧЁТ И ОТПРАВКА ДАННЫХ РОДТЕЛЬСКОМУ КОМПОНЕНТУ

    //получил данные календаря "Дата получения кредита" записал в переменную для отправки потом родителю, следующей строкой в компонент Ипотечные каникулы и досрочное погашение
    receivedDateLoanReceipt(data) {
      this.date_receipt_mortgage=data
      eventBus.$emit('emitDateLoanReceipt',data)
      this.$emit('sendButtonResult')
    },

    //расчёт общего количества ежемесячных платежей - n_calculation
    totalCountPayments(el){
      // const element = el.currentTarget;
      // this.field_loan_term = parseInt(element.value)
      //
      // if (this.term==='year') {
      //   this.n_calculation = this.field_loan_term * 12
      // } else {
      //   this.n_calculation = this.field_loan_term
      // }
      // //передаю срок кредита в родитель и в компоненту Ипотечные каникулы и Досрочное погашение
      // eventBus.$emit('emitMonthlyPayment',this.n_calculation)
    },






  },
  watch:{
    allFieldsFilled() {
      if (this.allFieldsFilled) {

      }
    },



    //ошибка, если поле не заполнено воззвращает underfind
    term() {
      if (this.term==='year' && this.$refs.fieldTerm.value.length > 2) {
        this.$refs.fieldTerm.value = parseInt(parseInt(this.$refs.fieldTerm.value) / 12);
        this.field_loan_term = this.$refs.fieldTerm.value
      }
      if (this.term==='year' && this.field_loan_term!==null) {
        this.n_calculation = this.field_loan_term * 12
      }
      else if (this.term==='month' && this.field_loan_term!==null) {
        this.n_calculation = this.field_loan_term
      }
      //(возможно передавать и не нужно, нужна для расчётов тут, пока просто для тестирования)
      // this.$emit('sendMonthlyPayment',this.n_calculation)

    },






  },
  mounted(){
    this.inputRate();
    //когда страница только загрузилась передаю в компоненту Ипотечные каникулы срок кредита = нулю
    eventBus.$emit('emitMonthlyPayment',this.n_calculation)


    if(this.answers.length>0&&Object.keys(this.answers[0]).length!==0){
      //подставляю сумму кредита
      if (this.answers[0].loanAmount) {
        this.$refs.inputLoanAmount.value=new Intl.NumberFormat("ru-RU").format(this.answers[0].loanAmount);
        this.fieldNotEmpty(this.$refs.inputLoanAmount)
        this.loanAmount(this.$refs.inputLoanAmount)
      }
      //время года месяц - год




      //подставляю ставку
      if (this.answers[0].bet) {
        this.$refs.inputPersent.value=(this.answers[0].bet).toString().replace(/\./g, ',')
        this.mask_interest.value=(this.answers[0].bet).toString().replace(/\./g, ',')
        this.maxPercent(this.$refs.inputPersent)
        this.fieldNotEmpty(this.$refs.inputPersent)
        this.i_calculation = parseFloat(this.answers[0].bet)
      }


      //подставляю срок кредита
      if(this.answers[0].term && this.answers[0].term==='month') {
        this.$refs.switchTermMonth.click()
      }
      if (this.answers[0] && this.answers[0].loanTerm){
        if(this.answers[0].term==='month') {
          this.$refs.fieldTermWrapper.querySelector('.js--field-term').value = this.answers[0].loanTerm
          this.justNumber(480,this.$refs.fieldTerm)
        }
        else if (this.answers[0].term==='year') {
          this.$refs.fieldTermWrapper.querySelector('.js--field-term').value = parseInt(this.answers[0].loanTerm) / 12
          this.justNumber(40,this.$refs.fieldTerm)
        }

        this.fieldNotEmpty(this.$refs.fieldTermWrapper.querySelector('.js--field-term'))

      }

      //подставляю тип платежа
      if(this.answers[0].paymentType && this.answers[0].paymentType==='differentiated') {
        this.$refs.differentiatedCheck.click()
      }
      if(this.answers[0].dateReceipt) {
        const dateReceipt = JSON.parse(this.answers[0].dateReceipt);
        const time_data_loan = parseInt(dateReceipt[1]) *12 + parseInt(dateReceipt[0])+1
        eventBus.$emit('emitTimeDataLoan',time_data_loan)
        eventBus.$emit('emitDateLoanReceipt',dateReceipt)
      }


      // console.log('Ансвер');
      // console.log(this.answers[0]);

    }

  },
  computed:{
    allFieldsFilled() {
      if (
        this.date_receipt_mortgage !==null ||
        this.field_loan_term_error !=='' ||
        this.loan_amount !==0 ||
        this.i_calculation !==0
      ) {
        return true
      }
    }

  },


  components:{
    componentCalendar

  },
  created(){
    //была нажата кнопка рассчитать
    eventBus.$on('sendtotalCalculation', () => {
      this.$emit('sendDateLoanReceipt',this.date_receipt_mortgage)
      this.$emit('sendMonthlyPayment',this.n_calculation)
      this.$emit('sendMonthlyInterestRate',this.i_calculation)
      this.$emit('sendLoanAmount',this.loan_amount)
      this.$emit('sendPaymentType',this.payment_type)
      this.$emit('sendTermMonthOrYear',this.term)
    })
  }
};
</script>

v-2-component-calendar

<script>
import eventBus from '../development-tools/eventBus.vue';
import Storage from '../development-tools/state.vue';
// import IMask from 'imask';
import VanillaCalendar from '../../vanilla-calendar2';
import numberFormatting from '../mixin/numberFormatting.js';
import IMask from 'imask';
let maskCalendarMortgageData
export default {
  name: 'v-2-component-calendar',
  mixins: [numberFormatting],
  props:['time_data_loan','answers','class_calendar','blockId','array_selected_dates','min_date_holidays', 'min_date_holidays_begin','max_date','loan_term','array_block_early_repayment_period','array_block_early_repayment_main'],
  data(){
    return {
      parent:null,
      flag:0,
      index_block:null,
      calendarEarlyPeriodBegin:null,
      to_select:null,
      end_calendar_period:null,


      calendarContainerId:`calendar-begin-${this.blockId}`,
      imask:null,
      originalValue:'',
      modalIsOpen:false,
      rawValue:'',
      formattedValue:'',
      isReadonly:true,
      lastValueOnFocus:'',
      month:['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь'],

      minYear:new Date().getFullYear() - 30,
      maxYear:new Date().getFullYear() + 1,
      minMonth:1,
      maxMonth:12,

      minDate: {month:1,year:new Date().getFullYear() - 30},
      maxDate: {month:12,year:new Date().getFullYear() + 1},
      time_holiday:0,

      //Дополнительно
      activeCalendar: null,
      viewportHandler: null,
      isMobile: false
    }
  },
  methods:{
    destroyCalendar(){
      if (this.calendarEarlyPeriodBegin!==null) {
        this.calendarEarlyPeriodBegin.destroy()
        this.calendarEarlyPeriodBegin=null
      }
    },
    updateCalendar(){
      if (this.min_date_holidays_end==='1995-01-01') {
        this.destroyCalendar()
        this.initPluginCalendarPeriodBegin()
      }
      else{
        this.destroyCalendar()
        if (this.formatYearMonthSelected(this.min_date_holidays)!==undefined&&this.formatYearMonthSelected(this.min_date_holidays)[1]!==undefined&&this.formatYearMonthSelected(this.min_date_holidays)!==undefined&&this.formatYearMonthSelected(this.min_date_holidays)[0]!==undefined&&this.min_date_holidays!==undefined) {
          this.initPluginCalendarPeriodBegin(this.formatYearMonthSelected(this.min_date_holidays)[1], this.formatYearMonthSelected(this.min_date_holidays)[0])
        }
      }
    },

    initPluginCalendarPeriodBegin(month=new Date().getMonth(),year=new Date().getFullYear(),min_date_holidays_begin=this.min_date_holidays_begin,max_date=this.max_date){

      const key_word_this=this
      // let range={
      //   min:min_date_holidays_begin,
      //   max:max_date
      // }
      let range={
        min: key_word_this.formatYearMonthMinDate(key_word_this.min_date_holidays),
        max: key_word_this.formatYearMonthMaxDate(key_word_this.min_date_holidays)
      }

      const element = document.querySelector(`.${this.calendarContainerId}`)


      if (element!==null) {
      //
      //   this.parent = element.closest('.js--container-block')
      //   this.index_block=parseInt(this.parent.getAttribute('data-index'))

        this.calendarEarlyPeriodBegin = new VanillaCalendar(`.${this.calendarContainerId}`, {
          type: 'year',
          settings: {
            lang: 'ru',
            range: range,
            selected: {
              month: month,
              year:year
            },
            selection: {
            },
          },
          actions: {
            clickMonth(e, dates) {
              const click_date = dates.selectedMonth


              const foundItem = key_word_this.array_block_early_repayment_period.find(item => item.id === key_word_this.blockId)
              const min_day_holiday = foundItem ? foundItem.min_date_holidays_begin : undefined
              const min_mon = parseInt(min_day_holiday.split('-')[1],10)


              // const min_month = parseInt(key_word_this.array_block_early_repayment_period[key_word_this.blockId].min_date_holidays_begin.split('-')[1],10)
              // if (dates.length !== 0 && click_date>=min_mon || (dates.length !== 0 && min_day_holiday === '1995-01-01')) {
                const parent = e.target.closest('.js--credit-calendar-input');
                const container = e.target.closest('.js__vanilla-calendar-calc')
                const array_month = [ 'январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
                let title_month;
                let title_year;
                if (container && container.querySelector('.vanilla-calendar-year')) {
                  title_year = container.querySelector('.vanilla-calendar-year').textContent
                }
                if(parent){
                  e.target.closest('.js__vanilla-calendar-calc').classList.remove('active');
                  parent.querySelector('input').value = `${array_month[dates.selectedMonth]}, ${dates.selectedYear}`;

                  if(parent.querySelector('input').classList.contains('js-early-period-required')) {
                    parent.querySelector('input').classList.add('js-filled')
                  }
                  if (parent.closest('.js--container-block-required')
                    && parent.closest('.js--container-block-required').querySelector('.js--required-error')) {
                    parent.closest('.js--container-block-required').querySelector('.js--required-error').classList.add('display-none')
                  }
                  if (parent.closest('.js--for-clear-field')) {
                    parent.closest('.js--for-clear-field').classList.remove('input_error')
                  }
                  key_word_this.time_holiday = (parseInt(dates.selectedYear) * 12) + (parseInt(dates.selectedMonth) + 1)
                  key_word_this.receivedEearlyRepayment([dates.selectedMonth,dates.selectedYear],parseInt(key_word_this.blockId))
                  if (e.target.closest('.js--calc-row-input')) {
                    e.target.closest('.js--calc-row-input').querySelector('.js--clear-calc-tax').classList.add('active')
                  }

                  const data = parseInt(e.target.closest('.js--container-block').getAttribute('data-index'))
                }
              // }
              dates.type = 'year'
            },
            clickYear(event, self) {
              const selectedYear = self.selectedYear;
              self.type = 'month'
              self.settings.selected.year = selectedYear
            },
          }
        })
        this.calendarEarlyPeriodBegin.init();
      }

    },
    CalendarVanillaClose() {
      let count = 0;
      const handler = () => {
        const array_parent = document.querySelectorAll('.js--credit-calendar-input');
        const array_element = document.querySelectorAll('.js__vanilla-calendar-calc.active');
        for (const item of array_parent) {
          item.onclick = function (w) {
            w.stopImmediatePropagation();
          };
        }
        if (count > 0) {
          for (let i = 0; i < array_element.length; i++) {
            array_element[i].classList.remove('active');
          }
        }
        if (count < 1) {
          count += 1;
        }
      };
      document.body.addEventListener('click', handler);
    },
    changeDate(e) {
      const target = e.target;
      if(target.value.length > 0) {
        if (target.closest('.js--container-block')
          && target.closest('.js--container-block').querySelector('.js--required-error')) {
          target.closest('.js--container-block').querySelector('.js--required-error').classList.add('display-none');
        }
        if (target.closest('.js--for-clear-field')) {
          target.closest('.js--for-clear-field').classList.remove('input_error');
        }

        if (target.classList.contains('js-early-period-required')) {
          target.classList.add('js-filled');
        }
      }
      let value = target.value.replace(/[^\d.]/g, '');
      let parts = value.split('.')
      let monthPart = parts[0].substring(0,2);
      let yearPart = parts[1] ? parts[1].substring(0,4) : '';

      let newValue = monthPart;
      if (monthPart.length>=2 || (parts.length > 1 && yearPart.length > 0)) {
        newValue += '.' + yearPart
      }
      if (newValue !== target.value) {
        const cursorPos = target.selectionStart;
        target.value = newValue;
        target.setSelectionRange(cursorPos, cursorPos)
      }

      if (target.value.length === 3 && newValue[2] === '.') {
        target.setSelectionRange(3,3)
      }

      if (target.value.replace(/(_|\s)+/g, "").length===7) {
        let [monthStr, yearStr] = e.target.value.split('.')
        let month = parseInt(monthStr, 10) || 0;
        let year = parseInt(yearStr, 10) || 0;
        if (month < 1 || month >12) month = Math.min(Math.max(month, 1), 12);

        if (year < this.minDate.year) {
          year = this.minDate.year;
          month = this.minDate.month;
        } else if (year >this.maxDate.year) {
          year = this.maxDate.year;
          month = this.maxDate.month
        }
        if (year === this.minDate.year) month = Math.max(month, this.minDate.month);
        if (year === this.maxDate.year) month = Math.min(month, this.maxDate.month);
        const current = {month,year};
        if (this.dateToNumber(current) < this.dateToNumber(this.minDate)) {
          Object.assign(current,this.minDate);
        } else if (this.dateToNumber(current) > this.dateToNumber(this.maxDate)) {
          Object.assign(current,this.maxDate);
        }
        this.time_holiday = (parseInt(current.year) * 12) + parseInt(current.month)
        e.target.value = this.formatDate(current.month, current.year)

      }

      if (target.value.replace(/(_|\s)+/g, "").length===7 && target.value.replace(/(_|\s)+/g, "").substr(3, 6)<=new Date().getFullYear()) {
        const month = parseInt(target.value.replace(/(_|\s)+/g, "").substr(0, 2) -1);
        const year = target.value.replace(/(_|\s)+/g, "").substr(3, 6)

        if (this.calendarEarlyPeriodBegin!==null) {
          this.calendarEarlyPeriodBegin.destroy()
          this.calendarEarlyPeriodBegin=null
        }
        this.destroyCalendar()
        this.initPluginCalendarPeriodBegin(month,year)
        this.$emit('' +
          '', [[month,year],parseInt(this.blockId)]);
        setTimeout(()=>{
          target.closest('.js--credit-calendar-input').querySelector('.js__vanilla-calendar-calc').classList.remove('active')
        },300)

      }
    },
    formatDate(month, year){
      return `${String(month).padStart(2, '0')}.${String(year).padStart(4,'0')}`
    },
    dateToNumber(date){
      return date.year * 12 + (date.month - 1);
    },
    replaceMonthFocusNew(e){
      let element;
      if (e instanceof Event) {
        element = e.currentTarget;
      }
      else if(e instanceof HTMLElement ) {
        element = e;
      }
      const currentValue = element.value;
      const parts = currentValue.split(', ');

      if (parts.length === 2) {
        const [monthName, year] = parts;
        const monthIndex = this.month.indexOf(monthName)
        if (monthIndex !== -1 && year.length === 4) {
          element.value = `${String(monthIndex + 1).padStart(2, '0')}.${year}`;
        }
      }
    },
    formatCheckDateInputYear(inputValue) {
      const parts = inputValue.split(',');
      const yearhName = parts[1]
      return yearhName
    },
    inputKeyDown(e){
      const target = e.target;
      if (e.key === 'Backspace' && target.selectionStart === 3) {
        target.setSelectionRange(2,2)
      }
    },
    inputBlur(e){
      let target;
      if (e instanceof Event) {
        target = e.currentTarget;
      }
      else if(e instanceof HTMLElement ) {
        target = e;
      }


      let [monthStr, yearStr] = target.value.split('.')
      let month = parseInt(monthStr, 10) || 0;
      let year = parseInt(yearStr, 10) || 0;
      if (!monthStr || !yearStr || monthStr.length !==2 || yearStr.length!==4) {
        target.value = ''
        if (target.classList.contains('js-early-period-required')) {
          target.classList.remove('js-filled');
        }
        if (target.closest('.js--for-clear-field')) {
          target.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax').classList.remove('active')
        }

      } else {

        if (target.closest('.js--container-block')
          && target.closest('.js--container-block').querySelector('.js--required-error')) {
          target.closest('.js--container-block').querySelector('.js--required-error').classList.add('display-none');
        }
        if (target.closest('.js--for-clear-field')) {
          target.closest('.js--for-clear-field').classList.remove('input_error');
        }

        if (target.classList.contains('js-early-period-required')) {
          target.classList.add('js-filled');
        }

        this.$emit('sendEearlyRepaymentPeriodBegin',[[parseInt(month)-1,year],parseInt(this.blockId),'maska'])
      }
      this.replaceMonthNewEarly(target)
    },
    replaceMonthNewEarly(e) {
      let element;
      if (e instanceof Event) {
        element = e.currentTarget;
      }
      else if(e instanceof HTMLElement ) {
        element = e;
      }

      const value = element.value.trim();
      const parts=value.split('.')
      if (parts.length!==2) return;
      const monthPart = parts[0].trim()
      const yearPart = parts[1].trim()
      const monthNumber = parseInt(monthPart,10)
      if (isNaN(monthNumber) || monthNumber < 1 ||monthNumber > 12) return;
      element.value = `${this.month[monthNumber - 1]}, ${yearPart}`;
    },


    //ДОПОЛНИТЕЛЬНО
    showCalendar(el) {
      const element = el.currentTarget;
      const calendars = document.querySelectorAll('.js__vanilla-calendar-calc');

      calendars.forEach(calendar => calendar.classList.remove('active'));

      const calendar = element.closest('.js--credit-calendar-input')
        .querySelector('.js__vanilla-calendar-calc');
      calendar.classList.add('active');
      this.activeCalendar = calendar;


      // Для мобильных: добавляем обработчик клавиатуры
      if (this.isMobile) {
        this.addViewportListener();
      }
    },
    addViewportListener() {
      // Убедимся, что обработчик только один
      this.removeViewportListener();

      this.viewportHandler = () => {
        if (!this.activeCalendar) return;
        this.$nextTick(() => {
          this.scrollCalendarIntoView();
        });
      };

      // Используем visualViewport для мобильных устройств
      if (window.visualViewport) {
        window.visualViewport.addEventListener('resize', this.viewportHandler);
      }
    },
    removeViewportListener() {
      if (this.viewportHandler && window.visualViewport) {
        window.visualViewport.removeEventListener('resize', this.viewportHandler);
        this.viewportHandler = null;
      }
    },
    scrollCalendarIntoView() {
      if (!this.activeCalendar || !window.visualViewport) return;

      const calendarRect = this.activeCalendar.getBoundingClientRect();
      const viewportHeight = window.visualViewport.height;
      const calendarBottom = calendarRect.bottom - window.visualViewport.offsetTop;

      // Если календарь скрыт клавиатурой
      if (calendarBottom > viewportHeight) {
        // Вычисляем необходимую величину скролла
        const scrollOffset = calendarBottom - viewportHeight + 10;
        window.scrollBy({
          top: scrollOffset,
          behavior: 'smooth'
        });
      }
    },
    handleDocumentClick(e) {
      // Закрытие календаря при клике вне его области
      if (
        this.activeCalendar &&
        !e.target.closest('.js__vanilla-calendar-calc') &&
        !e.target.closest('.js--calendar-field')
      ) {
        this.activeCalendar.classList.remove('active');
        this.activeCalendar = null;
        this.removeViewportListener();
      }
    },

    //ВРЕМЕННО ЗАКОМЕНТИРОВАЛ
    //очищаю поля

    clearInputCalendarEarlyRepayment(e){
      const element = e.currentTarget;
      const parent = element.closest('.js--tex-deduc-input');

      if (element.closest('.js--for-clear-field')
        && element.closest('.js--for-clear-field').querySelector('.js-early-period-required')) {
        element.closest('.js--for-clear-field').querySelector('.js-early-period-required').classList.remove('js-filled')
      }

      if (parent) {
        parent.querySelector('input').value='';
        parent.querySelector('input').classList.remove('active')
        element.classList.remove('active')
      }

      if (this.min_date_holidays_begin=='1995-01-01') {
        this.resetCalendar()
      }
      else {
        this.destroyCalendar()
        this.initPluginCalendarPeriodBegin(this.formatYearMonthSelected(this.min_date_holidays_begin)[1], this.formatYearMonthSelected(this.min_date_holidays_begin)[0])
      }
      // element.closest('.js--period-calendar').querySelector('.js--clear-input-period-end').click()

      //родителю календаря сказал, что поле очищено
      this.$emit('sendClearBeginCalendar',this.blockId)
      this.time_holiday=0
    },
    //очистить все поля блока


    receivedEearlyRepayment(data,index) {

      // console.log('В календаре');
      // console.log(data);
      //тут в родитель нужно передавать даты, когда будет заполнена дата окончания периода досрочки
      // пока закомментировал
      // this.$emit('sendEearlyRepaymentPeriod',[data,parseInt(data_el)])

      //передаю в основной календарь досрочки команду, что в  календаре начала периода  изменилась дата
      this.$emit('sendEearlyRepaymentPeriodBegin', [data,index]);

    },

    formatYearMonthMinDate(dateStr) {
      if(dateStr!==null) {

        if (this.flag === 0) {
          let [year, month] = dateStr.split('-');
          month = parseInt(month) + 2
          if (month === 13) {
            month = 1
            year = parseInt(year) + 1
          }
          if (month === 14) {
            month = 2
            year = parseInt(year) + 1
          }

          month = month.toString()
          const formattedMonth = month.padStart(2, '0');
          return `${year}-${formattedMonth}`;
        } else if (this.flag === 1) {
          let [year, month] = dateStr.split('-');
          month = parseInt(month) + 1
          if (month === 13) {
            month = 1
            year = parseInt(year) + 1
          }
          if (month === 14) {
            month = 2
            year = parseInt(year) + 1
          }

          month = month.toString()
          const formattedMonth = month.padStart(2, '0');
          return `${year}-${formattedMonth}`;
        }
      }

    },
    formatYearMonthMaxDate(dateStr) {

      if(dateStr!==null) {

        if (this.loan_term !== 0) {
          let [year, month] = dateStr.split('-').map(Number);
          const date = new Date(year, month, 1);
          date.setMonth((date.getMonth()) + this.loan_term);
          const newYear = date.getFullYear()
          const newMonth = date.getMonth()
          const formattedMonth = String(newMonth + 1).padStart(2,'0')
          // console.log('Возвращение');
          // console.log(`${date.getFullYear()}-${formattedMonth}`);
          return `${newYear}-${formattedMonth}`


          // date.setMonth((date.getMonth() + 1) + this.loan_term);
          // month = (date.getMonth()).toString()
          // const formattedMonth = month.padStart(2, '0');
          // return `${date.getFullYear()}-${formattedMonth}`
        } else if (this.loan_term === 0) {
          return `${new Date().getFullYear() + 1}-12`
        }
      }


    },

    formatYearMonthSelected(dateStr) {

      if(dateStr!==null){
        if (this.flag===0) {
          let [year,month] = dateStr.split('-');
          month = parseInt(month)+1
          if (month===12){
            month=0
            year=parseInt(year)+1
          }
          month = month.toString()
          const formattedMonth = month.padStart(2, '0');
          return [`${year}`, `${formattedMonth}`];
        }
        else if (this.flag===1) {
          let [year,month] = dateStr.split('-');
          month = parseInt(month)
          if (month===12){
            month=0
            year=parseInt(year)+1
          }
          month = month.toString()
          const formattedMonth = month.padStart(2, '0');
          return [`${year}`, `${formattedMonth}`];
        }
      }


    },

    resetCalendar(){
      this.destroyCalendar()
      this.initPluginCalendarPeriodBegin(new Date().getMonth(), new Date().getFullYear())

    },

    //форматирование месяцев из 2025-0, подставляю в поле input январь, 2025
    formattedDateInput(param, flag=0){
      if (flag===0) {
        const value = param
        const parts = value.split('-');
        if (parts.length !== 2) return;

        const year =parts[0];
        const monthNumber = parseInt(parts[1], 10)

        if (isNaN(monthNumber)) return;
        if (monthNumber < 0 || monthNumber > 11) return;

        return `${this.month[monthNumber]}, ${year}`
      }
      else if (flag===1) {
        const value = param
        const parts = value.split('-');
        if (parts.length !== 2) return;

        const year =parts[0];
        const monthNumber = parseInt(parts[1], 10)

        if (isNaN(monthNumber)) return;
        if (monthNumber < 0 || monthNumber > 11) return;

        return `${this.month[monthNumber +1]}, ${year}`
      }

    },
    formatCheckDateInput(inputValue) {

      const parts = inputValue.split(',');

      if (parts.length !==2){

      }
      const monthName = parts[0].trim().toLowerCase();
      const monthNumber = this.month.indexOf(monthName) + 1

      if (monthName ===0) {
        throw new Error('некоректное название месяца')
      }
      return monthNumber

    },

    replaceMonth(e){
      const element = e.currentTarget
      const value = e.target.value.trim();
      const parts=value.split('.')
      if (parts.length!==2) return;
      const monthPart = parts[0].trim()
      const yearPart = parts[1].trim()
      const monthNumber = parseInt(monthPart,10)
      if (isNaN(monthNumber) || monthNumber < 1 ||monthNumber > 12) return;
      e.target.value = `${this.month[monthNumber - 1]}, ${yearPart}`;

      if (element.classList.contains('js-early-period-required')) {
        element.classList.add('js-filled')
      }
      if (element.closest('.js--container-block-required')
        && element.closest('.js--container-block-required').querySelector('.js--required-error')) {
        element.closest('.js--container-block-required').querySelector('.js--required-error').classList.add('display-none')
      }
      if (element.closest('.js--for-clear-field')) {
        element.closest('.js--for-clear-field').classList.remove('input_error')
      }
    },

    inputMaskEarly() {
      const key = this
      if(this.imask) this.imask.destroy()
      this.imask = IMask(this.$refs.inputBegin, {
        mask: 'MM.YYYY',
        blocks: {
          MM: {
            mask: IMask.MaskedRange,
            from: 1,
            to: 12,
            // maxLength: 2,
            autofix:true
          },
          YYYY: {
            mask: IMask.MaskedRange,
            from: this.minYear,
            to: this.maxYear,
            autofix:true
            // maxLength: 4
          }
        }
      });
      this.imask.on('accept', () => {
        this.rawValue = this.imask.value
        this.correctDate()
      })
      this.imask.on('complete', () => {
        if (this.imask.value!==this.lastValueOnFocus){



          const month = parseInt(this.imask.value.replace(/(_|\s)+/g, "").substr(0, 2) -1);
          const year = this.imask.value.replace(/(_|\s)+/g, "").substr(3, 6)
          if (this.calendarEarlyPeriodBegin!==null) {
            this.calendarEarlyPeriodBegin.destroy()
            this.calendarEarlyPeriodBegin=null
          }
          this.destroyCalendar()
          this.initPluginCalendarPeriodBegin(month,year,this.formatYearMonthSelected(this.array_block_early_repayment_period[this.blockId].min_date_holidays_begin)[0],this.formatYearMonthMinDate(this.array_block_early_repayment_period[this.blockId].min_date_holidays_begin),this.formatYearMonthMaxDate(this.array_block_early_repayment_period[this.blockId].min_date_holidays_begin))
          this.$emit('sendEearlyRepaymentPeriodBegin', [[month,year],parseInt(this.blockId)]);

          //наверное не нужно
          // this.$emit('sendDateLoanReceipt',[month,year])
          setTimeout(() => {
            this.$refs.inputBegin.closest('.js--credit-calendar-input')
              .querySelector('.js__vanilla-calendar-calc')
              .classList
              .remove('active')
          }, 400)
        }
      })
    },
    correctDate(){

      setTimeout(()=>{

        if (!this.imask.masked.isComplete) return
        let [month, year] = this.imask.value.split('.').map(Number)
        let newYear = Math.max(this.minYear, Math.min(this.maxYear, year))
        let newMonth = month;

        if (newYear ===this.minYear ) {
          newMonth = Math.max(this.minMonth, Math.min(12, newMonth))
        } else if (newYear ===this.maxYear) {
          newMonth = Math.max(1, Math.min(this.maxMonth, newMonth))
        } else {
          newMonth = Math.max(1, Math.min(12, newMonth))
        }

        if(newYear !== year || newMonth !==month) {
          const formattedDate = `${String(newMonth).padStart(2,'0')}.${String(newYear).padStart(4,'0')}`
          this.imask.value = formattedDate

          this.$nextTick(() => this.$emit('input',formattedDate))

        }
      },200)




    },
    handleInput(){

      this.$emit('input', this.imask.value)
    },
    replaceMonthNew(e) {
      const element = e.currentTarget;
      if (element.closest('.js--container-block-required')
        && element.closest('.js--container-block-required').querySelector('.js--required-error')) {
        element.closest('.js--container-block-required').querySelector('.js--required-error').classList.add('display-none')
      }
      if (element.closest('.js--for-clear-field')) {
        element.closest('.js--for-clear-field').classList.remove('input_error')
      }

      const [month,year] = this.rawValue.split('.')
      if(month && year && year.length === 4) {
        const monthNum = parseInt(month, 10);
        if (monthNum >=1 && monthNum <=12) {
          this.formattedValue = `${this.month[monthNum - 1]}, ${year}`;
          this.$refs.inputBegin.value = this.formattedValue;
        }
        if (element.classList.contains('js-early-period-required')) {
          element.classList.add('js-filled')
        }
      }
      if (this.rawValue.length!==7) {
        this.$refs.inputBegin.value = '';
        if (element.classList.contains('js-early-period-required')) {
          element.classList.remove('js-filled')
        }
        if (element.closest('.js--for-clear-field')) {
          element.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax').classList.remove('active')
        }
      }

      this.isReadonly = true;
      this.imask.destroy();
    },
    replaceMonthFocus(e){
      this.originalValue = this.imask.value


      this.lastValueOnFocus = this.imask.value
      this.isReadonly = false;
      let raw = '';
      const currentValue = this.$refs.inputBegin.value;

      const parts = currentValue.split(', ');

      if (parts.length === 2) {
        const [monthName, year] = parts;
        const monthIndex = this.month.indexOf(monthName)
        if (monthIndex !== -1 && year.length === 4) {
          raw = `${String(monthIndex + 1).padStart(2, '0')}.${year}`;
        }

      }
      this.rawValue = raw;
      // this.inputMaskEarly();
      this.$nextTick(() => {
        this.imask.value = this.rawValue;
      })
    },
    getMonthName(month) {
      return this.month[month - 1] ||'...';
    },
    formatYearMonthSelectedProps(dateStr) {

      let [year, month] = dateStr.split('-');
      month = parseInt(month) + 1
      month = month.toString()
      const formattedMonth = month.padStart(2, '0');
      // return `${year}-${formattedMonth}`;
      return [`${year}`, `${formattedMonth}`];
    },


  },
  mounted(){
    //Дополнительно
    this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    // Обработчик закрытия календаря
    document.addEventListener('click', this.handleDocumentClick);

    if (this.answers[2]!==undefined && this.answers[2]!==null) {
      for (let item of this.answers[2]) {
        const id_block = item.id
        const parent = document.querySelector('#earlyRepayment')
        if(parent){
          const element_eray = parent.querySelector(`.js--container-block-early[data-index="${id_block}"] input.js--calendar-field-begin`);
          if (element_eray){
            element_eray.value = `${this.month[item.dateEarly[0]]}, ${item.dateEarly[1]}`;

            this.time_holiday = parseInt(item.dateEarly[1]) * 12 + (parseInt(item.dateEarly[0]) + 1)
            // this.initPluginCalendarPeriodBegin(item.dateEarly[0]+1,itemcreated.dateEarly[1])
            if (element_eray.closest('.js-early-period-required')
              && element_eray.closest('.js-early-period-required').querySelector('.js--required-error')) {
              element_eray.closest('.js-early-period-required').querySelector('.js--required-error').classList.add('display-none')
            }
            if (element_eray.closest('.js--for-clear-field')) {
              element_eray.closest('.js--for-clear-field').classList.remove('input_error')
            }
            if (element_eray.closest('.js--for-clear-field') && element_eray.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax')) {
              element_eray.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax').classList.add('active')
            }
            if (element_eray.classList.contains('js-early-period-required')) {
              element_eray.classList.add('js-filled')
              element_eray.classList.add('btn-active')
              element_eray.closest('.js--acc-wr').classList.add('calendar-full')
            }
          }
        }
      }

    }

    this.parent = this.$el.closest('.js--container-block')
    const index_block =parseInt(this.$el.closest('.js--container-block').getAttribute('data-index'));
    if (this.min_date_holidays_begin=='1995-01-01') {
      this.destroyCalendar()
      this.initPluginCalendarPeriodBegin()
    }
    else{
      this.destroyCalendar()
      this.initPluginCalendarPeriodBegin(this.formatYearMonthSelected(this.min_date_holidays_begin)[1], this.formatYearMonthSelected(this.min_date_holidays_begin)[0])
    }
    this.CalendarVanillaClose()
  },
  computed:{

  },
  beforeDestroy() {
    this.destroyCalendar()
    eventBus.$off('sendDataBeginPeriodChangeField')
    eventBus.$off('sendToBeginCalendarClear')

    document.removeEventListener('click', this.handleDocumentClick);
    this.removeViewportListener();
  },

  watch:{
    time_data_loan() {
      if(this.time_holiday!==0 && this.time_data_loan>=parseInt(this.time_holiday)) {
        this.$refs.input.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax').click()
      }
      if(this.time_holiday!==0 && this.time_data_loan!==0 && this.time_holiday>parseInt(this.time_data_loan) + this.loan_term) {
        this.$refs.input.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax').click()
      }
    },


    min_date_holidays:{
      handler() {

        if (this.min_date_holidays=='1995-01-01' && this.calendarEarlyPeriodBegin!==null) {
          this.destroyCalendar()
          this.initPluginCalendarPeriodBegin(new Date().getMonth(), `${new Date().getFullYear()}-11`)
        }
        else if(this.min_date_holidays!='1995-01-01' && this.calendarEarlyPeriodBegin!==null){
          this.destroyCalendar()
          if (this.formatYearMonthSelected(this.min_date_holidays)!==undefined&&this.formatYearMonthSelected(this.min_date_holidays)[1]!==undefined&&this.formatYearMonthSelected(this.min_date_holidays)!==undefined&&this.formatYearMonthSelected(this.min_date_holidays)[0]!==undefined&&this.min_date_holidays!==undefined) {
            this.initPluginCalendarPeriodBegin(this.formatYearMonthSelected(this.min_date_holidays)[1], this.formatYearMonthSelected(this.min_date_holidays)[0])
          }

        }


        if (this.formatYearMonthMinDate(this.min_date_holidays)!==undefined) {
          let [year,month] = this.formatYearMonthMinDate(this.min_date_holidays).split('-');
          let [yearMax,monthMax] = this.formatYearMonthMaxDate(this.min_date_holidays).split('-');
          this.minDate.month = parseInt(month)
          this.minDate.year = parseInt(year)
          this.maxDate.month = parseInt(monthMax)
          this.maxDate.year = parseInt(yearMax)
        }



        setTimeout(()=>{
          if (this.min_date_holidays!=='1995-01-01') {
            this.minMonth=parseInt(this.formatYearMonthSelected(this.min_date_holidays)[1])+1
            this.maxMonth=parseInt(this.formatYearMonthMaxDate(this.min_date_holidays).split('-')[1])
            this.minYear=parseInt(this.formatYearMonthSelected(this.min_date_holidays)[0])
            this.maxYear=parseInt(this.formatYearMonthMaxDate(this.min_date_holidays).split('-')[0])
            // this.inputMaskEarly()
          }
          if (this.min_date_holidays==='1995-01-01') {
            this.minYear=new Date().getFullYear() - 30
            this.maxYear=new Date().getFullYear() + 1
            this.minMonth=1
            this.maxMonth=12
            // this.inputMaskEarly()
          }
        },300)
      },
      immediate:true
    },

    loan_term() {
      const fountId = this.array_block_early_repayment_main.find(user => user.id === this.blockId)
      if (fountId){
        // console.log('В начале this.loan_term');
        // console.log(this.loan_term);

        if (this.array_block_early_repayment_period[this.blockId]!==undefined){
          if (this.array_block_early_repayment_period[this.blockId].min_date_holidays_begin==='1995-01-01') {
            this.destroyCalendar()
            this.initPluginCalendarPeriodBegin(new Date().getMonth(), `${new Date().getFullYear()}-11` )
          }
          else{
            this.destroyCalendar()
            this.initPluginCalendarPeriodBegin(this.formatYearMonthSelected(this.array_block_early_repayment_period[this.blockId].min_date_holidays_begin)[1], this.formatYearMonthSelected(this.array_block_early_repayment_period[this.blockId].min_date_holidays_begin)[0],this.formatYearMonthMinDate(this.array_block_early_repayment_period[this.blockId].min_date_holidays_begin),this.formatYearMonthMaxDate(this.array_block_early_repayment_period[this.blockId].min_date_holidays_begin) )
          }
        }


        if(this.time_holiday!==0 && this.time_data_loan>=parseInt(this.time_holiday)) {
          this.$refs.input.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax').click()
        }
        if(this.time_holiday!==0 && this.time_data_loan!==0 && this.time_holiday>parseInt(this.time_data_loan) + this.loan_term) {
          this.$refs.input.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax').click()
        }



        if (this.time_data_loan!==0 &&this.formatYearMonthMinDate(this.min_date_holidays)!==undefined&&this.formatYearMonthMaxDate(this.min_date_holidays)){
          let [year,month] = this.formatYearMonthMinDate(this.min_date_holidays).split('-');
          let [yearMax,monthMax] = this.formatYearMonthMaxDate(this.min_date_holidays).split('-');

          this.minDate.month = parseInt(month)
          this.minDate.year = parseInt(year)

          this.maxDate.month = parseInt(monthMax)
          this.maxDate.year = parseInt(yearMax)
        } else {
          this.minDate.month = 1
          this.minDate.year = new Date().getFullYear() - 30

          this.maxDate.month = 12
          this.maxDate.year = new Date().getFullYear() + 1
        }

      }



    }
  },
  components:{

  },
  created(){
    //  Тут помещаюстя Шина событий

    eventBus.$on('emitClearCalendarAll', () => {
      if (this.min_date_holidays_begin==='1995-01-01') {
        this.resetCalendar()
      }
      else {
        this.destroyCalendar()
        this.initPluginCalendarPeriodBegin(this.formatYearMonthSelected(this.min_date_holidays_begin)[1], this.formatYearMonthSelected(this.min_date_holidays_begin)[0],this.formatYearMonthMinDate(this.min_date_holidays_begin),this.formatYearMonthMaxDate(this.min_date_holidays_begin) )

      }
    })

    //получил команду с основного календаря стереть поле
    eventBus.$on('sendToBeginCalendarClear', (data) => {
      if (data === this.blockId) {
        // console.log($thisthis.);
      }

    })

    eventBus.$on('sendDataBeginPeriodChangeField', (data) => {
      // console.log(data);
      if (data[0] === this.blockId) {
        // console.log('Что за айди от основного календаря?');
        // console.log(data[0]);
        const parent = document.querySelector('#earlyRepayment')
        if(parent){
          const element_eray = parent.querySelector(`.js--container-block-early[data-index="${data[0]}"] input.js--calendar-field-begin`);
          if (data[1]!==null) {
            // if (element_eray){
            //   element_eray.value = `${this.month[parseInt(data[1][0])]}, ${data[1][1]}`;
            //
            //   if(element_eray.classList.contains('js-early-required')) {
            //     element_eray.classList.add('js-filled')
            //   }
            //
            //   if (element_eray.closest('.js--container-block-required')
            //     && element_eray.closest('.js--container-block-required').querySelector('.js--required-error')) {
            //     element_eray.closest('.js--container-block-required').querySelector('.js--required-error').classList.add('display-none')
            //   }
            //   if (element_eray.closest('.js--for-clear-field')) {
            //     element_eray.closest('.js--for-clear-field').classList.remove('input_error')
            //   }
            //   if (element_eray.closest('.js--for-clear-field') && element_eray.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax')) {
            //     element_eray.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax').classList.add('active')
            //   }
            //   if (element_eray.classList.contains('js-early-period-required')) {
            //     element_eray.classList.add('js-filled')
            //   }
            // }
          }


          //НУЖНО ЛИ ЭТО ТУТ??????????????
          else if (data[1]===null) {
            if (element_eray){
              if (element_eray.closest('.js--for-clear-field') && element_eray.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax')) {
                element_eray.closest('.js--for-clear-field').querySelector('.js--clear-calc-tax').click()
              }
            }
          }
          this.destroyCalendar()
          this.initPluginCalendarPeriodBegin(data[1][0], data[1][1])
        }
        this.flag = data[0]
        // это скорее всего не нужно
        // this.blockId = data[1]
        this.to_select=data[1]
      }



    })


  }
};
</script>


