plugins: [
  store => {
    let oldValues = null;
    store.watch(
      state => ({
        loanAmount: state.loanAmount,
        annualInterestRate: state.annualInterestRate,
        loanTerm: state.loanTerm
      }),
      (newValues) => {
        if (!oldValues || 
            oldValues.loanAmount !== newValues.loanAmount ||
            oldValues.annualInterestRate !== newValues.annualInterestRate ||
            oldValues.loanTerm !== newValues.loanTerm) {
          store.commit('mutationTotalCalculate');
          oldValues = {...newValues};
        }
      },
      { deep: true }
    )
  }
],



Добавьте в состояние флаг isCalculating и показывайте значения только когда расчёты завершены:

state: {
  // ...
  isCalculating: false,
  // ...
}

mutationTotalCalculate(state) {
  state.isCalculating = true;
  
  // Ваши текущие расчёты
  state.shedule = calculateMortgageSheduleFirst(
    state.loanAmount,state.annualInterestRate,state.loanTerm,state.startMortage,state.array_early_repayment
  );
  // ... остальные расчёты
  
  state.isCalculating = false;
}

В компоненте:
component-tooltip(
  :tooltip="'data-monthly-payment'" 
  :infoValue="isCalculating ? null : firstPayment" 
  title-text="Ежемесячный платеж"
)

Добавьте computed свойство:
computed: {
  isCalculating() {
    return Storage.state.isCalculating;
  },
  // ...
}
