Вариант 1: Добавь setTimeout-резерв (просто и эффективно)
После основного цикла добавь повторную проверку через 1–2 секунды:

// После основного цикла
setTimeout(() => {
    for (let i = 0; i < obj.length; i += 1) {
        const item = obj[i];
        const app = document.getElementById(item.id);
        if (app && !app.__vue_initialized) {
            console.log(`[Vue] Повторная инициализация: ${item.id}`);
            item.fn();
            app.__vue_initialized = true; // защита от дублей
        }
    }
}, 1000);

function waitForVueApps() {
    obj.forEach(item => {
        const el = document.getElementById(item.id);
        if (el && !el.__vue_initialized) {
            item.fn();
            el.__vue_initialized = true;
        } else {
            const observer = new MutationObserver(() => {
                const element = document.getElementById(item.id);
                if (element && !element.__vue_initialized) {
                    observer.disconnect();
                    item.fn();
                    element.__vue_initialized = true;
                }
            });
            observer.observe(document.body, { childList: true, subtree: true });
        }
    });
}

waitForVueApps();


---------------------------

function waitForElement(id, callback) {
    const el = document.getElementById(id);
    if (el) {
        callback();
        return;
    }

    const observer = new MutationObserver(() => {
        const element = document.getElementById(id);
        if (element) {
            observer.disconnect();
            callback();
        }
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
}

// В цикле:
for (let i = 0; i < obj.length; i += 1) {
    waitForElement(obj[i].id, obj[i].fn);
}


-------------------------------------------------

идеальный гибрид
function waitForVueApp(id, initFn) {
    const el = document.getElementById(id);
    if (el && !el.__vue_initialized) {
        initFn();
        el.__vue_initialized = true;
        return;
    }

    const observer = new MutationObserver(() => {
        const element = document.getElementById(id);
        if (element && !element.__vue_initialized) {
            observer.disconnect();
            initFn();
            element.__vue_initialized = true;
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });
}

// Использование:
obj.forEach(item => {
    waitForVueApp(item.id, item.fn);
});
