/* eslint-disable */
import contentNote from '../../content-note';
import catalogNew from "../../catalog-new";
import eventBus from '../development-tools/eventBus.vue';
import bodyLockMobileFilter from '../../redesign-site/body-lock-mobile-filter';
import bodyUnlockMobileFilter from '../../redesign-site/body-unlock-mobile-filter';
import Storage from '../development-tools/state.vue';
import axios from 'axios';
let count = 0;
export default {
  props: {
  },
  data() {
    return {
      isAnimatingHolidays:false,
      //кнопка расчёт отправить
      // answerLink:{"link":"link.ru","vk":'sss.ru', "tg":'dddd.ru', "wp":"rrr.ru"}, //приходит из ajax
      // can_share:1, //приходит из ht

      flag_send_results:true,
      captcha_id:null,
      answer_code:null,

      lastSentAnswers: null, // Для хранения последних отправленных данных
      isSending: false,     // Флаг отправки запроса
      pendingLink: null,      // Ссылка, которую нужно открыть после отправки
      pendingAction: null, // 'copy' или null


    };
  },
  watch: {
  },
  updated(){



  },
  filters:{
    format_decimal:(val) => {
      if (val!==undefined && val!==null){
        return new Intl.NumberFormat("ru-RU").format(Math.abs(val.toFixed(2)));
      }

    },
  },
  created() {
  },
  methods:{
    formatMillions(value) {
      const millions = value / 1000000;

      // Округляем вверх до 2 знаков после запятой
      const rounded = Math.ceil(millions * 100) / 100;

      // Форматируем с 2 знаками после запятой, заменя точку на запятую
      let formatted = rounded.toFixed(2).replace('.', ',');

      // Убираем лишние нули после запятой, если они есть
      if (formatted.endsWith(',00')) {
        formatted = formatted.replace(',00', '');
      }

      return formatted;
    },
    formatMillionsFloor(value) {
      const millions = value / 1000000;

      // Округляем вверх до 2 знаков после запятой
      const rounded = Math.floor(millions * 100) / 100;

      // Форматируем с 2 знаками после запятой, заменя точку на запятую
      let formatted = rounded.toFixed(2).replace('.', ',');

      // Убираем лишние нули после запятой, если они есть
      if (formatted.endsWith(',00')) {
        formatted = formatted.replace(',00', '');
      }

      return formatted;
    },

    openModal(el){
      const element = el.currentTarget
      const data = element.getAttribute('data-tooltip')
      Storage.dispatch('ActionOpenModalStatus',true)
      Storage.dispatch('ActionOpenModalTooltip',data)
      this.AddClassBody()
    },
    closeTooltipMobile(el){
      const element = el.currentTarget;
      const parent = element.closest('.js--tooltip-parent')
      if (parent) {
        parent.classList.remove('tooltip-active')
        bodyUnlockMobileFilter(parent)
      }
    },
    inpFocus(el){
      const element = el.currentTarget;
      // element.classList.add('active_inp')
      element.closest('.js--tex-deduc-input').classList.add('input-focus')
    },
    numberFormattingThousandths(count,e) {
      const element = e.currentTarget;
      const target = e.target
      let position = target.selectionStart;
      const val = parseFloat(element.value.replace(/\s/g, ''))
      element.value = new Intl.NumberFormat("ru-RU").format(val);

      if (e.inputType==="deleteContentBackward"){
        target.selectionEnd = position;
      }
      if (element.value=='не число') {
        element.value=''
      }
      if (element.value.length > 0 && element.value[0] === '0'){
        element.value = '1' +  element.value.slice(1)
      }

      if (element.value.replace(/\s/g, '') > count){
        element.value=(count).toFixed(0)
          .toString().replace(/(\d)(?=(\d{3})+$)/g, '$1 ')
      }
      // if (element.value.replace(/\s/g, '') < this.stgMin){
      //   element.value=this.stgMin
      // }
      this.dataField=element.value


    },
    simplyNumber(count,e) {
      const element = e.currentTarget;
      const target = e.target
      let position = target.selectionStart;
      const val = parseFloat(element.value.replace(/\s/g, ''))
      // element.value = new Intl.NumberFormat("ru-RU").format(val);

      if (e.inputType==="deleteContentBackward"){
        target.selectionEnd = position;
      }
      if (element.value=='не число') {
        element.value=''
      }
      if (element.value.length > 0 && element.value[0] === '0'){
        element.value = '1' +  element.value.slice(1)
      }

      if (element.value.replace(/\s/g, '') > count){
        element.value=count
      }
      // if (element.value.replace(/\s/g, '') < this.stgMin){
      //   element.value=this.stgMin
      // }
      this.dataField=element.value


    },
    AddClassBody() {
      document.body.classList.add('body-modal');
      document.body.classList.add('body-additional-class');
      document.body.setAttribute('style', `top:-${window.scrollY}px;position: fixed;`);
      document.ontouchmove = (e) => {
        e.preventDefault();
      };
    },
    RemoveClassBody() {
      if (!document.body.classList.contains('body-modal-modals')) {
        document.body.classList.remove('body-modal');
        document.body.classList.remove('body-additional-class');
      }
      const scrollY = document.body.style.top;
      document.body.style.position = '';
      document.body.style.top = '';
      window.scrollTo(0, parseInt(scrollY || '0') * -1);
    },

    openModalMail(el){
      const element = el.currentTarget
      const data = element.getAttribute('data-tooltip')
      Storage.dispatch('ActionOpenModalMailStatus',true)
      this.AddClassBody()
    },
    //поделиться с мобилки
    openTooltipMobile(el){
      const element = el.currentTarget;
      const parent = element.closest('.js--tooltip-parent')
      if (parent) {
        parent.classList.add('tooltip-active')
        bodyLockMobileFilter(parent);
        if (this.can_share===1 && this.flag_send_results===true) {
          this.sendingResult('result');//для финальной отправки нужно это
          // this.sendingResultToApi(888)//это не нужно
        }
      }
    },




    //-------ОТПРАВКА-----------------------

    // Обработчик клика на ссылку (VK, TG, WP)
    async handleLinkClick(type) {
      if (this.hasAnswersChanged()) {
        this.pendingAction = { type: 'open', payload: type };
        await this.sendResults();
      } else {
        const link = this.answerLink[type];
        if (link) {
          window.open(link, '_blank');
        }
      }
    },

    // Обработчик клика на копирование
    async handleCopyClick(event) {
      const element = event.currentTarget;
      if (this.hasAnswersChanged()) {
        this.pendingAction = { type: 'copy', payload: element };
        await this.sendResults();
      } else {
        const link = this.answerLink.link;
        if (link) {
          this.copyLinkManually(link, element);
        }
      }
    },

    // Проверка, изменились ли данные
    hasAnswersChanged() {
      if (!this.lastSentAnswers) return true;
      return JSON.stringify(this.answersToSand) !== JSON.stringify(this.lastSentAnswers);
    },

    // Отправка результатов
    async sendResults() {
      if (this.isSending) return;

      this.isSending = true;

      try {
        await this.sendingResult('result');
        this.lastSentAnswers = JSON.parse(JSON.stringify(this.answersToSand));

        // После успешной отправки — выполнить отложенное действие
        if (this.pendingAction) {
          const { type, payload } = this.pendingAction;

          // Дожидаемся, пока Vuex обновит answerLink (если нужно)
          await this.$nextTick();

          if (type === 'open') {
            const link = this.answerLink[payload];
            if (link) {
              window.open(link, '_blank');
            }
          } else if (type === 'copy') {
            const link = this.answerLink.link;
            if (link) {
              this.copyLinkManually(link, payload);
            }
          }

          this.pendingAction = null;
        }
      } catch (error) {
        console.error('Ошибка при отправке результатов:', error);
      } finally {
        this.isSending = false;
      }
    },

    // Унифицированная функция копирования
    copyLinkManually(link, element) {
      try {
        if (navigator.clipboard) {
          navigator.clipboard.writeText(link).then(() => {
            const p = element.querySelector('p');
            if (p) {
              p.textContent = 'Скопировано';
              setTimeout(() => {
                p.textContent = 'Скопировать ссылку';
              }, 3000);
            }
          }).catch(err => {
            console.warn('Clipboard write failed:', err);
            this.fallbackCopy(link, element);
          });
        } else {
          this.fallbackCopy(link, element);
        }
      } catch (err) {
        this.fallbackCopy(link, element);
      }
    },

    // Резервный способ копирования
    fallbackCopy(link, element) {
      const textarea = document.createElement('textarea');
      textarea.value = link;
      textarea.style.position = 'fixed';
      textarea.style.opacity = '0';
      document.body.appendChild(textarea);
      textarea.focus();
      textarea.select();
      document.execCommand('copy');
      document.body.removeChild(textarea);

      const p = element.querySelector('p');
      if (p) {
        p.textContent = 'Скопировано';
        setTimeout(() => {
          p.textContent = 'Скопировать ссылку';
        }, 3000);
      }
    },

    copyLink(event) {
      const link = event.currentTarget.dataset.link;
      const element = event.currentTarget;

      try {
        if (navigator.clipboard) {
          navigator.clipboard.writeText(link);
          element.querySelector('p').textContent='Скопировано';
          setTimeout(() => {
            element.querySelector('p').textContent='Скопировать ссылку';
          }, 3000);
        } else {
          throw new Error('not supported');
        }
      } catch (err) {
        const textarea = document.createElement('textarea');
        textarea.value = link;
        textarea.style.position = 'fixed';
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand('copy');
        document.body.removeChild(textarea);
        console.log('Ошибка копирования:', err);
      }
    },

    // Инициализация капчи
    sendingResult(flag) {
      this.captchaInit(flag);
      const recaptchaKey = typeof conf !== 'undefined' ? conf.smartcaptcha_key : null;
      if (recaptchaKey) {
        window.smartCaptcha.execute(this.captcha_id);
      }
    },

    captchaInit(flag) {
      this.captcha_id = window.smartCaptcha.render('yandex-captcha-family-calculator', {
        sitekey: conf.smartcaptcha_key,
        invisible: true,
        callback: (token) => {
          if (flag === 'result') {
            this.sendingResultToApi(token);
          } else if (flag === 'mail') {
            this.sendingMailToApi(token);
          }
        },
      });
    },

    // Отправка данных в API
    sendingResultToApi(token) {
      const data = {
        calculatorId: this.calculatorId,
        answers: this.answersToSand,
        'smart-token': token,
      };

      return new Promise((resolve, reject) => {
        axios({
          method: 'post',
          url: '/api/local/calculator/answers/',
          headers: {
            'Content-type': 'application/json; charset=UTF-8',
            'X-Bitrix-Csrf-Token': window.BX.bitrix_sessid(),
          },
          data,
        })
          .then((res) => {
            if (res.data.code === 200 && res.data.result) {
              // Сохраняем ссылки в Vuex
               Storage.dispatch('ActionAnswerLink', res.data.result.answerLink);
            }
            if (res.data.description) {
               Storage.dispatch('ActionDescriptionAfterSand', res.data.description);
            }
            if (res.data.code) {
              this.answer_code = res.data.code;
            }
            resolve();
          })
          .catch((error) => {
            if (error.response) {
              if (error.response.data !== undefined) {
                console.log(error.response);
                Storage.dispatch('ActionDescriptionAfterSand', error.response.data.description);
              }
            }
            console.log(error);
            reject(error);
          });
      });
    },

    sendingMailToApi(token) {
      const modal_main_content = this.$refs.dataModalMail.querySelector('.js--modal-main-content');
      const modal_success_content = this.$refs.dataModalMail.querySelector('.js--modal-wr-success');
      const modal_failed_content = this.$refs.dataModalMail.querySelector('.js--modal-wr-failed');
      let data = {
        "userEmail": this.mask_mail.value,
        "smart-token": token,
        "answersId": this.answersId,
        "agree": this.check_agree_advertisement
      };

      axios({
        method: 'post',
        url: '/api/local/calculator/answers/sendmail/',
        headers: {
          "Content-type": "application/json; charset=UTF-8",
          'X-Bitrix-Csrf-Token': window.BX.bitrix_sessid(),
        },
        data: data
      })
        .then((res) => {
          if (modal_main_content) {
            modal_main_content.classList.add('unactive');
          }
          if (modal_success_content) {
            modal_success_content.classList.add('active');
          }
        })
        .catch((error) => {
          if (error.response.data !== undefined && error.response.data.description !== undefined) {
            console.log(error.response);
            this.description_after_sand_mail = error.response.data.description;
          }
          console.log(error);
          if (modal_main_content) {
            modal_main_content.classList.add('unactive');
          }
          if (modal_failed_content) {
            modal_failed_content.classList.add('active');
          }
        });
    },

    mouseOutShare(el){
      // const element = el.currentTarget;
      // this.$refs.TooltipShare.style.display='none'
    },


  },
  mounted() {
    contentNote();
    catalogNew();
  },
  computed:{
    answerLink(){
      return Storage.getters.ANSWERSLINK
    },
    can_share(){
      return Storage.getters.CANSHARE
    },
    calculatorId(){
      return Storage.getters.CALCULATORID
    },
    answersToSand(){
      return Storage.getters.ANSWERSTOSEND
    },
    answersId(){
      return Storage.getters.ANSWERSID
    },




  },
};

--------------------------------
<template lang="pug">
  .select-list__wr-search
    .select-list__search-item(
      v-if="answerLink.hasOwnProperty('link')"
      :data-link="answerLink.link!==''?answerLink.link:''"
      @click="handleCopyClick"
    )
      .select-list__search-item-icon
        svg(width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg')
          g(clip-path='url(#clip0_2191_3622)')
            circle(cx='12' cy='12' r='12' fill='#C8C8CB')
            path(fill-rule='evenodd' clip-rule='evenodd' d='M14.0455 7.5H8.95455C8.15122 7.5 7.5 8.05103 7.5 8.73077V14.2692C7.5 14.949 8.15122 15.5 8.95455 15.5H14.0455C14.8488 15.5 15.5 14.949 15.5 14.2692V8.73077C15.5 8.05103 14.8488 7.5 14.0455 7.5Z' fill='white')
            path(fill-rule='evenodd' clip-rule='evenodd' d='M16.25 9.25V14.5909C16.25 15.4626 15.3665 16.25 14.1667 16.25H9.25V16.75H14.1667C15.5442 16.75 16.75 15.8279 16.75 14.5909V9.25H16.25Z' fill='white')
          defs
            clippath#clip0_2191_3622
              rect(width='24' height='24' fill='white')
      p Скопировать ссылку
    a.select-list__search-item(
      v-if="answerLink.hasOwnProperty('vk')"
      :href="answerLink.vk!==''?answerLink.vk:''"
      @click.prevent="handleLinkClick('vk')"
    )
      .select-list__search-item-icon
        svg(width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg')
          path(d='M12 0C5.37244 0 0 5.37244 0 12C0 18.6276 5.37244 24 12 24C18.6276 24 24 18.6276 24 12C24 5.37244 18.6276 0 12 0ZM18.4492 16.5538C17.9371 16.8741 15.8561 16.9695 15.3523 16.6035C15.0759 16.4028 14.8232 16.1516 14.5833 15.9125C14.4153 15.7453 14.2248 15.6642 14.0805 15.4828C13.9627 15.3343 13.8819 15.1591 13.7579 15.0125C13.5486 14.7666 13.2265 14.5573 12.9717 14.8578C12.588 15.3099 13.0321 16.1977 12.5204 16.5354C12.3489 16.6487 12.1757 16.6815 11.9613 16.6653L11.4863 16.6869C11.2074 16.6924 10.7654 16.695 10.448 16.6378C10.0939 16.5738 9.80147 16.3804 9.4812 16.2385C8.8734 15.9689 8.29445 15.6016 7.85381 15.0928C6.65459 13.7072 5.04385 11.8016 4.41811 10.0596C4.28943 9.70165 3.94939 8.99272 4.27175 8.6857C4.71005 8.36724 6.86127 8.27756 7.19688 8.76993C7.3331 8.9701 7.41915 9.26283 7.5156 9.48977C7.6357 9.77262 7.70069 10.0391 7.88839 10.2894C8.05451 10.5114 8.17695 10.7347 8.30537 10.9781C8.44965 11.2513 8.58587 11.5133 8.76135 11.7647C8.88042 11.9358 9.19523 12.2761 9.39411 12.3013C9.87972 12.3634 9.84957 11.1834 9.81343 10.8954C9.77886 10.6178 9.77002 10.3232 9.77912 10.0417C9.78691 9.80147 9.80849 9.463 9.66629 9.26698C9.4344 8.94723 8.91785 9.18639 8.87756 8.75667C8.96282 8.63475 8.94489 8.5266 9.51447 8.33891C9.96317 8.19151 10.253 8.19619 10.5489 8.21984C11.152 8.2682 11.7915 8.10494 12.3738 8.30043C12.9302 8.48787 12.8441 9.27842 12.8254 9.75208C12.8002 10.3986 12.8272 11.0298 12.8254 11.6862C12.8246 11.9849 12.8127 12.2758 13.1771 12.2514C13.5187 12.2288 13.5536 11.9412 13.7166 11.7042C13.9432 11.3735 14.1515 11.0381 14.3823 10.7088C14.6935 10.2634 14.7876 9.763 15.0806 9.30676C15.1854 9.14376 15.2756 8.79645 15.437 8.6675C15.5592 8.5695 15.7913 8.62071 15.9393 8.62071H16.291C16.5601 8.62071 16.8346 8.61863 17.1112 8.62825C17.5094 8.64203 17.9555 8.55052 18.3504 8.60641C20.0545 8.84688 16.2086 12.4898 16.4088 13.1402C16.5471 13.5894 17.4244 14.0914 17.7411 14.4593C18.1614 14.9493 19.4555 15.9234 18.4492 16.5538Z' fill='#4C75A3')
      p ВКонтакте
    a.select-list__search-item(
      v-if="answerLink.hasOwnProperty('tg')"
      :href="answerLink.tg!==''?answerLink.tg:''"
      @click.prevent="handleLinkClick('tg')"
    )
      .select-list__search-item-icon
        svg(width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg')
          path(d='M10.0754 14.8388C10.0667 14.841 10.0581 14.8434 10.0495 14.8458L9.56922 13.3746C9.53731 13.2768 9.50571 13.1789 9.47411 13.081C9.38664 12.8102 9.29924 12.5395 9.20562 12.2706C9.16842 12.1633 9.18666 12.1112 9.28434 12.0498C10.4428 11.3221 11.6002 10.5925 12.7575 9.86293C13.3269 9.50398 13.8964 9.14502 14.4659 8.78627C14.5471 8.73515 14.6332 8.68235 14.7242 8.65883C14.7698 8.64702 14.821 8.65708 14.8723 8.66716C14.8961 8.67182 14.9198 8.67649 14.9431 8.67899C14.9326 8.69801 14.9235 8.71841 14.9144 8.7388C14.8945 8.78323 14.8746 8.82761 14.8415 8.85755C14.1612 9.47593 13.4784 10.0916 12.7955 10.7073C12.6958 10.7973 12.596 10.8873 12.4963 10.9772C12.3155 11.1402 12.1348 11.3033 11.9541 11.4664C11.4281 11.9411 10.9021 12.4159 10.3737 12.8884C10.2842 12.9685 10.2434 13.053 10.2338 13.172C10.2009 13.5811 10.1625 13.9895 10.1242 14.3978C10.1124 14.523 10.1007 14.6481 10.0891 14.7733C10.0877 14.7884 10.084 14.8034 10.0802 14.8185C10.0785 14.8252 10.0769 14.832 10.0754 14.8388Z' fill='#139BD0')
          path(fill-rule='evenodd' clip-rule='evenodd' d='M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM11.3802 14.5181C11.5125 14.3896 11.6451 14.2607 11.7782 14.1311C11.794 14.1422 11.8093 14.1528 11.8241 14.163C11.8487 14.1801 11.8722 14.1963 11.8951 14.2129C12.1388 14.393 12.3826 14.5732 12.6264 14.7534C13.1522 15.1421 13.6781 15.5308 14.2043 15.9186C14.6642 16.2577 15.0566 16.1118 15.1756 15.5531C15.6767 13.1999 16.1757 10.846 16.6742 8.49227C16.6889 8.4226 16.7045 8.35298 16.7201 8.28334C16.7712 8.05503 16.8223 7.8265 16.8446 7.59515C16.8899 7.12307 16.5544 6.88547 16.1179 7.05419C15.0482 7.46712 13.9787 7.87989 12.9092 8.29265C11.683 8.76585 10.4569 9.23904 9.23082 9.71243C9.03575 9.78763 8.84061 9.86269 8.64547 9.93775C7.93572 10.2107 7.22591 10.4838 6.51906 10.7639C6.36402 10.8253 6.21474 10.9218 6.08969 11.0324C5.95434 11.1524 5.97642 11.3192 6.12738 11.4215C6.22506 11.488 6.33906 11.535 6.4521 11.571C7.18674 11.8045 7.92257 12.0349 8.65985 12.26C8.75537 12.2896 8.80002 12.3354 8.83026 12.4297C9.01035 12.9922 9.19254 13.5536 9.37473 14.115C9.50743 14.5239 9.64013 14.9328 9.77202 15.3421C9.81498 15.4748 9.89322 15.5363 10.0331 15.5437C10.2381 15.5545 10.3987 15.4768 10.5415 15.3361C10.8193 15.063 11.0989 14.7914 11.3802 14.5181Z' fill='#139BD0')
      p Telegram

    a.select-list__search-item(
      v-if="answerLink.hasOwnProperty('wp')"
      :href="answerLink.wp!==''?answerLink.wp:''"
      @click.prevent="handleLinkClick('wp')"
    )
      .select-list__search-item-icon
        img(src="/dist/img/WhatsApp.svg")
      p WhatsApp
    .select-list__search-item(@click="openModalMail")
      .select-list__search-item-icon
        svg(width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg')
          rect(width='24' height='24' rx='12' fill='#82BF00')
          path(fill-rule='evenodd' clip-rule='evenodd' d='M6.5 9.5C6.5 8.94772 6.94772 8.5 7.5 8.5H16.5C17.0523 8.5 17.5 8.94772 17.5 9.5V12.25C17.5 12.5261 17.2761 12.75 17 12.75C16.7239 12.75 16.5 12.5261 16.5 12.25V10.0403L12.937 12.8907C12.3892 13.3289 11.6108 13.3289 11.063 12.8907L7.5 10.0403V15H12C12.2761 15 12.5 15.2239 12.5 15.5C12.5 15.7761 12.2761 16 12 16H7.5C6.94772 16 6.5 15.5523 6.5 15V9.5ZM8.42539 9.5L11.6877 12.1098C11.8703 12.2559 12.1297 12.2559 12.3123 12.1098L15.5746 9.5H8.42539ZM15.3535 13.0251C15.5488 12.8299 15.8653 12.8299 16.0606 13.0251L17.5104 14.4749C17.7056 14.6701 17.7056 14.9867 17.5104 15.182L16.0606 16.6317C15.8653 16.827 15.5488 16.827 15.3535 16.6317C15.1582 16.4365 15.1582 16.1199 15.3535 15.9246L15.9497 15.3284H13.4999C13.2238 15.3284 12.9999 15.1046 12.9999 14.8284C12.9999 14.5523 13.2238 14.3284 13.4999 14.3284H15.9497L15.3535 13.7322C15.1582 13.537 15.1582 13.2204 15.3535 13.0251Z' fill='white')
      p Отправить на e-mail


</template>
<script>
import Vue from 'vue';
import eventBus from '../development-tools/eventBus.vue';
import Storage from '../development-tools/state.vue';
import numberFormatting from '../mixin/numberFormatting.js';

export default {
  name: 'v-component-payment-list',
  mixins: [numberFormatting],
  props:[],
  data(){
    return {

    }
  },
  methods:{
    generalFunctionClick(event) {
      this.copyLink(event);
      this.handleLinkClick('link', event);
    },


  },
  mounted(){


  },
  filters:{
  },
  computed:{
    answerLink(){
      return Storage.getters.ANSWERSLINK
    },

  },
  watch:{
  },
  created(){

  },
  components:{}
};
</script>
<style scoped>
</style>
----------------------------------------------

<script>
import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex);

let obj_month =["январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь","январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь"]
function calculateAnnuity(P, r ,n){
  if (r ===  0) return P /n;
  return (P * r) / (1 - Math.pow(1 + r, -n));
}

function calculateMortgageSheduleFirst(
  loanAmount,
  annualInterestRate,
  initialTermMonths,
  startDate,
  prepayments = []
) {

  // Добавляем проверки входных параметров
  if (!loanAmount || loanAmount <= 0 ||
    !annualInterestRate || annualInterestRate < 0 ||
    !initialTermMonths || initialTermMonths <= 0 ||
    !startDate) {
    return [];
  }


  const montlyRate = annualInterestRate /12 /100;
  let currentBalance = loanAmount;
  let currentPayment = calculateAnnuity(loanAmount, montlyRate, initialTermMonths);
  let remainingTerm = initialTermMonths;
  const shedule = [];

  const startDateNew = startDate.replace(/-(\d)$/, '-0$1')
  const [year,month] = startDateNew.split('-').map(Number)
  const currentDate = new Date(year, month - 1)
  currentDate.setMonth(currentDate.getMonth() +1);


  // const currentDate = new Date(startDate);
  // currentDate.setMonth(currentDate.getMonth() +1);

  while (currentBalance > 0 && remainingTerm > 0) {
    const currentMonth = currentDate.getMonth() + 1;
    const currentYear = currentDate.getFullYear();
    const interest = currentBalance * montlyRate;
    let principal = currentPayment - interest;
    let totalPayment = principal + interest;
    if (principal > currentBalance) {
      principal = currentBalance;
      totalPayment = principal + interest
    }
    const remainingBeforePrepayments = currentBalance - principal;
    const sheduleEntry = {
      month: currentMonth,
      year: currentYear,
      nameMonth:obj_month[currentMonth - 1],
      payment: totalPayment,
      principal: principal,
      interest: interest,
      remainingBalance: remainingBeforePrepayments,
      prepayments: []
    };
    currentBalance = remainingBeforePrepayments;
    shedule.push(sheduleEntry)
    currentDate.setMonth(currentDate.getMonth() + 1);
    remainingTerm--
  }
  return shedule
}
function payAllInterest(shedule) {
  return shedule.reduce((sum, item) => sum + item.interest,0)
}

export default new Vuex.Store({
  state:{
    //новое
    transfer_parametr:null, //параметры, которые приходят из атрибутов html
    transfer_tooltip:null, //все тултипы
    calculating_initial_payment_cost:true, //если true то первоначальный взнос может меняться, когда меняется стоимость, если false то при изменении стоимости первоначальный взнос меняться не будет
    initial_payment_from_cost:0, //первоначальный взнос рассчитанный от стоимости недвижимости умноженное на 0,2
    cost_property:0, //стоимость недвижимости
    initial_payment:0, //первоначальный взнос непосредственно когда меняется соответствующее поле
    loanAmount:0, //первоначальная сумма кредита (стоимость недвижимости - первоначальный взнос)
    recalculation_initial_payment:false, //От флага зависит делать перерасчёт первоначального взноса или нет
    annualInterestRate:0.1, //процентная ставка ипотеки
    loanTerm:0, //срок кредита
    modal_tooltip_attribute_data:null, //значение дата модалки, коорую открываем, чтобы определить, какой контент подставлять
    modal_tooltip_status:false, //true - модалка с тултипами открывается, false - модалка закрывается
    modal_mail_send_status:false, //true - модалка с отправкой почты открывается, false - модалка закрывается
    dateLoanReceipt:[], //дата начала кредита = равно текущая дата в виде массива [7,2025]

    startMonth:null, //месяц взятия кредита
    startYear:0,//год взятия кредита
    startMortage:'',
    startMortageDiff:'',
    min_date_mobile:`${new Date().getFullYear() - 30}-01-01`, //для календаря дата оформления кредита, коорый находится в графике платежей в мобилке
    shedule:[], // график платежей, который будет формироваться без досрочек и ипотечных каникул
    amount_taxes_paid:0, // сумма уплаченных налогов
    debt_interest:0, // основной долг + проценты
    tax_deduction_property:0, //имущественный вычет
    tax_deduction_interest:0, //вычет по процентам
    total_tax_deduction:0, // налоговый вычет имущественный вычет + вычет по процентам
    required_income:0, //необходимый налог

    answers:null, //если расчётами делятся другие пользователи
    answers_to_send: {}, //то, что собираю для поделиться
    answers_link:{},//ссылки на соцсети и страницу, когда ей делятся
    can_share:0,//можно ли делиться
    calculator_id:0,//калькулятор Id
    answers_id:null,//вопрос Id
    description_after_sand:null,//описание после отправки



  },
  getters:{
    //новое
    TRANSFERPARAMETR(state){
      return state.transfer_parametr
    },
    TRANSFERTOOLTIP(state){
      return state.transfer_tooltip
    },

    INITIALPAYMENTFROMCOST(state){
      return state.initial_payment_from_cost
    },

    INITIALPAYMENT(state){
      return state.initial_payment
    },

    CALCULATINGINITIALPAYMENTCOST(state){
      return state.calculating_initial_payment_cost
    },
    RECALCULATIONINITIALPAYMENT(state){
      return state.recalculation_initial_payment
    },
    TIMECREDIT(state){
      return state.loanTerm
    },
    MODALTOOLTIPATTRIBUTEDATA(state){
      return state.modal_tooltip_attribute_data
    },
    MODALTOOLTIPSTATUS(state){
      return state.modal_tooltip_status
    },
    MODALMAILSENDSTATUS(state){
      return state.modal_mail_send_status
    },


    LOANAMOUNT(state){
      return state.loanAmount
    },
    ANNUALINTERESTRATE(state){
      return state.annualInterestRate
    },

    SHEDULE(state){
      return state.shedule
    },
    DEBTINTEREST(state){
      return state.debt_interest
    },
    TOTALTAXDEDUCTION(state){
      return state.total_tax_deduction
    },
    REQUIREDINCOME(state){
      return state.required_income
    },
    MINDATEMOBILE(state){
      return state.min_date_mobile
    },
    ANSWERS(state){
      return state.answers
    },
    ANSWERSTOSEND(state){
      return state.answers_to_send
    },
    ANSWERSLINK(state){
      return state.answers_link
    },
    CANSHARE(state){
      return state.can_share
    },
    CALCULATORID(state){
      return state.calculator_id
    },
    ANSWERSID(state){
      return state.answers_id
    },
    DESCRIPTIONAFTERSAND(state){
      return state.description_after_sand
    },
    COSTPROPERTY(state){
      return state.cost_property
    },
















  },

  mutations:{
    //новое

    mutationTransferParametr(state,received_perem){
      state.transfer_parametr = received_perem
    },

    mutationTransferTooltip(state,received_perem){
      state.transfer_tooltip = received_perem
    },



    mutationCostPropertyForInitialPayment(state,received_perem){
      state.initial_payment_from_cost = (received_perem * (state.transfer_parametr.initial_payment_perc / 100)).toFixed(0)
    },

    mutationCostProperty(state, received_perem) {
      state.cost_property = received_perem;

      // Проверяем, нужно ли пересчитывать первоначальный взнос
      const shouldRecalculate = parseInt(state.initial_payment) < parseInt(state.initial_payment_from_cost) ||
        parseInt(state.initial_payment) >= parseInt(state.cost_property);

      state.recalculation_initial_payment = shouldRecalculate;

      // Если пересчёт не нужен, обновляем loanAmount
      if (!shouldRecalculate) {
        setTimeout(()=>{
          state.loanAmount = parseInt(state.cost_property) - parseInt(state.initial_payment);
        },500)

      }
    },
    mutationInitialPayment(state,received_perem){
      state.initial_payment = received_perem
      if (parseInt(state.initial_payment) < parseInt(state.initial_payment_from_cost)  || parseInt(state.initial_payment)>=parseInt(state.cost_property)) {
        state.recalculation_initial_payment = true
      }
      else {
        state.recalculation_initial_payment = false
      }
      setTimeout(()=>{
        state.loanAmount = parseInt(state.cost_property) - parseInt(state.initial_payment) // рассчитал сумму кредита
      },500)

    },

    mutationInitialPaymentIsChanged(state,received_perem){
      state.calculating_initial_payment_cost = received_perem
    },

    mutationInterestRate(state,received_perem){
      state.annualInterestRate = received_perem
    },
    mutationTimeCredit(state,received_perem){
      state.loanTerm = received_perem
    },
    mutationOpenModalStatus(state,received_perem){
      state.modal_tooltip_status = received_perem
    },
    mutationOpenModalMailStatus(state,received_perem){
      state.modal_mail_send_status = received_perem
    },

    mutationOpenModalTooltip(state,received_perem){
      state.modal_tooltip_attribute_data = received_perem
    },
    mutationDateBeginCredit(state,received_perem){
      state.dateLoanReceipt = received_perem
      state.startMonth=received_perem[0] + 1
      state.startYear=parseInt(received_perem[1])
      state.startMortage = `${received_perem[1]}-${received_perem[0]+1}`
      state.startMortageDiff = {month:state.startMonth +1, year:state.startYear}
      state.min_date_mobile = `${received_perem[1]}-${received_perem[0]}`
    },
    mutationAnswers(state,received_perem){
      state.answers = received_perem
    },
    mutationAnswerLink(state,received_perem){
      state.answers_link = received_perem
    },
    mutationCanShare(state,received_perem){
      state.can_share = received_perem
    },
    mutationCalculatorId(state,received_perem){
      state.calculator_id = received_perem
    },
    mutationAnswersId(state,received_perem){
      state.answers_id = received_perem
    },
    mutationDescriptionAfterSand(state,received_perem){
      state.description_after_sand = received_perem
    },







    //итоговые расчёты
    // mutationTotalCalculate(state){
    //   state.shedule = calculateMortgageSheduleFirst(
    //     state.loanAmount,state.annualInterestRate,state.loanTerm,state.startMortage,state.array_early_repayment
    //   )
    //   //сумма уплаченных налогов
    //   state.amount_taxes_paid = payAllInterest(state.shedule)
    //   //считаю основной долг + проценты уплаченные
    //   state.debt_interest = state.amount_taxes_paid + state.loanAmount
    //
    //   //считаю налоговый вычет
    //   state.tax_deduction_property = state.loanAmount * 0.13
    //   if (state.tax_deduction_property > state.transfer_parametr.max_tax_deduction_property) {
    //     state.tax_deduction_property = state.transfer_parametr.max_tax_deduction_property
    //   }
    //
    //   state.tax_deduction_interest = state.amount_taxes_paid * 0.13
    //   if (state.tax_deduction_interest > state.transfer_parametr.max_tax_deduction_interest) {
    //     state.tax_deduction_interest =  state.transfer_parametr.max_tax_deduction_interest
    //   }
    //
    //   state.total_tax_deduction = state.tax_deduction_property + state.tax_deduction_interest
    //
    //   //считаю необходимый доход
    //   state.required_income = state.shedule[0].payment / 0.5
    //
    // }


    mutationTotalCalculate(state) {
      // Проверяем, что все необходимые параметры валидны
      if (!state.loanAmount || !state.annualInterestRate || !state.loanTerm || !state.startMortage) {
        return;
      }
      // Проверяем, что loanAmount положительный
      if (state.loanAmount <= 0) {
        return;
      }
      // Проверяем, что срок кредита положительный
      if (state.loanTerm <= 0) {
        return;
      }

      state.shedule = calculateMortgageSheduleFirst(
        state.loanAmount,
        state.annualInterestRate,
        state.loanTerm,
        state.startMortage,
        state.array_early_repayment
      );

      // Проверяем, что график платежей не пустой
      if (!state.shedule.length) {
        return;
      }

      //сумма уплаченных налогов
      state.amount_taxes_paid = payAllInterest(state.shedule);
      //считаю основной долг + проценты уплаченные
      state.debt_interest = state.amount_taxes_paid + state.loanAmount;

      //считаю налоговый вычет
      state.tax_deduction_property = state.loanAmount * 0.13;
      if (state.tax_deduction_property > state.transfer_parametr.max_tax_deduction_property) {
        state.tax_deduction_property = state.transfer_parametr.max_tax_deduction_property;
      }

      state.tax_deduction_interest = state.amount_taxes_paid * 0.13;
      if (state.tax_deduction_interest > state.transfer_parametr.max_tax_deduction_interest) {
        state.tax_deduction_interest = state.transfer_parametr.max_tax_deduction_interest;
      }

      state.total_tax_deduction = state.tax_deduction_property + state.tax_deduction_interest;

      //считаю необходимый доход
      state.required_income = state.shedule[0].payment / 0.5;
    },
    mutationCollectAnswer(state) {
      Vue.set(state.answers_to_send,'loanAmount',state.cost_property)
      Vue.set(state.answers_to_send,'initialPayment',state.initial_payment)
      Vue.set(state.answers_to_send,'bet',state.annualInterestRate)
      Vue.set(state.answers_to_send,'loanTerm',state.loanTerm)
    }


  },
  actions:{
    //новое

    //для расчёта первоначального взноса, когда меняется стоимость недвижимости - это первый мутатион, второй - это приходит стоимость недвижимости
    ActionTransferParametr({commit,state,dispatch},param){
      commit('mutationTransferParametr',param)
    },
    //получаю все тултипы
    ActionTransferTooltip({commit,state,dispatch},param){
      commit('mutationTransferTooltip',param)
    },



    //для расчёта первоначального взноса, когда меняется стоимость недвижимости - это первый мутатион, второй - это приходит стоимость недвижимости
    ActionCostProperty({commit,state,dispatch},param){
      commit('mutationCostPropertyForInitialPayment',param)
      commit('mutationCostProperty',param)
    },

    //меняется первоначальный взнос непосредственно в поле
    ActionInitialPayment({commit,state,dispatch},param){
      commit('mutationInitialPayment',param)
    },

    //когда первоначальный взнос меняется пользователем и calculating_initial_payment_cost ставлю флаг false, чтобы он не менялся когда меняется стоимость жилья
    ActionInitialPaymentIsChanged({commit,state,dispatch},param){
      commit('mutationInitialPaymentIsChanged',param)
    },

    //процентная ставка
    ActionInterestRate({commit,state,dispatch},param){
      commit('mutationInterestRate',param)
    },

    //срок кредита в месяцах
    ActionTimeCredit({commit,state,dispatch},param){
      commit('mutationTimeCredit',param)
    },

    //открыть или закрыть модалку с тултипами(true или false)
    ActionOpenModalStatus({commit,state,dispatch},param){
      commit('mutationOpenModalStatus',param)
    },
    //открыть или закрыть модалку с отправкой почты(true или false)
    ActionOpenModalMailStatus({commit,state,dispatch},param){
      commit('mutationOpenModalMailStatus',param)
    },

    //открытие модального онка для тултипов, где много текста
    ActionOpenModalTooltip({commit,state,dispatch},param){
      commit('mutationOpenModalTooltip',param)
    },
    //открытие модального онка для тултипов, где много текста
    ActionDateBeginCredit({commit,state,dispatch},param){
      commit('mutationDateBeginCredit',param)
    },
    //когда расчётами делятся другие пользователи
    ActionAnswers({commit,state,dispatch},param){
      commit('mutationAnswers',param)
    },
    //ссылки на соцсети и страницу, когда ей делятся
    ActionAnswerLink({commit,state,dispatch},param){
      commit('mutationAnswerLink',param)
    },
    //можно ли делиться
    ActionCanShare({commit,state,dispatch},param){
      commit('mutationCanShare',param)
    },
    //калькулятор Id
    ActionCalculatorId({commit,state,dispatch},param){
      commit('mutationCalculatorId',param)
    },
    //калькулятор Id
    ActionAnswersId({commit,state,dispatch},param){
      commit('mutationAnswersId',param)
    },
    //описание после отправки
    ActionDescriptionAfterSand({commit,state,dispatch},param){
      commit('mutationDescriptionAfterSand',param)
    },








  },
  // plugins: [
  //   store => {
  //     store.watch(
  //       state => [state.loanAmount, state.annualInterestRate, state.loanTerm],
  //       ([loanAmount, annualInterestRate, loanTerm]) => {
  //         // Вызываем расчет только если все параметры валидны
  //         if (loanAmount > 0 && annualInterestRate >= 0 && loanTerm > 0) {
  //           store.commit('mutationTotalCalculate');
  //           store.commit('mutationCollectAnswer');
  //         }
  //       },
  //       {deep: true,immediate:false}
  //     )
  //   }
  // ],

  plugins: [
    store => {
      // Отслеживаем изменения конкретных параметров и обновляем соответствующие поля
      store.watch(
        state => state.cost_property,
        (newValue) => {
          Vue.set(store.state.answers_to_send, 'loanAmount', newValue);
        },
        { deep: true }
      );

      store.watch(
        state => state.initial_payment,
        (newValue) => {
          Vue.set(store.state.answers_to_send, 'initialPayment', newValue);
        },
        { deep: true }
      );

      store.watch(
        state => state.annualInterestRate,
        (newValue) => {
          Vue.set(store.state.answers_to_send, 'bet', newValue);
        },
        { deep: true }
      );

      store.watch(
        state => state.loanTerm,
        (newValue) => {
          Vue.set(store.state.answers_to_send, 'loanTerm', newValue);
        },
        { deep: true }
      );

      // Также сохраняем общий watch для пересчета графика платежей
      store.watch(
        state => [state.loanAmount, state.annualInterestRate, state.loanTerm],
        ([loanAmount, annualInterestRate, loanTerm]) => {
          if (loanAmount > 0 && annualInterestRate >= 0 && loanTerm > 0) {
            store.commit('mutationTotalCalculate');
          }
        },
        { deep: true, immediate: false }
      );
    }
  ],




})
</script>


