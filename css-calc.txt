async handleCopyClick(event) {
  const link = event.currentTarget.dataset.link;

  // Проверяем, изменились ли данные с последней отправки
  if (this.hasAnswersChanged()) {
    this.pendingLink = link;
    this.pendingAction = 'copy'; // Добавляем флаг для копирования
    await this.sendResults();
  } else {
    // Если данные не изменились, просто копируем ссылку
    this.copyLink(event);
  }
},

async sendResults() {
  if (this.isSending) return;

  this.isSending = true;

  try {
    await this.sendingResult('result');
    this.lastSentAnswers = JSON.parse(JSON.stringify(this.answersToSand));

    // Если есть ссылка, которую нужно открыть после отправки
    if (this.pendingLink) {
      if (this.pendingAction === 'copy') {
        // Создаем искусственное событие для копирования
        const fakeEvent = {
          currentTarget: {
            dataset: { link: this.pendingLink },
            querySelector: () => ({ textContent: '' })
          }
        };
        this.copyLink(fakeEvent);
      } else {
        window.open(this.pendingLink, '_blank');
      }
      this.pendingLink = null;
      this.pendingAction = null;
    }
  } catch (error) {
    console.error('Ошибка при отправке результатов:', error);
  } finally {
    this.isSending = false;
  }
},

data() {
  return {
    // ...
    pendingAction: null, // 'copy' или null
    // ...
  }
}
