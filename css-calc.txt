receivedDateMobile([year, month]) {
  const dateString = `${year}-${month}`;
  this.$nextTick(() => {
    setTimeout(() => {
      const element = this.$refs.mobileShedule.querySelector(`[data-date="${dateString}"]`);
      if (element) {
        // Альтернатива scrollIntoView с более плавным скроллом
        this.smoothScrollToElement(element);
      }
    }, 50); // Небольшая задержка для гарантии рендера
  });
},

// Метод для плавного скролла
smoothScrollToElement(element) {
  const container = this.$refs.mobileShedule;
  const elementRect = element.getBoundingClientRect();
  const containerRect = container.getBoundingClientRect();
  
  const scrollTop = elementRect.top - containerRect.top + container.scrollTop;
  
  // Используем requestAnimationFrame для плавности
  const start = container.scrollTop;
  const change = scrollTop - start;
  const startTime = performance.now();
  const duration = 500; // Длительность анимации в мс
  
  function animateScroll(currentTime) {
    const elapsed = currentTime - startTime;
    const progress = Math.min(elapsed / duration, 1);
    const easeInOutQuad = progress < 0.5 
      ? 2 * progress * progress 
      : 1 - Math.pow(-2 * progress + 2, 2) / 2;
    
    container.scrollTop = start + change * easeInOutQuad;
    
    if (progress < 1) {
      requestAnimationFrame(animateScroll);
    }
  }
  
  requestAnimationFrame(animateScroll);
}
