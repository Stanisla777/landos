const positionTooltip = (element) => {
  const noteText = element.querySelector('.content-note__text');
  const computed = getComputedStyle(noteText);

  // === 🔍 Проверяем: если transform, left, top, right, bottom уже заданы — не позиционируем ===
  const hasTransform = computed.transform && computed.transform !== 'none';
  const hasLeft = computed.left !== 'auto';
  const hasRight = computed.right !== 'auto';
  const hasTop = computed.top !== 'auto';
  const hasBottom = computed.bottom !== 'auto';

  // Если хотя бы одно из позиционирующих свойств задано — не трогаем
  if (hasTransform || hasLeft || hasRight || hasTop || hasBottom) {
    // console.log('Позиционирование пропущено: уже задано в CSS/стилях');
    return; // ❌ Не пересчитываем
  }

  // === ✅ Если дошли сюда — позиционируем как обычно ===
  const rect = element.getBoundingClientRect();
  const parent = element.parentElement;
  const parentPos = parent.getBoundingClientRect();
  const relativePosLeftElement = rect.left - parentPos.left;
  const windowWidth = window.innerWidth;
  const windowHeight = window.innerHeight;
  const parentWidth = parent.offsetWidth;
  const leftOffset = rect.left + rect.width / 2;
  const topOffset = rect.top + rect.height / 2;

  // Сбросим transform для измерения (на всякий случай)
  const originalTransform = noteText.style.transform;
  noteText.style.transform = 'none';
  const tooltipWidth = noteText.offsetWidth;
  noteText.style.transform = originalTransform;

  // Очистим старые стили
  noteText.style.left = '';
  noteText.style.right = '';
  noteText.style.top = '';
  noteText.style.bottom = '';
  noteText.style.inset = '';
  noteText.style.transform = '';

  // === Горизонтальное позиционирование ===
  if (element.closest('.js--courses-accord-content') || element.closest('.js--element-overflow')) {
    if (windowWidth >= 600) {
      if (parentWidth / 2 < relativePosLeftElement) {
        noteText.style.left = 'auto';
        noteText.style.right = '-.25rem';
      } else {
        noteText.style.left = '.25rem';
        noteText.style.right = 'auto';
      }
    } else {
      noteText.style.inset = 'unset';
      noteText.style.transform = `translateX(${-((rect.left - tooltipWidth / 2 + 7) - (windowWidth / 2 - tooltipWidth / 2))}px)`;
    }
  } else {
    if (windowWidth >= 600) {
      if (windowWidth / 2 < leftOffset) {
        noteText.style.left = 'auto';
        noteText.style.right = '-.25rem';
      } else {
        noteText.style.left = '.25rem';
        noteText.style.right = 'auto';
      }
    } else {
      noteText.style.inset = 'unset';
      noteText.style.transform = `translateX(${-((rect.left - tooltipWidth / 2 + 7) - (windowWidth / 2 - tooltipWidth / 2))}px)`;
    }
  }

  // === Вертикальное позиционирование ===
  if (element.closest('.js--courses-accord-content') || element.closest('.js--element-overflow')) {
    const notesParentBounding = element.closest('.js--courses-accord-content')?.getBoundingClientRect();
    if (notesParentBounding) {
      const locationDifference = rect.top - notesParentBounding.top;
      const heightTooltip = noteText.offsetHeight;
      if (heightTooltip >= locationDifference) {
        noteText.style.top = 'calc(100% + .25rem)';
        noteText.style.bottom = 'auto';
      } else if (heightTooltip < locationDifference && windowHeight / 2 < topOffset) {
        noteText.style.top = 'auto';
        noteText.style.bottom = 'calc(100% + .25rem)';
      } else {
        noteText.style.top = 'calc(100% + .25rem)';
        noteText.style.bottom = 'auto';
      }
    }
  } else {
    if (windowHeight / 2 > topOffset) {
      noteText.style.top = 'calc(100% + .25rem)';
      noteText.style.bottom = 'auto';
    } else {
      noteText.style.top = 'auto';
      noteText.style.bottom = 'calc(100% + .25rem)';
    }
  }
};
