receivedDateMobile([year, month]) {
  const dateString = `${year}-${month}`;
  this.$nextTick(() => {
    const element = this.$refs.mobileShedule.querySelector(`[data-date="${dateString}"]`);
    const container = this.$refs.mobileShedule; // ваш контейнер с max-height и overflow

    if (element && container) {
      setTimeout(() => {
        // Сначала пытаемся проскроллить внутри контейнера
        element.scrollIntoView({
          behavior: 'smooth',
          block: 'start', // элемент вверху контейнера
          inline: 'nearest'
        });

        // Через небольшой интервал проверим, виден ли элемент
        // Это нужно, потому что scrollIntoView может не сработать, если контейнер не прокручивается
        setTimeout(() => {
          const elementRect = element.getBoundingClientRect();
          const containerRect = container.getBoundingClientRect();

          // Проверяем, находится ли элемент полностью в пределах контейнера
          const isElementVisibleInContainer =
            elementRect.top >= containerRect.top &&
            elementRect.bottom <= containerRect.bottom;

          if (!isElementVisibleInContainer) {
            // Если элемент не виден в контейнере (например, скролл контейнера закончился),
            // тогда скроллим всю страницу так, чтобы **верх контейнера** был вверху экрана
            container.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }, 100); // Даем время на анимацию scrollIntoView
      }, 20);
    }
  });
}
