.schedule-block
  .calendar-column
    .calendar-header
      button(@click="prevMonth" :disabled="!canGoPrev") ‚Üê
      h3 {{ currentMonthName }} {{ currentYear }}
      button(@click="nextMonth" :disabled="!canGoNext") ‚Üí
    .calendar-grid
      .day-header(v-for="day in weekdays" :key="day") {{ day }}
      .calendar-day(
        v-for="day in daysInMonth"
        :key="day.date || day.number"
        :class="{
          'disabled': !day.hasEvents,
          'selected': isSelected(day.date)
        }"
        @click="selectDay(day)"
      )
        .day-number {{ day.number }}
        .event-icons(v-if="day.hasEvents")
          span.event-icon(
            v-for="eventType in getEventTypesForDay(day)"
            :key="eventType"
            :class="'icon-type-' + eventType"
            :title="getEventTitleByType(eventType)"
          )
            // –°—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∏–∫–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
            // i(:class="getIconClass(eventType)")
            // –∏–ª–∏
            // img(:src="getIconSrc(eventType)" :alt="getEventTitleByType(eventType)")

  .events-column(v-if="selectedDate")
    h4 –°–æ–±—ã—Ç–∏—è –Ω–∞ {{ formatDate(selectedDate) }}
    .event-item(
      v-for="(event, index) in eventsForSelectedDay"
      :key="index"
    )
      strong {{ getEventTitle(event) }}
      p {{ getEventDescription(event) }}


export default {
  name: 'EventCalendar',
  data() {
    return {
      currentMonth: null,
      currentYear: null,
      selectedDate: null,
      events: [],
      minDate: null,
      maxDate: null,
    };
  },
  computed: {
    weekdays() {
      return ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    },
    currentMonthName() {
      const months = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
      ];
      return months[this.currentMonth];
    },
    daysInMonth() {
      const days = [];
      const firstDay = new Date(this.currentYear, this.currentMonth, 1).getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
      const daysInMonth = new Date(this.currentYear, this.currentMonth + 1, 0).getDate();

      // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
      for (let i = 0; i < (firstDay === 0 ? 6 : firstDay - 1); i++) {
        days.push({ number: '', date: null, hasEvents: false, events: [] });
      }

      // –Ø—á–µ–π–∫–∏ —Å –¥–Ω—è–º–∏ –º–µ—Å—è—Ü–∞
      for (let day = 1; day <= daysInMonth; day++) {
        const dateStr = this.formatDateForData(new Date(this.currentYear, this.currentMonth, day));
        const dayData = this.events.find(e => this.normalizeDate(e.date) === this.normalizeDate(dateStr));
        days.push({
          number: day,
          date: dateStr,
          hasEvents: !!dayData,
          events: dayData ? dayData.events : []
        });
      }

      return days;
    },
    eventsForSelectedDay() {
      if (!this.selectedDate) return [];
      const normalized = this.normalizeDate(this.selectedDate);
      const dayData = this.events.find(e => this.normalizeDate(e.date) === normalized);
      return dayData ? dayData.events : [];
    },
    canGoPrev() {
      if (!this.minDate) return false;
      const current = this.currentYear * 12 + this.currentMonth;
      const min = this.minDate.year * 12 + this.minDate.month;
      return current > min;
    },
    canGoNext() {
      if (!this.maxDate) return false;
      const current = this.currentYear * 12 + this.currentMonth;
      const max = this.maxDate.year * 12 + this.maxDate.month;
      return current < max;
    }
  },
  mounted() {
    this.parseEvents();
    this.calculateDateBounds();
    this.setDefaultMonth();
    this.setDefaultSelection();
  },
  methods: {
    parseEvents() {
      const eventAttr = this.$el.parentElement.getAttribute('data-event');
      if (!eventAttr) return;

      try {
        let rawData = JSON.parse(eventAttr);

        this.events = rawData.map(item => ({
          date: this.normalizeBackendDate(item.date), // "2023-09-13" ‚Üí "13.09.2023"
          events: Array.isArray(item.events) ? item.events : []
        }));

      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ data-event', e);
      }
    },

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç "2023-09-13" ‚Üí "13.09.2023" ‚Äî –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è Date, —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞
    normalizeBackendDate(backendDateStr) {
      if (!backendDateStr) return '';
      const [y, m, d] = backendDateStr.split('-');
      return `${d}.${m}.${y}`;
    },

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç "5.9.2023" ‚Üí "05.09.2023" –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    normalizeDate(dateStr) {
      if (!dateStr) return '';
      const [d, m, y] = dateStr.split('.');
      const dd = String(parseInt(d, 10)).padStart(2, '0');
      const mm = String(parseInt(m, 10)).padStart(2, '0');
      return `${dd}.${mm}.${y}`;
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JS Date ‚Üí "DD.MM.YYYY"
    formatDateForData(date) {
      const d = String(date.getDate()).padStart(2, '0');
      const m = String(date.getMonth() + 1).padStart(2, '0');
      const y = date.getFullYear();
      return `${d}.${m}.${y}`;
    },

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫
    getEventTypesForDay(day) {
      return day.events.map(event => event.type);
    },

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —Ç–∏–ø—É (–¥–ª—è title/—Ç—É–ª—Ç–∏–ø–∞)
    getEventTitleByType(type) {
      const map = {
        1: '–≠—Ñ–∏—Ä',
        2: '–†–æ–∑—ã–≥—Ä—ã—à',
        3: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
      };
      return map[type] || '–°–æ–±—ã—Ç–∏–µ';
    },

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è (–∏–∑ –¥–∞–Ω–Ω—ã—Ö)
    getEventTitle(eventObj) {
      return eventObj.title || '–°–æ–±—ã—Ç–∏–µ';
    },

    // –ü–æ–∫–∞ –ø—É—Å—Ç–æ, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    getEventDescription(eventObj) {
      return '';
    },

    selectDay(day) {
      if (!day.hasEvents) return;
      this.selectedDate = day.date;
    },

    isSelected(dateStr) {
      if (!this.selectedDate || !dateStr) return false;
      return this.normalizeDate(this.selectedDate) === this.normalizeDate(dateStr);
    },

    // üçè –ö–†–û–°–°–ë–†–ê–£–ó–ï–†–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ ‚Äî —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä—É—á–Ω—É—é ‚Üí new Date(y, m-1, d)
    parseDate(dateStr) {
      const normalized = this.normalizeDate(dateStr);
      const [d, m, y] = normalized.split('.').map(Number);
      const date = new Date(y, m - 1, d);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Invalid Date (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
      if (isNaN(date.getTime())) {
        console.warn('Invalid date parsed:', dateStr);
        return new Date(0); // fallback –Ω–∞ Unix Epoch
      }

      return date;
    },

    calculateDateBounds() {
      if (this.events.length === 0) {
        const now = new Date();
        this.minDate = this.maxDate = { year: now.getFullYear(), month: now.getMonth() };
        return;
      }

      const dates = this.events.map(e => this.parseDate(e.date));
      const minDate = new Date(Math.min(...dates));
      const maxDate = new Date(Math.max(...dates));

      this.minDate = { year: minDate.getFullYear(), month: minDate.getMonth() };
      this.maxDate = { year: maxDate.getFullYear(), month: maxDate.getMonth() };
    },

    setDefaultMonth() {
      const now = new Date();

      const futureEvents = this.events
        .map(e => ({ ...e, dateObj: this.parseDate(e.date) }))
        .filter(e => e.dateObj >= now)
        .sort((a, b) => a.dateObj - b.dateObj);

      if (futureEvents.length > 0) {
        const targetDate = futureEvents[0].dateObj;
        this.currentYear = targetDate.getFullYear();
        this.currentMonth = targetDate.getMonth();
        return;
      }

      const pastEvents = this.events
        .map(e => ({ ...e, dateObj: this.parseDate(e.date) }))
        .sort((a, b) => b.dateObj - a.dateObj);

      if (pastEvents.length > 0) {
        const targetDate = pastEvents[0].dateObj;
        this.currentYear = targetDate.getFullYear();
        this.currentMonth = targetDate.getMonth();
        return;
      }

      this.currentYear = now.getFullYear();
      this.currentMonth = now.getMonth();
    },

    setDefaultSelection() {
      const now = new Date();

      const futureEvents = this.events
        .filter(e => this.parseDate(e.date) >= now)
        .sort((a, b) => this.parseDate(a.date) - this.parseDate(b.date));

      if (futureEvents.length > 0) {
        this.selectedDate = futureEvents[0].date;
        return;
      }

      const pastEvents = this.events
        .filter(e => this.parseDate(e.date) < now)
        .sort((a, b) => this.parseDate(b.date) - this.parseDate(a.date));

      if (pastEvents.length > 0) {
        this.selectedDate = pastEvents[0].date;
        return;
      }

      this.selectedDate = null;
    },

    prevMonth() {
      if (!this.canGoPrev) return;

      if (this.currentMonth === 0) {
        this.currentMonth = 11;
        this.currentYear--;
      } else {
        this.currentMonth--;
      }
    },

    nextMonth() {
      if (!this.canGoNext) return;

      if (this.currentMonth === 11) {
        this.currentMonth = 0;
        this.currentYear++;
      } else {
        this.currentMonth++;
      }
    }
  }
};


--------------------------------------------

.event-icons {
  display: flex;
  gap: 4px;
  margin-top: 4px;
  justify-content: center;
}

.event-icon {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  font-size: 10px;
  color: white;
  font-weight: bold;
}

.icon-type-1 { background: #ff5722; } /* –≠—Ñ–∏—Ä */
.icon-type-2 { background: #4caf50; } /* –†–æ–∑—ã–≥—Ä—ã—à */
.icon-type-3 { background: #2196f3; } /* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */
