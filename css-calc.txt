<template lang="pug">
  .calc-tax-deduc-new__container-block.mor-rep-calculators__parent-tooltip-mobile.js--tooltip-parent
    .calc-tax-deduc-new__row-title-main-container(
      v-if="(transfer_tooltip!==null&&transfer_tooltip['interest-rate']&&transfer_tooltip['interest-rate']['info']!=='')&&(transfer_tooltip['interest-rate']['size']===''||transfer_tooltip['interest-rate']['size']==='small'||transfer_tooltip['interest-rate']['size']===undefined)"
    )
      .calc-tax-deduc-new__row-title-container
        p.calc-tax-deduc-new__row-title Процентная ставка, %
        span.content-note.desctop.content-note__center.js--content-note
          span.content-note__text {{transfer_tooltip["interest-rate"]["info"]}}
        span.content-note.mobile(
          v-if="transfer_tooltip['interest-rate']['info']!==''"
          @click="openTooltipMobile"
        )
      div(v-if="transfer_tooltip['interest-rate']['info']!==''")
        .select__background.modal-special-background(@click="closeTooltipMobile")
        .select-list__selection-window.modal-special-styles.js--openlist-body
          .select-list__head
            p Процентная ставка, %
            .select-list__head-close(@click="closeTooltipMobile")
              svg(width='10', height='10', viewbox='0 0 10 10', fill='none', xmlns='http://www.w3.org/2000/svg')
                path(fill-rule='evenodd', clip-rule='evenodd', d='M0.209209 0.209209C0.488155 -0.0697365 0.940416 -0.0697365 1.21936 0.209209L5 3.98985L8.78064 0.209209C9.05958 -0.0697365 9.51184 -0.0697365 9.79079 0.209209C10.0697 0.488155 10.0697 0.940416 9.79079 1.21936L6.01015 5L9.79079 8.78064C10.0697 9.05958 10.0697 9.51184 9.79079 9.79079C9.51184 10.0697 9.05958 10.0697 8.78064 9.79079L5 6.01015L1.21936 9.79079C0.940416 10.0697 0.488155 10.0697 0.209209 9.79079C-0.0697365 9.51184 -0.0697365 9.05958 0.209209 8.78064L3.98985 5L0.209209 1.21936C-0.0697365 0.940416 -0.0697365 0.488155 0.209209 0.209209Z', fill='#252628')
          .select-list__wr-search.mor-rep-calculators__wr-search
            p {{transfer_tooltip["interest-rate"]["info"]}}


    .calc-tax-deduc-new__row-title-main-container(
      v-if="transfer_tooltip!==null&&transfer_tooltip['interest-rate']&&transfer_tooltip['interest-rate']['info']!==''&&transfer_tooltip['interest-rate']['size']!==''&&transfer_tooltip['interest-rate']['size']==='big'&&transfer_tooltip['interest-rate']['size']!==undefined"
    )
      .calc-tax-deduc-new__row-title-container
        p.calc-tax-deduc-new__row-title Процентная ставка, %
        .content-note(
          @click="openModal"
          :data-tooltip="transfer_tooltip['interest-rate']['name']?transfer_tooltip['interest-rate']['name']:''"
        )

    .calc-tax-deduc-new__row-title-main-container(v-if="transfer_tooltip===null||transfer_tooltip['interest-rate']['info']===''")
      .calc-tax-deduc-new__row-title-container
        p.calc-tax-deduc-new__row-title Процентная ставка, %


    .calc-tax-deduc-new__col-input.js--number-old-rate.js--tex-deduc-input(@click="inputFocus")
      input(
        inputmode="decimal"
        type="text"
        ref="realtyInput"

        @focus="inpFocus"
        @blur="inputBlur"
        @click="inpRemoveMark"
      )
      .range-input__slider(ref="mortgagePrice")
    .calculator_s__cost-flat
      p.property-calculator__range {{String(stgMin).replace('.', ',')}}
      p.property-calculator__range {{stgMiddle}}
      p.property-calculator__range {{stgMax}}
</template>
<script>
import eventBus from '../development-tools/eventBus.vue';
import noUiSlider from 'nouislider';
import Storage from '../development-tools/state.vue';
import IMask from 'imask';
import numberFormatting from '../mixin/numberFormatting.js';
import onlyNumbers from '../custom-scripts/only-numbers.js'
export default {
  name: 'v-interest-rate',
  mixins: [numberFormatting],
  data(){
    return {

      realtySlider: '', // Слайдер "Стоимость недвижимости"
      dataField: 0, // Стоимость недвижимости
      dataFieldForCalculation: 0,
      subsidies: 0,
      stepApartment: 0.1, // Шаг для range инпутов
      stgMin: 0.1, // Минимальное значение поля стоимости
      stgMiddle: 50, // Среднее значение поля стоимости
      stgMax: 100, // Максимальное значение поля стоимости
      start:6, // с какого значения при загрузке должен стоять ползунок
      input_salary:false,
      slider:false,
      mask_interest:null,
    }
  },
  methods:{


    initRealtySlider() {
      this.realtySlider = noUiSlider.create(this.$refs.mortgagePrice, {
        start: [this.start],
        connect: 'lower',
        initial: this.stgMin,
        step:0.1,


        range: {
          min: this.stgMin,
          max: this.stgMax
        },
      })
      this.realtySlider.on('start', (val,handle) => {

        if (this.mask_interest!==null){
          this.mask_interest.destroy()
          this.mask_interest = null
        }
      });
      this.realtySlider.on('update', (val,handle) => {

        this.input_salary = false
        this.$refs.realtyInput.value = parseFloat(val[handle]).toFixed(1).toString().replace(/(\d)(?=(\d{3})+$)/g, '$1 ').replace('.',',')
        this.dataField = parseFloat(val[handle]).toFixed(1).toString().replace(/(\d)(?=(\d{3})+$)/g, '$1 ')

      });

      this.realtySlider.on('set', (val,handle) => {

        this.input_salary = false
        this.$refs.realtyInput.value = parseFloat(val[handle]).toFixed(1).toString().replace(/(\d)(?=(\d{3})+$)/g, '$1 ')
        this.dataField = parseFloat(val[handle]).toFixed(1).toString().replace(/(\d)(?=(\d{3})+$)/g, '$1 ')
        this.dataFieldForCalculation = parseFloat(val[handle]).toFixed(1)
        this.inputCost()
        this.mask_interest.value = parseFloat(val[handle]).toFixed(1).toString().replace(/(\d)(?=(\d{3})+$)/g, '$1 ')

      });

      this.realtySlider.on('end', (val,handle) => {

      });
    },
    inputCost(){
      const input_status = document.querySelector('.js--number-old-rate input')
      if (!this.$refs.realtyInput) return
      const maskOptions = {
        mask: Number,
        scale: 2,
        thousandsSeparator: '',
        padFractionalZeros:false,
        normalizeZeros:'trim',
        // padFractionalZeros: true,
        radix: '.',
        mapToRadix: ['.',','],
        min: 0.1,
        // max: 100,
        autofix:true,
        prepare:(value) => {
          return value.replace(/[бю\/]/gi, '.')
        }
      };

      this.mask_interest = new IMask(this.$refs.realtyInput, maskOptions)
      this.mask_interest.value = String(this.start)

      this.mask_interest.on('accept',()=>{
        if (this.mask_interest.typedValue === null) return

        if (this.mask_interest.typedValue > 100) {
          this.mask_interest.typedValue = 100
        }
        this.dataField=this.mask_interest.value
        //Новое
        Storage.dispatch('ActionInterestRate',this.mask_interest.value)
      })
      this.mask_interest.on('complete', () => {

      })

    },

    //Ввод значения пользователем
    inputFocus(el){
      const element = el.currentTarget
      element.querySelector('input').focus()
    },

    keyUp(e) {

    },

    inpRemoveMark(el) {
      const element = el.currentTarget;
      if(element.value==0||element.value=='0 %'){
        element.value=''
      }

    },
    inputBlur(el) {
      const element = el.currentTarget;
      element.closest('.js--tex-deduc-input').classList.remove('input-focus')
      this.realtySlider.set(element.value)
      if (element.value==='') {
        this.realtySlider.set(0.1);

      }
      setTimeout(()=>{
        // Storage.dispatch('ActionFinalWindow',false)
      },400)
    },

  },
  beforeDestroy() {
    if (this.mask_interest){
      this.mask_interest.destroy()
    }
  },
  mounted(){
    this.initRealtySlider()
    this.inputCost()

    Storage.dispatch('ActionInterestRate',this.mask_interest.value)

    if (this.answers===null) {
      Storage.dispatch('ActionInterestRate',this.mask_interest.value)
    }
    else {
      this.realtySlider.set(parseFloat(this.answers.bet));
      Storage.dispatch('ActionInterestRate',parseFloat(this.answers.bet))
    }
  },
  computed:{
    transfer_tooltip(){
      return Storage.getters.TRANSFERTOOLTIP
    },
    answers(){
      return Storage.getters.ANSWERS
    },
  },
  watch:{
    //как только стоимость квартиры изменилась, вызываю функцию
    dataField(){
    },
    dataFieldForCalculation(){
      if(this.dataFieldForCalculation==100.0){
        this.mask_interest.value = '100'
      }
    }
  },
  created(){
  },
  components:{}
};
</script>
<style scoped>
</style>

Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.
