const firstShowMap = new Map(); // Map для отслеживания первого показа каждого тултипа

  // Инициализируем карту для всех тултипов
  notes.forEach(note => {
    firstShowMap.set(note, true);
  });


/* eslint-disable */
export default function contentNote() {
  const notes = document.querySelectorAll('.js--content-note');
  const firstShowMap = new Map(); // Map для отслеживания первого показа каждого тултипа

  // Инициализируем карту для всех тултипов
  notes.forEach(note => {
    firstShowMap.set(note, true);
  });

  // Функция для определения touch-устройства
  const isTouchDevice = () => {
    const hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    const isDeviceToolbarActive = () => {
      const userAgent = navigator.userAgent.toLowerCase();
      const isEmulated = userAgent.includes('mobile') || 
                         userAgent.includes('android') || 
                         userAgent.includes('iphone') || 
                         userAgent.includes('ipad');
      const isMobileSize = window.innerWidth <= 1024 && window.innerHeight <= 1024;
      return (isEmulated && isMobileSize) || 
             (hasTouch && isMobileSize);
    };
    return hasTouch || isDeviceToolbarActive();
  };

  const isIOS = () => {
    return (/(iPad|iPhone|iPod)/.test(navigator.userAgent) && !window.MSStream) || 
           (navigator.userAgent.includes('Mac') && 'ontouchend' in document);
  };

  // Функция для позиционирования тултипа
  const positionTooltip = (element) => {
    const noteText = element.querySelector('.content-note__text');
    const isFirstShow = firstShowMap.get(element);
    
    if (isFirstShow) {
      // Полностью скрываем тултип перед расчетами для первого показа
      noteText.style.display = 'none';
      noteText.style.visibility = 'hidden';
      noteText.style.opacity = '0';
      noteText.style.transition = 'none';
    }

    // Даем браузеру время применить display: none
    requestAnimationFrame(() => {
      const rect = element.getBoundingClientRect();
      const parent = element.parentElement;
      const tooltip = element.querySelector('.content-note__text');
      const parentPos = parent.getBoundingClientRect();
      const relativePosLeftElement = rect.left - parentPos.left;
      const windowWidth = document.body.offsetWidth;
      const windowHeight = window.innerHeight;
      const parentWidth = parent.offsetWidth;
      const leftOffset = rect.left + rect.width / 2;
      const topOffset = rect.top + rect.height / 2;

      // Позиционирование
      if (element.closest('.js--courses-accord-content') || element.closest('.js--element-overflow')) {
        if (windowWidth >= 600) {
          if (parentWidth / 2 < relativePosLeftElement) {
            noteText.style.left = 'auto';
            noteText.style.right = '-.25rem';
          } else {
            noteText.style.left = '.25rem';
            noteText.style.right = 'auto';
          }
        }
        if (windowWidth < 600) {
          noteText.style.inset = 'unset';
          noteText.style.transform = `translateX(${-((rect.left - tooltip.offsetWidth / 2 + 7) - (windowWidth / 2 - tooltip.offsetWidth / 2))}px)`;
        }
      } else {
        if (windowWidth >= 600) {
          if (windowWidth / 2 < leftOffset) {
            noteText.style.left = 'auto';
            noteText.style.right = '-.25rem';
          } else {
            noteText.style.left = '.25rem';
            noteText.style.right = 'auto';
          }
        }
        if (windowWidth < 600) {
          noteText.style.inset = 'unset';
          noteText.style.transform = `translateX(${-((rect.left - tooltip.offsetWidth / 2 + 7) - (windowWidth / 2 - tooltip.offsetWidth / 2))}px)`;
        }
      }

      // Вертикальное позиционирование
      if (element.closest('.js--courses-accord-content') || element.closest('.js--element-overflow')) {
        const notesParentBounding = element.closest('.js--courses-accord-content').getBoundingClientRect();
        const locationDifference = rect.top - notesParentBounding.top;
        const heightTooltip = tooltip.offsetHeight;
        if (heightTooltip >= locationDifference) {
          noteText.style.top = 'calc(100% + .25rem)';
          noteText.style.bottom = 'auto';
        } else if (heightTooltip < locationDifference && windowHeight / 2 < topOffset) {
          noteText.style.top = 'auto';
          noteText.style.bottom = 'calc(100% + .25rem)';
        } else if (heightTooltip < locationDifference && windowHeight / 2 > topOffset) {
          noteText.style.top = 'calc(100% + .25rem)';
          noteText.style.bottom = 'auto';
        }
      } else {
        if (windowHeight / 2 > topOffset) {
          noteText.style.top = 'calc(100% + .25rem)';
          noteText.style.bottom = 'auto';
        } else {
          noteText.style.top = 'auto';
          noteText.style.bottom = 'calc(100% + .25rem)';
        }
      }

      // Для первого показа - показываем после всех расчетов
      if (isFirstShow) {
        setTimeout(() => {
          noteText.style.display = 'block';
          noteText.style.visibility = 'visible';
          noteText.style.opacity = '1';
          noteText.style.transition = 'opacity 0.2s ease, transform 0.2s ease';
          firstShowMap.set(element, false); // Помечаем, что первый показ прошел
        }, 50);
      }
    });
  };

  // Основная проверка
  if (isTouchDevice() || isIOS()) {
    document.addEventListener('touchstart', (e) => {
      if(e.target.classList.contains('js--content-note') && e.target.classList.contains('active')){
        e.target.classList.remove('active');
        e.target.querySelector('.content-note__text').classList.remove('active');
        e.target.querySelector('.content-note__text').style.display = 'none';
        return;
      }
      
      if(!e.target.classList.contains('js--content-note')) {
        for (let item of notes) {
          item.classList.remove('active');
          const tooltip = item.querySelector('.content-note__text');
          if (tooltip) {
            tooltip.classList.remove('active');
            tooltip.style.display = 'none';
          }
        }
        return;
      }
      
      if (e.target.classList.contains('js--content-note')) {
        // Сначала скрываем все тултипы
        for (let item of notes) {
          item.classList.remove('active');
          const tooltip = item.querySelector('.content-note__text');
          if (tooltip) {
            tooltip.classList.remove('active');
            tooltip.style.display = 'none';
          }
        }
        
        // Показываем текущий тултип
        e.target.classList.add('active');
        const noteText = e.target.querySelector('.content-note__text');
        noteText.classList.add('active');
        noteText.style.display = 'block';
        
        // Позиционируем
        positionTooltip(e.target);
      }
    });

    // Сброс флагов при клике вне тултипов (опционально)
    document.addEventListener('touchstart', (e) => {
      if (!e.target.classList.contains('js--content-note') && 
          !e.target.closest('.content-note__text')) {
        // Можно сбросить все флаги, если нужно
        // notes.forEach(note => firstShowMap.set(note, false));
      }
    });
  }

  // Mouse events
  document.addEventListener('mouseover', (e) => {
    if (e.target.classList.contains('js--content-note')) {
      const noteText = e.target.querySelector('.content-note__text');
      if (noteText) {
        noteText.style.display = 'block';
        positionTooltip(e.target);
        noteText.classList.add('active');
        
        // Помечаем, что этот тултип уже показывался
        if (firstShowMap.get(e.target)) {
          firstShowMap.set(e.target, false);
        }
      }
      e.target.classList.add('active');
    }
  });

  document.addEventListener('mouseout', (e) => {
    if (e.target.classList.contains('js--content-note')) {
      const noteText = e.target.querySelector('.content-note__text');
      if (noteText) {
        noteText.classList.remove('active');
        noteText.style.display = 'none';
      }
      e.target.classList.remove('active');
    }
  });
}
