exportToPDF() {
  // Подключение шрифтов
  pdfMake.fonts = {
    Roboto: {
      normal: 'Roboto-Regular.ttf',
      bold: 'Roboto-Medium.ttf',
      italics: 'Roboto-Italic.ttf',
      bolditalics: 'Roboto-MediumItalic.ttf'
    }
  };

  // Ваши base64-изображения
  const logoBase64 = 'image/png;base64,...'; // логотип 312x96
  const iconBase64 = 'image/png;base64,...'; // иконка 120x120

  const docDefinition = {
    pageSize: 'A4',
    pageMargins: [40, 80, 40, 40],

    // Шапка
    header: (currentPage) => {
      if (currentPage === 1) {
        return {
          columns: [
            {
              stack: [
                { text: 'Калькулятор', style: 'headerTitle' },
                { 
                  text: 'досрочного погашения', 
                  background: '#daff01',
                  style: 'headerTitleHighlighted' 
                },
                { text: 'ипотеки', style: 'headerTitle' }
              ]
            },
            {
              image: 'logo',
              width: 104,
              alignment: 'right'
            }
          ],
          margin: [40, 20, 40, 16]
        };
      }
      return {};
    },

    content: [
      // Мета-блок
      {
        columns: [
          { 
            text: `Расчет платежей от ${this.currentDate}`, 
            style: 'metaText',
            width: '*'
          },
          { 
            text: 'Сделать новый расчет', 
            link: 'https://xn--h1alcedd.xn--d1aqf.xn--p1ai/calculators/kalkulyator-dosrochnogo-pogasheniya-ipoteki/',
            style: 'link',
            width: 'auto',
            alignment: 'right'
          }
        ],
        margin: [0, 0, 0, 16]
      },

      // Информационный блок с иконкой
      {
        stack: [
          {
            columns: [
              {
                width: 'auto',
                stack: [{ image: 'icon', width: 40, height: 40 }],
                margin: [0, 0, 16, 0]
              },
              {
                width: '*',
                stack: [{
                  text: 'Расчет носит справочный характер и не может быть основанием для совершения юридически значимых действий',
                  style: 'infoText'
                }]
              }
            ],
            margin: [0, 8, 0, 8]
          }
        ],
        style: 'infoBlock'
      },

      // Данные об ипотеке
      {
        stack: [
          { text: 'Данные об ипотеке', style: 'sectionTitle' },
          this.createMortgageBlock()
        ],
        style: 'sectionBox',
        margin: [0, 0, 0, 16] // ← отступ 16px снизу
      },

      // Данные о погашении
      {
        stack: [
          { text: 'Данные о погашении', style: 'sectionTitle' },
          this.createRepaymentBlock()
        ],
        style: 'sectionBox'
      }
    ],

    images: {
      logo: logoBase64,
      icon: iconBase64
    },

    styles: {
      headerTitle: { fontSize: 16, bold: true, color: '#252628' },
      headerTitleHighlighted: { fontSize: 16, bold: true, color: '#252628' },
      metaText: { fontSize: 12, color: '#252628' },
      link: { fontSize: 12, color: '#252628', decoration: 'underline' },
      infoBlock: { background: '#f4f4f4', padding: [16, 16, 16, 16] },
      infoText: { fontSize: 12, color: '#252628' },
      sectionTitle: { fontSize: 16, bold: true, color: '#252628', margin: [0, 0, 0, 16] },
      sectionBox: {
        border: [true, true, true, true],
        borderColor: ['#c8c8cb', '#c8c8cb', '#c8c8cb', '#c8c8cb'],
        padding: [16, 16, 16, 16]
      },
      label: { fontSize: 12, bold: true, color: '#6d6d6d', margin: [0, 0, 0, 4] },
      value: { fontSize: 12, color: '#252628', margin: [0, 0, 0, 12] },
      valueNoMargin: { fontSize: 12, color: '#252628', margin: [0, 0, 0, 2] },
      valueInline: { fontSize: 12, color: '#252628' },
      valueGreen: { fontSize: 12, color: '#699b12', margin: [0, 0, 0, 12] }
    },

    defaultStyle: {
      font: 'Roboto',
      fontSize: 10
    }
  };

  pdfMake.createPdf(docDefinition).download('расчёт-ипотеки.pdf');
},


----------------------------------------------------------------------------------------


createMortgageBlock() {
  return {
    columns: [
      {
        width: '*',
        stack: [
          { text: 'Сумма кредита, ₽', style: 'label' },
          { text: this.$options.filters.format_decimal(this.loanAmount), style: 'value' },
          { text: 'Ставка, %', style: 'label' },
          { text: this.$options.filters.replace_point(this.annualInterestRate), style: 'value' },
          {
            text: [
              { text: 'Тип платежа: ', style: 'label' },
              { 
                text: this.state.payment_type === 'annuity' ? 'Аннуитетный' : 'Дифференцированный',
                style: 'valueInline'
              }
            ]
          }
        ]
      },
      {
        width: '*',
        stack: [
          { text: 'Дата получения', style: 'label' },
          { 
            text: `${this.$options.filters.capitalize(this.obj_month[this.startMonth - 1])} ${this.startYear}`,
            style: 'value' 
          },
          { text: 'Срок кредита', style: 'label' },
          { text: this.formattedTerm, style: 'value' }
        ]
      }
    ],
    columnGap: 24
  };
}

--------------------------------------------------------------------------------


createRepaymentBlock() {
  const ri = this.repayment_information;
  const hasEarly = this.array_early_repayment.length > 0;
  const isAnnuity = this.state.payment_type === 'annuity';

  // Формируем текст ежемесячного платежа
  let paymentText = '';
  if (hasEarly) {
    if (ri.monthly_payment_min === ri.monthly_payment_max) {
      paymentText = `${this.$options.filters.format_decimal(ri.monthly_payment_min)} ₽`;
    } else {
      paymentText = `от ${this.$options.filters.format_decimal(ri.monthly_payment_max)} до ${this.$options.filters.format_decimal(ri.monthly_payment_min)} ₽`;
    }
  } else {
    if (isAnnuity) {
      paymentText = `${this.$options.filters.format_decimal(ri.monthly_payment_annuity)} ₽`;
    } else {
      paymentText = `от ${this.$options.filters.format_decimal(ri.monthly_payment_max)} до ${this.$options.filters.format_decimal(ri.monthly_payment_min)} ₽`;
    }
  }

  // === РЯД 1 ===
  const leftStackRow1 = [
    { text: 'Вы закроете ипотеку', style: 'label' },
    { 
      text: `${this.$options.filters.capitalize(ri.mortgage_closure_month)} ${ri.mortgage_closure_year} года`,
      style: ri.if_earlier_month > 0 ? 'valueNoMargin' : 'value'
    }
  ];
  if (ri.if_earlier_month > 0) {
    leftStackRow1.push({
      text: `Раньше на ${ri.if_earlier_month} ${this.getMonthDeclension(ri.if_earlier_month)}`,
      style: 'valueGreen'
    });
  }

  const row1 = {
    columns: [
      { width: '*', stack: leftStackRow1 },
      { 
        width: '*', 
        stack: [
          { text: 'Ежемесячный платеж', style: 'label' },
          { text: paymentText, style: 'value' }
        ] 
      }
    ],
    columnGap: 24,
    margin: [0, 0, 0, 16]
  };

  // === РЯД 2 ===
  const row2 = {
    columns: [
      {
        width: '*',
        stack: [
          { text: 'Основной долг', style: 'label' },
          { text: `${this.$options.filters.format_decimal(this.loanAmount)} ₽`, style: 'value' }
        ]
      },
      {
        width: '*',
        stack: [
          { text: 'Проценты', style: 'label' },
          { text: `${this.$options.filters.format_decimal(ri.percentages)} ₽`, style: 'value' }
        ]
      }
    ],
    columnGap: 24,
    margin: [0, 0, 0, 16]
  };

  // === РЯД 3 ===
  const row3Columns = [
    {
      width: '*',
      stack: [
        { text: 'Всего заплатите', style: 'label' },
        { text: `${this.$options.filters.format_decimal(ri.pay_in_total)} ₽`, style: 'value' }
      ]
    }
  ];
  if (hasEarly) {
    row3Columns.push({
      width: '*',
      stack: [
        { text: 'Экономия', style: 'label' },
        { text: `${this.$options.filters.format_decimal(ri.savings)} ₽`, style: 'valueGreen' }
      ]
    });
  }

  const row3 = {
    columns: row3Columns,
    columnGap: 24
  };

  return { stack: [row1, row2, row3] };
}
