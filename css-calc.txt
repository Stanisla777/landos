this.realtySlider.on('slide', (values, handle) => {
  if (this.isUpdating) return;
  this.isUpdating = true;

  let value = parseFloat(values[handle]);

  // Если ползунок на 0, то значение = stgMin (0.1)
  if (value <= 0) {
    this.updateInputValue(this.stgMin);
    this.lastSliderValue = this.stgMin;
    this.isUpdating = false;
    return;
  }

  // При движении от 0.1 — если ранее было целое, используем 0.00, иначе — сохранённую дробную часть
  let finalValue = value;
  if (this.lastSliderValue === this.stgMin) {
    // При движении с 0.1 — если было целое, сохраняем 0.00, иначе — decimalPart
    finalValue = value + (this.decimalPart === 0 ? 0 : this.decimalPart);
  } else {
    finalValue = value + this.decimalPart;
  }

  finalValue = Math.max(finalValue, this.stgMin);

  this.updateInputValue(finalValue);
  this.lastSliderValue = finalValue;

  this.isUpdating = false;
});

this.realtySlider.on('set', (values, handle) => {
  if (this.isUpdating) return;
  this.isUpdating = true;

  let value = parseFloat(values[handle]);

  if (value <= 0) {
    this.updateInputValue(this.stgMin);
    this.updateStoreValue(this.stgMin);
    this.lastSliderValue = this.stgMin;
  } else {
    let finalValue = value;
    if (this.lastSliderValue === this.stgMin) {
      finalValue = value + (this.decimalPart === 0 ? 0 : this.decimalPart);
    } else {
      finalValue = value + this.decimalPart;
    }
    finalValue = Math.max(finalValue, this.stgMin);

    this.updateInputValue(finalValue);
    this.updateStoreValue(finalValue);
    this.lastSliderValue = finalValue;
  }

  this.isUpdating = false;
});

-----------------------------

inputBlur(el) {
  const element = el.currentTarget;
  element.closest('.js--tex-deduc-input').classList.remove('input-focus');

  if (!element.value || element.value === '') {
    this.decimalPart = 0.00;
    this.updateSliderValue(0); // Устанавливаем ползунок на 0
    this.updateInputValue(this.stgMin);
    this.updateStoreValue(this.stgMin);
    this.lastSliderValue = this.stgMin;
  }
},

----------------------
updateSliderValue(value) {
  if (this.realtySlider) {
    const sliderValue = value <= this.stgMin ? 0 : Math.floor(value);
    this.realtySlider.set(sliderValue);
  }
}

-------------------------
mounted() {
  this.initRealtySlider();
  this.initInputMask();

  let startValue = this.start;
  if (this.answers && this.answers.bet) {
    startValue = parseFloat(this.answers.bet);
    this.decimalPart = this.getDecimalPart(startValue);
  }

  this.decimalPart = this.getDecimalPart(startValue);
  this.updateInputValue(startValue);
  this.updateStoreValue(startValue);

  // Устанавливаем ползунок: если <= 0.1 — 0, иначе целая часть
  this.updateSliderValue(startValue);
  this.lastSliderValue = startValue;
},
