function runAfterDomReady() {
  // Сначала — пусть бэкенд сделает свою работу
  processBtnBookmark();

  // Потом — наша валидация
  initCheckboxValidation('.js--btn-registration-state');
}

// Выполняем в нужный момент
if (document.readyState !== 'loading') {
  runAfterDomReady();
} else {
  document.addEventListener('DOMContentLoaded', runAfterDomReady);
}

/**
 * Инициализирует валидацию чекбоксов перед вызовом onclick на кнопке.
 * Показывает ошибку, если обязательные чекбоксы не отмечены.
 * Использует делегирование, чтобы работать при любых обработчиках.
 *
 * @param {string} buttonSelector - CSS-селектор кнопки
 */
function initCheckboxValidation(buttonSelector) {
  const btn = document.querySelector(buttonSelector);
  if (!btn) {
    console.warn(`Кнопка с селектором "${buttonSelector}" не найдена.`);
    return;
  }

  // Ограничиваем область поиска: только внутри формы или блока с чекбоксами
  const container = btn.closest('.feed_back__wr-checkbox') || btn.closest('form') || document;
  const checkboxWrappers = container.querySelectorAll('.js--checkbox_wrapper');
  const errorClass = 'js--input__error_required';

  // Сохраняем оригинальный onclick максимально надёжно
  let originalHandler = null;

  if (typeof btn.onclick === 'function') {
    originalHandler = btn.onclick;
  } else {
    const onclickAttr = btn.getAttribute('onclick');
    if (onclickAttr) {
      try {
        originalHandler = new Function('event', onclickAttr);
      } catch (e) {
        console.error('Ошибка парсинга onclick:', e);
      }
    }
  }

  // Удаляем onclick, чтобы не срабатывал без валидации
  btn.removeAttribute('onclick');
  btn.onclick = null;

  // --- Вспомогательные функции ---
  function getErrorMessage(checkbox) {
    return checkbox.getAttribute('data-required-hint') || 'Пожалуйста, подтвердите это условие';
  }

  function showError(formBlock, message) {
    if (!formBlock.querySelector('.' + errorClass)) {
      const error = document.createElement('p');
      error.className = 'input__error ' + errorClass;
      error.textContent = message;
      formBlock.appendChild(error);
    }
  }

  function removeError(formBlock) {
    const error = formBlock.querySelector('.' + errorClass);
    if (error) {
      error.remove();
    }
  }

  // --- Делегированный обработчик клика ---
  document.addEventListener('click', function (e) {
    const targetBtn = document.querySelector(buttonSelector);
    
    // Проверяем, что клик именно по нашей кнопке
    if (!targetBtn || e.target !== targetBtn) {
      return;
    }

    e.preventDefault();
    console.log('Кнопка нажата — начало валидации');

    let hasError = false;

    // Удаляем старые ошибки
    checkboxWrappers.forEach(wrapper => {
      const formBlock = wrapper.querySelector('.feed_back__user-form-block');
      if (formBlock) {
        removeError(formBlock);
      }
    });

    // Проверяем только required-чекбоксы
    checkboxWrappers.forEach(wrapper => {
      const checkbox = wrapper.querySelector('input[type="checkbox"]');
      const formBlock = wrapper.querySelector('.feed_back__user-form-block');

      if (!checkbox || !formBlock) return;

      if (checkbox.hasAttribute('required') && !checkbox.checked) {
        const message = getErrorMessage(checkbox);
        showError(formBlock, message);
        hasError = true;
      }
    });

    // Если всё ок — вызываем оригинальный onclick
    if (!hasError && typeof originalHandler === 'function') {
      console.log('Валидация пройдена — вызываем originalHandler');
      try {
        originalHandler.call(targetBtn, e);
      } catch (err) {
        console.error('Ошибка при вызове originalHandler:', err);
      }
    } else if (hasError) {
      console.log('Валидация не пройдена — выполнение onclick отменено');
    }
  });

  console.log('initCheckboxValidation: инициализация завершена');
}
