.marathon-2025__shedule#marathon-2025-shedule(
                                    v-cloak
                                    ref="Shedule2025"
                                    data-event='[{"date":"2025-10-01", "events":[{"type":2, "title":"Розыгрыш подарков - тут мы будем разыгрывать подарки", "link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"},{"type":3, "title":"Настоящее тестрование ждёт тебя", "link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"},{"type":2, "title":"Розыгрыш подарков - тут мы будем разыгрывать подарки", "link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"},{"type":3, "title":"Настоящее тестрование ждёт тебя", "link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"}]}, {"date":"2025-10-02", "events":[{"type":1, "title":"Эфир со спикерами - самый крутой эфир на земле, где мы разберем насущные вопросы", "link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"}]}, {"date":"2025-10-30", "events":[{"type":1, "title":"Эфир со спикерами - самый крутой эфир на земле, где мы разберем насущные вопросы","link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"}]}, {"date":"2025-10-24", "events":[{"type":1, "title":"Эфир со спикерами - самый крутой эфир на земле, где мы разберем насущные вопросы","link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"}]}, {"date":"2025-10-29", "events":[{"type":1, "title":"Эфир со спикерами - самый крутой эфир на земле, где мы разберем насущные вопросы","link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"}]}, {"date":"2025-10-31", "events":[{"type":1, "title":"Эфир со спикерами - самый крутой эфир на земле, где мы разберем насущные вопросы","link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"}]}, {"date":"2025-10-30", "events":[{"type":1, "title":"Эфир со спикерами - самый крутой эфир на земле, где мы разберем насущные вопросы"}]}, {"date":"2025-10-31", "events":[{"type":1, "title":"Эфир со спикерами - самый крутой эфир на земле, где мы разберем насущные вопросы"}]}, {"date":"2025-11-02", "events":[{"type":2, "title":"Розыгрыш подарков - тут мы будем разыгрывать подарки"},{"type":1, "title":"Эфир со спикерами - самый крутой эфир на земле, где мы разберем насущные вопросы"},{"type":3, "title":"Настоящее тестрование ждёт тебя"}]},{"date":"2025-11-10", "events":[{"type":2, "title":"Розыгрыш подарков - тут мы будем разыгрывать подарки","link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"},{"type":1, "title":"Эфир со спикерами - самый крутой эфир на земле, где мы разберем насущные вопросы"},{"type":3, "title":"Настоящее тестрование ждёт тебя","link":"/education/marathons/2025/rozygrash-kotoryy-svyazan-s-finalnym-testirovaniem/"}]}]'
                                )
                                    .marathon-2025__shedule-legend
                                        .marathon-2025__shedule-legend-item
                                            .marathon-2025__shedule-legend-icon.icon-type-1
                                            p Эфир
                                        .marathon-2025__shedule-legend-item
                                            .marathon-2025__shedule-legend-icon.icon-type-2
                                            p Розыгрыш
                                        .marathon-2025__shedule-legend-item
                                            .marathon-2025__shedule-legend-icon.icon-type-3
                                            p Тестирование


                                    template
                                      .marathon-2025__schedule-block
                                          .marathon-2025__calendar-column.border-radius-16(ref="calendarColumn")
                                            .marathon-2025__calendar-header
                                              .marathon-2025__calendar-header-arrow(@click="prevMonth" :class="!canGoPrev?'disabled':''")
                                                svg(width='18' height='14' viewbox='0 0 18 14' fill='none' xmlns='http://www.w3.org/2000/svg')
                                                  path(fill-rule='evenodd' clip-rule='evenodd' d='M0.792893 7.6724C0.402369 7.30118 0.402369 6.69931 0.792893 6.32809L7.15685 0.278661C7.54738 -0.0925616 8.18054 -0.0925616 8.57107 0.278661C8.96159 0.649884 8.96159 1.25176 8.57107 1.62298L3.91421 6.04967H16.5C17.0523 6.04967 17.5 6.47526 17.5 7.00024C17.5 7.52523 17.0523 7.95082 16.5 7.95082H3.91421L8.57107 12.3775C8.96159 12.7487 8.96159 13.3506 8.57107 13.7218C8.18054 14.093 7.54738 14.093 7.15685 13.7218L0.792893 7.6724Z' fill='#252628')
                                              h4 {{ currentMonthName }} {{ currentYear }}
                                              .marathon-2025__calendar-header-arrow(@click="nextMonth" :class="!canGoNext?'disabled':''")
                                                svg(width='18' height='14' viewbox='0 0 18 14' fill='none' xmlns='http://www.w3.org/2000/svg')
                                                  path(fill-rule='evenodd' clip-rule='evenodd' d='M17.2071 7.6724C17.5976 7.30118 17.5976 6.69931 17.2071 6.32809L10.8431 0.278661C10.4526 -0.0925616 9.81946 -0.0925616 9.42893 0.278661C9.03841 0.649884 9.03841 1.25176 9.42893 1.62298L14.0858 6.04967H1.5C0.947716 6.04967 0.5 6.47526 0.5 7.00024C0.5 7.52523 0.947716 7.95082 1.5 7.95082H14.0858L9.42893 12.3775C9.03841 12.7487 9.03841 13.3506 9.42893 13.7218C9.81946 14.093 10.4526 14.093 10.8431 13.7218L17.2071 7.6724Z' fill='#252628')

                                            .marathon-2025__calendar-grid-container
                                                .marathon-2025__calendar-grid
                                                    //.marathon-2025__day-header-container
                                                    .marathon-2025__day-header(v-for="day in weekdays" :key="day") {{ day }}
                                                .marathon-2025__calendar-grid
                                                    .marathon-2025__calendar-day(
                                                        v-for="day in getDaysInGrid"
                                                        :key="day.date"
                                                        :class="{'disabled': !day.hasEvents,'selected': isSelected(day.date),'prev-month': day.isPrevMonth,'next-month': day.isNextMonth}"
                                                        @click="selectDay(day)"
                                                    )

                                                        .marathon-2025__event-icons(v-if="day.hasEvents")
                                                          span.marathon-2025__shedule-legend-icon(
                                                            v-for="eventType in getEventTypesForDay(day)"
                                                            :key="eventType"
                                                            :class="'icon-type-' + eventType"
                                                            :title="getEventTitleByType(eventType)"
                                                          )
                                                            // Сюда вставь свои иконки, например:
                                                            // i(:class="getIconClass(eventType)")
                                                            // или
                                                            // img(:src="getIconSrc(eventType)" :alt="getEventTitleByType(eventType)")
                                                        p {{ day.number }}

                                          .marathon-2025__events-column.border-radius-16(v-if="selectedDate" ref="eventsColumn")
                                            h4 События на {{ selectedDate }}
                                            .marathon-2025__event-container
                                              .marathon-2025__event-item(
                                                v-for="(event, index) in eventsForSelectedDay"
                                                :key="index"
                                              )
                                                a(:href="event.link || '#'").marathon-2025__shedule-legend-item
                                                  .marathon-2025__shedule-legend-icon(:class="'icon-type-' + event.type")
                                                  p {{ getEventTitleByType(event.type) }}
                                                p.marathon-2025__event-description {{ event.title }}

.marathon-2025{
&__calendar-grid-container{
    .marathon-2025__calendar-grid{
      &:first-child{
        background-color: #f4f4f4;
      }
    }

  }
  &__shedule-legend{
    display: flex;
    gap:16px;
    padding-top: 24px;
    padding-bottom: 24px;
    border-top:1px solid #E6E6E6;
    overflow-x:auto;
    @include respondTo(mobile) {
      padding-top: 16px;
    }
  }
  &__shedule-legend-item{
    display: flex;
    gap:8px;
    &:hover{
      p{
        color:#699B12;
      }
    }
    p{
      font-size: 20px;
      line-height: 120%;
      color: #252628;
      font-family: $ff-semi-bold;
      @media screen and (max-width: 590px) {
        font-size: 16px;
        line-height: 125%;
      }
    }
  }
  &__shedule-legend-icon{
    width: 20px;
    height: 24px;
    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;
    @media screen and (max-width: 590px) {
      width: 16px;
      height: 20px;
    }
    &.icon-type-1{
      //тут вставить иконку мероприятия если она будет в svg
      background-image: url("../img/marathon-2025-icon-broadcast.png");
    }
    &.icon-type-2{
      //тут вставить иконку мероприятия если она будет в svg
      background-image: url("../img/marathon-2025-icon-raffle.png");
    }
    &.icon-type-3{
      //тут вставить иконку мероприятия если она будет в svg
      background-image: url("../img/marathon-2025-icon-test.png");
    }


  }
  &__schedule-block {
    display: flex;
    gap: 16px;
    //align-items: flex-start;
    @media screen and (max-width: 990px) {
      flex-direction: column;
      align-items: unset;
    }
    &>div{
      @media screen and (min-width: 991px) {
        height: 510px;
      }
    }
  }
  &__calendar-column {
    //flex: 1;
    width: 100%;
    max-width: 1007px;
    border:1px solid #dedede;
    clip-path: inset(0 round 16px);
    transition: min-height 0.3s cubic-bezier(0.25,0.46,0.45,0.94);
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    .marathon-2025__shedule-legend-icon{
      @media screen and (max-width: 1390px) {
        width: 17px;
        height: 17px;
      }
      @media screen and (max-width: 590px) {
        width: 13px;
        height: 13px;
      }
    }
  }
  &__calendar-header{
    display: flex;
    column-gap: 15px;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 16px 24px;
    max-width: 845px;
    margin: 0 auto;

    @media screen and (max-width: 590px) {
      padding: 8px 16px;
    }
    h4{
      font-size: 24px;
      line-height: 117%;
      text-align: center;
      color: #252628;
      font-family: $ff-semi-bold;
      @include respondTo(mobile) {
        font-size: 20px;
        line-height: 120%;
      }
      @media screen and (max-width: 590px) {
        font-size: 16px;
        line-height: 125%;
      }
    }
  }
  &__calendar-header-arrow{
    cursor:pointer;
    width: 64px;
    height: 48px;
    display: flex;
    justify-content: center;
    align-items: center;

    @media screen and (max-width: 590px) {
      width: 90px;
    }
    &.disabled{
      pointer-events: none;
      svg{
        path{
          fill: #999999;
        }
      }
    }
  }

  &__calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    &:first-child{
      border-top: 1px solid #dedede;
    }


    //overflow: hidden;
    width: 100%;
    //gap: 4px;
  }
  &__calendar-day,&__day-header{
    font-size: 20px;
    line-height: 120%;
    font-family: $ff-semi-bold;
    display: flex;
    gap: 8px;
    column-gap:8px;
    row-gap:4px;
    align-items: center;
    justify-content: flex-end;
    min-width: 143px;
    @media screen and (max-width: 1390px) {
      font-size: 16px;
      line-height: 150%;
      min-width: 75px;
      column-gap:4px;
    }
    @media screen and (max-width: 590px) {
      font-size: 14px;
      line-height: 143%;
      text-align: center;
      min-width: 46px;
    }
    @media screen and (max-width: 355px) {
      font-size: 12px;
      line-height: 143%;
      text-align: center;
      min-width: 41px;
    }



  }
  &__day-header{
    padding: 8px 20px 8px 10px;
    //background-color: #f4f4f4;
    text-align: right;
    color: #6d6d6d;
    &:not(:last-child){
      border-right:1px solid #dedede;
    }
    @media screen and (max-width: 590px) {
      padding: 8px;
      text-align: center;
      flex-direction: column;
    }
  }
  &__calendar-day {
    padding: 20px 20px 20px 10px;
    transition: all 0.3s cubic-bezier(0.25,0.46,0.45,0.94);
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    cursor: pointer;
    text-align: center;
    position: relative;
    color:$color-text-new;
    border-right: 1px solid #dedede;
    border-bottom: 1px solid #dedede;
    height: 65px;


    &:last-child{
      border-bottom-right-radius: 16px;
    }
    &:nth-child(7n){
      border-right: none;
      grid-column-end: span 1;
      width: calc(100% + 1px);
      margin-right: -1px;
    }
    &:nth-last-child(-n+7){
      border-bottom: none;
    }
    /* Outline для hover и selected */
    outline: 1px solid transparent;
    outline-offset: -1px;
    transition: outline-color 0.2s ease;
    &:hover{
      outline-color: #82bf00;
    }


    @media screen and (max-width: 1390px) {
      padding: 12px;
      flex-direction: column;
      justify-content: flex-start;
      height: 77px;
    }
    @media screen and (max-width: 990px) {
      padding: 16px;
      flex-direction: row;
      justify-content: flex-end;
      height: 65px;
    }
    @media screen and (max-width: 740px) {
      flex-direction: column;
      justify-content: flex-start;
      height: 77px;
    }
    @media screen and (max-width: 590px) {
      padding: 8px;
      height: 52px;
    }


    p{
      color:inherit;
      font-size: inherit;
      line-height: inherit;
      font-family: inherit;
      @media (min-width: 991px) and (max-width: 1390px) {
        order:-1;
      }
      @media screen and (max-width: 740px) {
        order:-1;
      }
    }


    &.disabled {
      color: #999;
      pointer-events: none;
    }
    &.selected {
      background: #d9f0ab;
    }
    &.prev-month:not(.disabled), &.next-month:not(.disabled) {
      color: #252628;
    }
    &.prev-month.disabled, &.next-month.disabled {
      //background: #fafafa;
    }
  }
  &__day-number{

  }
  &__event-icons {
    display: flex;
    gap: 8px;
    justify-content: center;
    @media screen and (max-width: 1390px) {
      gap:4px;
    }
    @media screen and (max-width: 590px) {
      gap:1px;
    }

  }
  &__event-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    font-size: 10px;
    color: white;
    font-weight: bold;
  }
  &__events-column {
    padding: 32px;
    background-color: #f4f4f4;
    flex: 1;
    min-width: 324px;
    @include respondTo(small) {
      padding: 24px;
    }
    h4{
      font-size: 24px;
      line-height: 117%;
      color: #252628;
      font-family: $ff-semi-bold;
      @include respondTo(mobile) {
        font-size: 20px;
        line-height: 120%;
      }
      @include respondTo(small) {
        font-size: 16px;
        line-height: 125%;
      }
    }
    .marathon-2025__shedule-legend-item{
      p{
        @include respondTo(small) {
          font-size: 14px;
          line-height: 143%;
        }
      }
    }
  }
  &__event-container{
    margin-top: 20px;
  }
  &__event-item{
    display: block;
    &:not(:first-child){
      margin-top: 24px;
    }

  }
  &__event-description{
    margin-top: 8px;
    font-family: $ff-semi-bold;
    font-size: 24px;
    line-height: 117%;
    color: #252628;
    @include respondTo(mobile) {
      font-size: 20px;
      line-height: 120%;
    }
    @include respondTo(small) {
      font-size: 14px;
      line-height: 143%;
    }
  }


}

/* eslint-disable */
import Vue from 'vue';
import axios from 'axios';

export default function marathon2025Shedule() {
  const app = new Vue({
    el: '#marathon-2025-shedule',
    data: {
      currentMonth: null,
      currentYear: null,
      selectedDate: null,
      events: [],
      minDate: null,
      maxDate: null,
      screenWidth: window.innerWidth,
      screenHeight: window.innerHeight,
      contentObserver: null,
      resizeTimeout: null,
    },
    computed: {
      weekdays() {
        return ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];
      },
      currentMonthName() {
        const months = [
          'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь',
          'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'
        ];
        return months[this.currentMonth];
      },

      getDaysInGrid() {
        const days = [];
        const firstDay = new Date(this.currentYear, this.currentMonth, 1).getDay();
        const daysInMonth = new Date(this.currentYear, this.currentMonth + 1, 0).getDate();

        const prevMonth = this.currentMonth === 0 ? 11 : this.currentMonth - 1;
        const prevYear = this.currentMonth === 0 ? this.currentYear - 1 : this.currentYear;
        const daysInPrevMonth = new Date(prevYear, prevMonth + 1, 0).getDate();

        const prevDaysCount = firstDay === 0 ? 6 : firstDay - 1;

        for (let i = 0; i < prevDaysCount; i++) {
          const dayNumber = daysInPrevMonth - (prevDaysCount - 1 - i);
          const date = new Date(prevYear, prevMonth, dayNumber);
          const dateStr = this.formatDateForData(date);
          const normalizedDate = this.normalizeDate(dateStr);
          const eventItem = this.events.find(e => this.normalizeDate(e.date) === normalizedDate);

          days.push({
            number: dayNumber,
            date: dateStr,
            isPrevMonth: true,
            isNextMonth: false,
            hasEvents: !!eventItem,
            events: eventItem ? eventItem.events : [],
            month: prevMonth,
            year: prevYear
          });
        }

        for (let day = 1; day <= daysInMonth; day++) {
          const date = new Date(this.currentYear, this.currentMonth, day);
          const dateStr = this.formatDateForData(date);
          const normalizedDate = this.normalizeDate(dateStr);
          const eventItem = this.events.find(e => this.normalizeDate(e.date) === normalizedDate);

          days.push({
            number: day,
            date: dateStr,
            isPrevMonth: false,
            isNextMonth: false,
            hasEvents: !!eventItem,
            events: eventItem ? eventItem.events : [],
            month: this.currentMonth,
            year: this.currentYear
          });
        }

        const nextMonth = this.currentMonth === 11 ? 0 : this.currentMonth + 1;
        const nextYear = this.currentMonth === 11 ? this.currentYear + 1 : this.currentYear;

        while (days.length < 42) {
          const dayNumber = days.length - daysInMonth - prevDaysCount + 1;
          const date = new Date(nextYear, nextMonth, dayNumber);
          const dateStr = this.formatDateForData(date);
          const normalizedDate = this.normalizeDate(dateStr);
          const eventItem = this.events.find(e => this.normalizeDate(e.date) === normalizedDate);

          days.push({
            number: dayNumber,
            date: dateStr,
            isPrevMonth: false,
            isNextMonth: true,
            hasEvents: !!eventItem,
            events: eventItem ? eventItem.events : [],
            month: nextMonth,
            year: nextYear
          });
        }

        const weeks = [];
        for (let i = 0; i < days.length; i += 7) {
          weeks.push(days.slice(i, i + 7));
        }

        const filteredWeeks = weeks.filter(week => {
          return week.some(day => day.month === this.currentMonth && day.year === this.currentYear);
        });

        return filteredWeeks.flat();
      },

      eventsForSelectedDay() {
        if (!this.selectedDate) return [];
        const normalized = this.normalizeDate(this.selectedDate);
        const dayData = this.events.find(e => this.normalizeDate(e.date) === normalized);
        if (!dayData) return [];

        return [...dayData.events].sort((a, b) => {
          const order = [3, 1, 2];
          return order.indexOf(a.type) - order.indexOf(b.type);
        });
      },

      canGoPrev() {
        if (!this.minDate) return false;
        const current = this.currentYear * 12 + this.currentMonth;
        const min = this.minDate.year * 12 + this.minDate.month;
        return current > min;
      },

      canGoNext() {
        if (!this.maxDate) return false;
        const current = this.currentYear * 12 + this.currentMonth;
        const max = this.maxDate.year * 12 + this.maxDate.month;
        return current < max;
      },
    },

    methods: {
      updateScreenWidth() {
        const oldWidth = this.screenWidth;
        this.screenWidth = window.innerWidth;
        this.screenHeight = window.innerHeight;

        // Дебаунс - ждем завершения ресайза
        clearTimeout(this.resizeTimeout);
        this.resizeTimeout = setTimeout(() => {
          if (this.screenWidth >= 990) {
            this.smartSyncHeight();
          } else if (oldWidth >= 990 && this.screenWidth < 990) {
            this.smoothResetHeights();
          }
        }, 200); // Ждем 200ms после последнего ресайза
      },

      smartSyncHeight() {
        if (this.screenWidth < 990) {
          this.smoothResetHeights();
          return;
        }

        this.$nextTick(() => {
          const calendarColumn = this.$el.querySelector('.marathon-2025__calendar-column');
          const eventsColumn = this.$el.querySelector('.marathon-2025__events-column');

          if (!calendarColumn || !eventsColumn) return;

          // Мгновенный сброс перед расчетом
          this.instantResetHeights();

          setTimeout(() => {
            const eventsHeight = eventsColumn.offsetHeight;
            const baseCalendarHeight = this.calculateBaseCalendarHeight();

            // Допуск 15px чтобы избежать микроколебаний
            if (Math.abs(eventsHeight - baseCalendarHeight) < 15) {
              this.smoothResetHeights();
              return;
            }

            if (eventsHeight > baseCalendarHeight) {
              this.smoothApplyHeights(eventsHeight);
            } else {
              this.smoothResetHeights();
            }
          }, 50);
        });
      },

      smoothApplyHeights(targetHeight) {
        const calendarColumn = this.$el.querySelector('.marathon-2025__calendar-column');
        const cells = this.$el.querySelectorAll('.marathon-2025__calendar-day');

        // Плавное применение высоты колонки
        this.applyTransition(calendarColumn, 'min-height 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)');
        calendarColumn.style.minHeight = targetHeight + 'px';

        setTimeout(() => {
          const calendarHeader = this.$el.querySelector('.marathon-2025__calendar-header');
          const dayHeaders = this.$el.querySelectorAll('.marathon-2025__day-header');
          const headerHeight = calendarHeader.offsetHeight;
          const dayHeaderHeight = dayHeaders[0].offsetHeight;
          const availableHeight = targetHeight - headerHeight - dayHeaderHeight;
          const rowCount = Math.ceil(this.getDaysInGrid.length / 7);
          const rowHeight = Math.max(availableHeight / rowCount, 65);

          // Плавное применение высоты ячеек с задержкой
          cells.forEach((cell, index) => {
            setTimeout(() => {
              this.applyTransition(cell, 'all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)');
              cell.style.height = rowHeight + 'px';
              cell.style.minHeight = rowHeight + 'px';
            }, index * 25);
          });
        }, 150);
      },

      smoothResetHeights() {
        const calendarColumn = this.$el.querySelector('.marathon-2025__calendar-column');
        const cells = this.$el.querySelectorAll('.marathon-2025__calendar-day');

        // Плавный сброс высоты колонки
        this.applyTransition(calendarColumn, 'min-height 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)');
        calendarColumn.style.minHeight = '';

        // Плавный сброс высоты ячеек с задержкой
        cells.forEach((cell, index) => {
          setTimeout(() => {
            this.applyTransition(cell, 'all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)');
            cell.style.height = '';
            cell.style.minHeight = '';
          }, index * 20);
        });
      },

      instantResetHeights() {
        const calendarColumn = this.$el.querySelector('.marathon-2025__calendar-column');
        const cells = this.$el.querySelectorAll('.marathon-2025__calendar-day');

        // Временное отключение transition для мгновенного сброса
        this.removeTransition(calendarColumn);
        calendarColumn.style.minHeight = '';

        cells.forEach(cell => {
          this.removeTransition(cell);
          cell.style.height = '';
          cell.style.minHeight = '';
        });

        // Восстанавливаем transition после перерисовки
        setTimeout(() => {
          this.restoreTransition(calendarColumn);
          cells.forEach(cell => {
            this.restoreTransition(cell);
          });
        }, 50);
      },

      applyTransition(element, transitionValue) {
        if (!element) return;
        element.style.transition = transitionValue;
      },

      removeTransition(element) {
        if (!element) return;
        element.dataset.originalTransition = element.style.transition;
        element.style.transition = 'none';
      },

      restoreTransition(element) {
        if (!element) return;
        element.style.transition = element.dataset.originalTransition || '';
        delete element.dataset.originalTransition;
      },

      calculateBaseCalendarHeight() {
        const calendarHeader = this.$el.querySelector('.marathon-2025__calendar-header');
        const dayHeaders = this.$el.querySelector('.marathon-2025__calendar-grid:first-child');

        const headerHeight = calendarHeader ? calendarHeader.offsetHeight : 0;
        const dayHeaderHeight = dayHeaders ? dayHeaders.offsetHeight : 0;

        const rowCount = Math.ceil(this.getDaysInGrid.length / 7);

        let cellHeight;
        if (this.screenWidth < 590) {
          cellHeight = 52;
        } else if (this.screenWidth < 740) {
          cellHeight = 77;
        } else if (this.screenWidth < 990) {
          cellHeight = 65;
        } else if (this.screenWidth < 1390) {
          cellHeight = 77;
        } else {
          cellHeight = 65;
        }

        return headerHeight + dayHeaderHeight + (cellHeight * rowCount);
      },

      setupContentObserver() {
        const eventsColumn = this.$el.querySelector('.marathon-2025__events-column');
        if (!eventsColumn) return;

        this.contentObserver = new MutationObserver(() => {
          if (this.screenWidth >= 990) {
            // Дебаунс для изменений контента
            clearTimeout(this.resizeTimeout);
            this.resizeTimeout = setTimeout(() => {
              this.smartSyncHeight();
            }, 100);
          }
        });

        this.contentObserver.observe(eventsColumn, {
          childList: true,
          subtree: true,
          characterData: true,
          attributes: true
        });
      },

      parseEvents() {
        const eventAttr = this.$el.getAttribute('data-event');
        if (!eventAttr) return;

        try {
          let rawData = JSON.parse(eventAttr);

          this.events = rawData.map(item => ({
            date: this.normalizeBackendDate(item.date),
            events: Array.isArray(item.events) ? item.events : []
          }));

        } catch (e) {
          console.error('Ошибка парсинга data-event', e);
        }
      },

      normalizeBackendDate(backendDateStr) {
        if (!backendDateStr) return '';
        const [y, m, d] = backendDateStr.split('-');
        return `${d}.${m}.${y}`;
      },

      normalizeDate(dateStr) {
        if (!dateStr) return '';
        const [d, m, y] = dateStr.split('.');
        const dd = String(parseInt(d, 10)).padStart(2, '0');
        const mm = String(parseInt(m, 10)).padStart(2, '0');
        return `${dd}.${mm}.${y}`;
      },

      formatDateForData(date) {
        const d = String(date.getDate()).padStart(2, '0');
        const m = String(date.getMonth() + 1).padStart(2, '0');
        const y = date.getFullYear();
        return `${d}.${m}.${y}`;
      },

      formatDate(dateStr) {
        if (!dateStr) return '';
        const normalized = this.normalizeDate(dateStr);
        const [d, m, y] = normalized.split('.').map(Number);
        const months = [
          'января', 'февраля', 'марта', 'апреля', 'мая', 'июня',
          'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'
        ];
        return `${d} ${months[m - 1]} ${y}`;
      },

      //  для календаря  только уникальные категории из объекта
      getEventTypesForDay(day) {
        // Получаем уникальные типы
        const uniqueTypes = [...new Set(day.events.map(event => event.type))];

        // Сортирую по порядку: type: 3 -> 1 -> 2
        const order = [3, 1, 2];
        return uniqueTypes.sort((a, b) => order.indexOf(a) - order.indexOf(b));
      },

      getEventTitleByType(type) {
        const map = {
          1: 'Эфир',
          2: 'Розыгрыш',
          3: 'Тестирование'
        };
        return map[type] || 'Событие';
      },

      getEventTitle(eventObj) {
        return eventObj.title || 'Событие';
      },

      getEventDescription(eventObj) {
        return '';
      },

      selectDay(day) {
        if (!day.hasEvents) return;

        this.selectedDate = day.date;

        const selectedDateObj = this.parseDate(day.date);
        const selectedMonth = selectedDateObj.getMonth();
        const selectedYear = selectedDateObj.getFullYear();

        if (selectedMonth !== this.currentMonth || selectedYear !== this.currentYear) {
          this.currentMonth = selectedMonth;
          this.currentYear = selectedYear;
        }
      },

      isSelected(dateStr) {
        if (!this.selectedDate || !dateStr) return false;
        return this.normalizeDate(this.selectedDate) === this.normalizeDate(dateStr);
      },

      parseDate(dateStr) {
        const normalized = this.normalizeDate(dateStr);
        const [d, m, y] = normalized.split('.').map(Number);
        const date = new Date(y, m - 1, d);

        if (isNaN(date.getTime())) {
          console.warn('Invalid date parsed:', dateStr);
          return new Date(0);
        }

        return date;
      },

      calculateDateBounds() {
        if (this.events.length === 0) {
          const now = new Date();
          this.minDate = this.maxDate = { year: now.getFullYear(), month: now.getMonth() };
          return;
        }

        const dates = this.events.map(e => this.parseDate(e.date));
        const minDate = new Date(Math.min(...dates));
        const maxDate = new Date(Math.max(...dates));

        this.minDate = { year: minDate.getFullYear(), month: minDate.getMonth() };
        this.maxDate = { year: maxDate.getFullYear(), month: maxDate.getMonth() };
      },

      setDefaultMonth() {
        const now = new Date();

        const futureEvents = this.events
          .map(e => ({ ...e, dateObj: this.parseDate(e.date) }))
          .filter(e => e.dateObj >= now)
          .sort((a, b) => a.dateObj - b.dateObj);

        if (futureEvents.length > 0) {
          const targetDate = futureEvents[0].dateObj;
          this.currentYear = targetDate.getFullYear();
          this.currentMonth = targetDate.getMonth();
          return;
        }

        const pastEvents = this.events
          .map(e => ({ ...e, dateObj: this.parseDate(e.date) }))
          .sort((a, b) => b.dateObj - a.dateObj);

        if (pastEvents.length > 0) {
          const targetDate = pastEvents[0].dateObj;
          this.currentYear = targetDate.getFullYear();
          this.currentMonth = targetDate.getMonth();
          return;
        }

        this.currentYear = now.getFullYear();
        this.currentMonth = now.getMonth();
      },

      setDefaultSelection() {
        const now = new Date();

        const futureEvents = this.events
          .filter(e => this.parseDate(e.date) >= now)
          .sort((a, b) => this.parseDate(a.date) - this.parseDate(b.date));

        if (futureEvents.length > 0) {
          this.selectedDate = futureEvents[0].date;
          return;
        }

        const pastEvents = this.events
          .filter(e => this.parseDate(e.date) < now)
          .sort((a, b) => this.parseDate(b.date) - this.parseDate(a.date));

        if (pastEvents.length > 0) {
          this.selectedDate = pastEvents[0].date;
          return;
        }

        this.selectedDate = null;
      },

      prevMonth() {
        if (!this.canGoPrev) return;

        if (this.currentMonth === 0) {
          this.currentMonth = 11;
          this.currentYear--;
        } else {
          this.currentMonth--;
        }
      },

      nextMonth() {
        if (!this.canGoNext) return;

        if (this.currentMonth === 11) {
          this.currentMonth = 0;
          this.currentYear++;
        } else {
          this.currentMonth++;
        }
      }
    },

    watch: {
      eventsForSelectedDay: {
        handler() {
          this.$nextTick(() => {
            if (this.screenWidth >= 990) {
              clearTimeout(this.resizeTimeout);
              this.resizeTimeout = setTimeout(() => {
                this.smartSyncHeight();
              }, 100);
            }
          });
        },
        deep: true
      },

      currentMonth() {
        this.$nextTick(() => {
          if (this.screenWidth >= 990) {
            clearTimeout(this.resizeTimeout);
            this.resizeTimeout = setTimeout(() => {
              this.smartSyncHeight();
            }, 100);
          }
        });
      }
    },

    mounted() {
      this.parseEvents();
      this.calculateDateBounds();
      this.setDefaultMonth();
      this.setDefaultSelection();
      window.addEventListener('resize', this.updateScreenWidth);
      this.setupContentObserver();

      this.$nextTick(() => {
        setTimeout(() => {
          this.smartSyncHeight();
        }, 300);
      });
    },

    beforeDestroy() {
      window.removeEventListener('resize', this.updateScreenWidth);
      if (this.contentObserver) {
        this.contentObserver.disconnect();
      }
      clearTimeout(this.resizeTimeout);
    }
  });
}

