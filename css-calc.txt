async sendResults() {
  if (this.isSending) return;
  this.isSending = true;

  try {
    // Получаем текущую ссылку (если answerLink или link не существует — null)
    let initialLink = null;
    if (this.answerLink && typeof this.answerLink.link !== 'undefined') {
      initialLink = this.answerLink.link;
    }

    await this.sendingResult('result');
    this.lastSentAnswers = JSON.parse(JSON.stringify(this.answersToSand));

    // Ждём обновления ссылки
    await this.waitForAnswerLinkUpdate(initialLink);

  } catch (error) {
    console.error('Ошибка при отправке результатов:', error);
    throw error;
  } finally {
    this.isSending = false;
  }
}

async waitForAnswerLinkUpdate(oldLink, timeout = 5000) {
  const start = Date.now();
  const checkInterval = 50;

  return new Promise((resolve, reject) => {
    const interval = setInterval(() => {
      let currentLink = null;

      // Проверяем, существует ли answerLink и его поле link
      if (this.answerLink && typeof this.answerLink.link !== 'undefined' && this.answerLink.link !== null) {
        currentLink = this.answerLink.link;
      }

      // Если появилась новая ссылка (и она отличается от старой)
      if (currentLink && currentLink !== oldLink) {
        clearInterval(interval);
        resolve();
      }

      // Таймаут
      if (Date.now() - start > timeout) {
        clearInterval(interval);
        reject(new Error('Таймаут ожидания обновления answerLink'));
      }
    }, checkInterval);
  });
}

async handleCopyClick(event) {
  const element = event.currentTarget;
  try {
    if (this.hasAnswersChanged()) {
      await this.sendResults();
    }

    // Проверяем answerLink.link классическим способом
    if (this.answerLink && typeof this.answerLink.link !== 'undefined' && this.answerLink.link) {
      this.copyLinkManually(this.answerLink.link, element);
    }
  } catch (error) {
    console.error('Ошибка при копировании:', error);
  }
}


async handleLinkClick(type) {
  try {
    if (this.hasAnswersChanged()) {
      await this.sendResults();
    }

    let link = null;
    if (this.answerLink && typeof this.answerLink[type] !== 'undefined' && this.answerLink[type]) {
      link = this.answerLink[type];
    }

    if (link) {
      window.open(link, '_blank');
    }
  } catch (error) {
    console.error('Ошибка при открытии ссылки:', error);
  }
}








display: inline;
    background-image: linear-gradient(#daff01, #daff01);
    background-size: 100% 68%;
    background-position: 0 62%;
    background-repeat: no-repeat;
    padding: 0.1em 3px;
    box-decoration-break: clone;
    -webkit-box-decoration-break: clone;
    background-color: transparent;

