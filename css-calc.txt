receivedDateMobile([year, month]) {
  const dateString = `${year}-${month}`;
  this.$nextTick(() => {
    const container = this.$refs.mobileShedule; // ваш контейнер со скроллом
    const targetElement = container.querySelector(`[data-date="${dateString}"]`);
    
    if (targetElement && container) {
      const containerRect = container.getBoundingClientRect();
      const targetRect = targetElement.getBoundingClientRect();
      
      // Вычисляем позицию относительно контейнера
      const relativePosition = targetRect.top - containerRect.top;
      
      // Вычисляем сколько нужно проскроллить (с отступом 10px сверху)
      const scrollToPosition = container.scrollTop + relativePosition - 10;
      
      const startPosition = container.scrollTop;
      const distance = scrollToPosition - startPosition;
      const duration = 800;
      let startTime = null;

      function animation(currentTime) {
        if (startTime === null) startTime = currentTime;
        const timeElapsed = currentTime - startTime;

        const progress = Math.min(timeElapsed / duration, 1);
        const ease = easeInOutQuad(progress);

        container.scrollTop = startPosition + distance * ease;
        
        if (timeElapsed < duration) {
          requestAnimationFrame(animation);
        }
      }
      
      function easeInOutQuad(t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
      }
      
      requestAnimationFrame(animation);
    }
  });
}
