async smoothScrollToElement(element) {
  const container = this.$refs.mobileShedule;
  
  // Вычисляем все необходимые позиции
  const elementRect = element.getBoundingClientRect();
  const containerRect = container.getBoundingClientRect();
  
  // Вычисляем позицию элемента относительно контейнера
  const relativeTop = elementRect.top - containerRect.top;
  const targetContainerScroll = container.scrollTop + relativeTop - 20; // -20 для отступа
  
  // Вычисляем, насколько контейнер не виден в viewport
  const containerTopInViewport = containerRect.top;
  const containerBottomInViewport = containerRect.bottom;
  const viewportHeight = window.innerHeight || document.documentElement.clientHeight;
  
  // Определяем, нужно ли скроллить страницу
  let targetWindowScroll = null;
  
  // Если верх контейнера выше viewport (частично или полностью не виден сверху)
  if (containerTopInViewport < 0) {
    targetWindowScroll = window.scrollY + containerRect.top - 20;
  }
  // Если низ контейнера ниже viewport (частично или полностью не виден снизу)
  else if (containerBottomInViewport > viewportHeight) {
    // Вычисляем, насколько нужно проскроллить, чтобы показать низ контейнера
    const scrollNeeded = containerBottomInViewport - viewportHeight + 20;
    targetWindowScroll = window.scrollY + scrollNeeded;
  }
  
  // Если нужно скроллить и страницу, и контейнер
  if (targetWindowScroll !== null) {
    await Promise.all([
      this.animateScroll(window, targetWindowScroll, 600),
      this.animateScroll(container, targetContainerScroll, 600)
    ]);
  } else {
    // Если контейнер полностью в viewport, скроллим только контейнер
    await this.animateScroll(container, targetContainerScroll, 600);
  }
},
