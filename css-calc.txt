data() {
  return {
    lastSentAnswers: null, // храним последние отправленные данные
    isSending: false,      // флаг отправки запроса
    pendingLinkAction: null // отложенное действие после запроса
  }
},
methods: {
  async handleLinkClick(platform) {
    // Если данные не изменились, просто открываем ссылку
    if (!this.hasAnswersChanged()) {
      window.open(this.answerLink[platform], '_blank');
      return;
    }
    
    // Сохраняем действие для выполнения после запроса
    this.pendingLinkAction = () => {
      window.open(this.answerLink[platform], '_blank');
    };
    
    // Отправляем запрос
    await this.sendingResultToApi();
  },
  
  async handleCopyClick(event) {
    // Если данные не изменились, просто копируем ссылку
    if (!this.hasAnswersChanged()) {
      this.copyLink(event);
      return;
    }
    
    // Сохраняем действие для выполнения после запроса
    this.pendingLinkAction = () => {
      this.copyLink(event);
    };
    
    // Отправляем запрос
    await this.sendingResultToApi();
  },
  
  hasAnswersChanged() {
    if (!this.lastSentAnswers) return true;
    
    // Простое сравнение объектов (можно улучшить для глубокого сравнения)
    return JSON.stringify(this.answersToSand) !== JSON.stringify(this.lastSentAnswers);
  },
  
  async sendingResultToApi() {
    if (this.isSending) return;
    
    this.isSending = true;
    
    let data = {
      "calculatorId": this.calculatorId,
      "answers": this.answersToSand,
    }
    
    try {
      const res = await axios({
        method: 'post',
        url: '/api/',
        headers: {
          "Content-type": "application/json; charset=UTF-8",
          'X-Bitrix-Csrf-Token': window.BX.bitrix_sessid(),
        },
        data: data
      });
      
      if (res.data.code === 200 && res.data.result) {
        Storage.dispatch('ActionDescriptionAfterSand', null);
        Storage.dispatch('ActionAnswersId', res.data.result.answersId);
        Storage.dispatch('ActionAnswerLink', res.data.result.answerLink);
        
        // Сохраняем последние отправленные данные
        this.lastSentAnswers = JSON.parse(JSON.stringify(this.answersToSand));
      } else {
        if (res.data.description) {
          Storage.dispatch('ActionDescriptionAfterSand', res.data.description);
        }
        if (res.data.code) {
          this.answer_code = res.data.code;
        }
      }
      
      this.answersToSand = [];
      
      // Выполняем отложенное действие после успешного запроса
      if (this.pendingLinkAction) {
        this.pendingLinkAction();
        this.pendingLinkAction = null;
      }
      
    } catch (error) {
      if (error.response && error.response.data !== undefined) {
        console.log(error.response);
        Storage.dispatch('ActionDescriptionAfterSand', error.response.data.description);
      }
      console.log(error);
    } finally {
      this.isSending = false;
    }
  },
  
  async copyLink(event) {
    // ... существующий код copyLink ...
  }
}
