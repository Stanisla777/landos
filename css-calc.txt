.swiper-slide-one-height {
  position: relative;
  // Убираем height: auto с .swiper-slide — это мешает stretch

  .swiper-wrapper {
    display: flex;
    align-items: stretch; // ← для 1 слайда
  }

  .swiper-slide {
     height: auto;
    display: flex;
    //flex-direction: column;

    & > * {
      flex-grow: 1;
      width: 100%;
      //min-height: 0; // ← критически важно
    }
  }


}


/* eslint-disable */
import Swiper, {
  Navigation, Pagination, Autoplay, Thumbs, EffectFade
} from 'swiper';
import paginationSlider_s from './redesign-site/paginationSlider';
import arrowSlider from './redesign-site/arrowSlider';
// eslint-disable-next-line no-unused-vars
import setEqualHeight from './TemplateScript/updateBlockHeights';
import RemoveClassBody from './redesign-site/allow-body-scrolling';

Swiper.use([Navigation, Pagination, Autoplay, Thumbs, EffectFade]);

// === ВСПОМОГАТЕЛЬНАЯ ФУНКЦИЯ: ожидание загрузки всех изображений ===
function waitForImages(element) {
  const images = Array.from(element.querySelectorAll('img'));
  if (images.length === 0) {
    return Promise.resolve();
  }

  const promises = images.map(img => {
    if (img.complete && img.naturalHeight !== 0) {
      return Promise.resolve();
    }
    return img.decode().catch(() => Promise.resolve());
  });

  return Promise.all(promises);
}

// === ФУНКЦИЯ ОБНОВЛЕНИЯ ВЫСОТЫ ВСЕХ СЛАЙДОВ ОДИНАКОВО ===
function updateSwiperHeight(swiperInstance) {
  if (!swiperInstance || !swiperInstance.wrapperEl) return;

  swiperInstance.wrapperEl.style.height = '';
  swiperInstance.slides.forEach(slide => {
    slide.style.height = 'auto';
  });

  let maxHeight = 0;
  swiperInstance.slides.forEach(slide => {
    if (slide.offsetHeight > maxHeight) {
      maxHeight = slide.offsetHeight;
    }
  });

  swiperInstance.wrapperEl.style.height = `${maxHeight}px`;
  swiperInstance.slides.forEach(slide => {
    slide.style.height = `${maxHeight}px`;
  });

  swiperInstance.update();
}

// === ОСНОВНАЯ ФУНКЦИЯ ИНИЦИАЛИЗАЦИИ СЛАЙДЕРОВ ===
function appraisalSlider() {
  const array_slider = document.querySelectorAll('.js--slider-construtor');

  for (const item of array_slider) {
    // Параметры по умолчанию
    let data_space_between = { desctop: '16', tablet: '14', mobile: '0' };
    let data_count_slide = { large_desctop: '4', desctop: '4', small_desctop: '3', tablet: '2', mobile: '1' };
    let data_loop = { desctop: 'false', small_desctop: 'false', tablet: 'false', mobile: 'false' };
    let data_simulation_touch = { desctop: 'false', tablet: 'false', mobile: 'true' };
    let data_arrows = { arrow_left: '', arrow_right: '' };
    let data_pagination = { pagination: '' };
    let auto_height = false;
    let same_height_slides = false;

    // Чтение атрибутов
    if (item.hasAttribute('data-space-between')) {
      data_space_between = JSON.parse(item.getAttribute('data-space-between'));
    }
    if (item.hasAttribute('data-count-slide')) {
      data_count_slide = JSON.parse(item.getAttribute('data-count-slide'));
    }
    if (item.hasAttribute('data-loop')) {
      data_loop = JSON.parse(item.getAttribute('data-loop'));
    }
    if (item.hasAttribute('data-simulation-touch')) {
      data_simulation_touch = JSON.parse(item.getAttribute('data-simulation-touch'));
    }
    if (item.hasAttribute('data-arrows')) {
      data_arrows = JSON.parse(item.getAttribute('data-arrows'));
    }
    if (item.hasAttribute('data-pagination')) {
      data_pagination = JSON.parse(item.getAttribute('data-pagination'));
    }
    if (item.hasAttribute('auto-height')) {
      auto_height = JSON.parse(item.getAttribute('auto-height'));
    }
    if (item.hasAttribute('same-height-slides')) {
      same_height_slides = JSON.parse(item.getAttribute('same-height-slides'));
    }

    const swiper = new Swiper(item, {
      init: true,
      observer: true,
      observeParents: true,
      observeSlideChildren: true,

      slidesPerView: parseInt(data_count_slide.desctop, 10),
      spaceBetween: parseInt(data_space_between.desctop, 10),
      loop: false,
      autoHeight: auto_height,
      simulateTouch: true,
      allowTouchMove: true,

      pagination: data_pagination.pagination
        ? {
          el: data_pagination.pagination,
          clickable: true,
        }
        : false,

      navigation: data_arrows.arrow_left && data_arrows.arrow_right
        ? {
          prevEl: data_arrows.arrow_left,
          nextEl: data_arrows.arrow_right,
        }
        : false,

      breakpoints: {
        0: {
          slidesPerView: parseInt(data_count_slide.mobile, 10),
          spaceBetween: parseInt(data_space_between.mobile, 10),
          loop: JSON.parse(data_loop.mobile),
          simulateTouch: JSON.parse(data_simulation_touch.mobile),
          allowTouchMove: JSON.parse(data_simulation_touch.mobile),
        },
        590: {
          slidesPerView: parseInt(data_count_slide.tablet, 10),
          spaceBetween: parseInt(data_space_between.tablet, 10),
          loop: JSON.parse(data_loop.tablet),
          simulateTouch: JSON.parse(data_simulation_touch.tablet),
          allowTouchMove: JSON.parse(data_simulation_touch.tablet),
        },
        768: {
          slidesPerView: parseInt(data_count_slide.small_desctop, 10),
          spaceBetween: parseInt(data_space_between.desctop, 10),
          loop: JSON.parse(data_loop.small_desctop),
          simulateTouch: JSON.parse(data_simulation_touch.desctop),
          allowTouchMove: JSON.parse(data_simulation_touch.desctop),
        },
        1100: {
          slidesPerView: parseInt(data_count_slide.desctop, 10),
          spaceBetween: parseInt(data_space_between.desctop, 10),
          loop: JSON.parse(data_loop.desctop),
          simulateTouch: JSON.parse(data_simulation_touch.desctop),
          allowTouchMove: JSON.parse(data_simulation_touch.desctop),
        },
        1360: {
          slidesPerView: parseInt(data_count_slide.large_desctop, 10),
          spaceBetween: parseInt(data_space_between.desctop, 10),
          loop: JSON.parse(data_loop.desctop),
          simulateTouch: JSON.parse(data_simulation_touch.desctop),
          allowTouchMove: JSON.parse(data_simulation_touch.desctop),
        },
      },

      on: {
        beforeInit: (el) => {
          if (window.innerWidth > 768) {
            const container = el.$el[0].closest('.js--marathon-new__schedule-swiper');
            let stories = null;
            if (container) {
              stories = container.querySelector('.marathon-new-last__schedule-stories');
            }
            if (container && stories) {
              const arrows = container.querySelectorAll('.swiper-slide-arrow__left');
              const width = stories.offsetWidth;
              arrows.forEach(arrow => {
                arrow.style.left = `-${width + 50}px`;
              });
            }
          }
        },

        afterInit: (el) => {
          console.log(el.$el[0]);
          const wrapper = el.$el[0].closest('.js--general-style-slider.before-init');
          if (wrapper) {
            wrapper.classList.remove('before-init');
          }
          paginationSlider_s(el);
        },

        resize: (el) => {
          setTimeout(() => {
            el.update();
            if (auto_height) el.updateAutoHeight();
          }, 100);

          paginationSlider_s(el);

          if (window.innerWidth > 768) {
            const container = el.$el[0].closest('.js--marathon-new__schedule-swiper');
            let stories = null;
            if (container) {
              stories = container.querySelector('.marathon-new-last__schedule-stories');
            }
            if (container && stories) {
              const arrows = container.querySelectorAll('.swiper-slide-arrow__left');
              const width = stories.offsetWidth;
              arrows.forEach(arrow => {
                arrow.style.left = `-${width + 50}px`;
              });
            }
          }
        },
      },
    });

    // === ОБНОВЛЕНИЕ ВЫСОТЫ ПОСЛЕ ЗАГРУЗКИ КАРТИНОК ===
    swiper.on('init', () => {
      waitForImages(item).then(() => {
        if (auto_height) {
          swiper.updateAutoHeight(300);
        } else if (same_height_slides) {
          updateSwiperHeight(swiper);
        } else {
          swiper.update();
        }
        paginationSlider_s(swiper);
      });
    });

    // Отключаем свайп, если слайдов мало
    if (swiper.slides.length <= swiper.params.slidesPerView) {
      swiper.allowTouchMove = false;
    } else {
      swiper.allowTouchMove = true;
    }
  }
}

export default function slideConstructor() {
  appraisalSlider();
}
