a(
  :href="event.link || '#'"
  @click="handleEventLinkClick($event, event.link)"
  class="marathon-2025__event-description"
) {{ event.title }}

methods: {
  // ... остальные методы

  handleEventLinkClick(event, link) {
    // Проверяем, является ли ссылка якорной (#id)
    if (link && link.startsWith('#')) {
      event.preventDefault(); // Отменяем нативный скролл
      
      const targetId = link.substring(1); // Убираем '#'
      const scrollTarget = document.getElementById(targetId);
      
      if (scrollTarget) {
        // Используем твою существующую функцию scrollTo
        this.scrollToElement(scrollTarget, 1);
      }
    }
    // Если это внешняя ссылка — оставляем нативное поведение
  },

  // Копия твоей функции scrollTo с адаптацией под Vue
  scrollToElement(targetElement, flag) {
    if (targetElement) {
      const startPosition = window.pageYOffset;
      const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset;

      let distance;
      if (flag === 0) {
        distance = targetPosition - startPosition - 118;
      } else if (flag === 1) {
        distance = targetPosition - startPosition;
      }

      const duration = 800;
      let startTime = null;

      const animation = (currentTime) => {
        if (startTime === null) startTime = currentTime;
        const timeElapsed = currentTime - startTime;

        const progress = Math.min(timeElapsed / duration, 1);
        const ease = this.easeInOutQuad(progress);

        window.scrollTo(0, startPosition + distance * ease);
        if (timeElapsed < duration) {
          requestAnimationFrame(animation);
        }
      };

      const easeInOutQuad = (t) => {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
      };

      requestAnimationFrame(animation);
    }
  }
}
