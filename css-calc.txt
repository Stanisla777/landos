initRealtySlider() {
  // Проверяем, что значения корректны
  const min = Math.min(this.initial_payment_from_cost, this.stgMax);
  const max = Math.max(this.initial_payment_from_cost, this.stgMax);
  
  // Уничтожаем предыдущий слайдер, если он существует
  if (this.realtySlider && this.realtySlider.destroy) {
    this.realtySlider.destroy();
  }

  try {
    this.realtySlider = noUiSlider.create(this.$refs.mortgageInitialPayment, {
      start: [this.initial_payment_from_cost],
      connect: 'lower',
      step: this.stepApartment,
      range: {
        min: min,
        max: max
      },
    });
    
    // Остальные обработчики событий...
    
  } catch (error) {
    console.error('Error initializing slider:', error);
  }
},

watch: {
  initial_payment_from_cost(newVal) {
    if (!this.realtySlider || !this.realtySlider.updateOptions) return;
    
    const min = Math.min(newVal, this.stgMax);
    const max = Math.max(newVal, this.stgMax);
    
    this.realtySlider.updateOptions({
      range: {
        min: min,
        max: max
      }
    });
    
    if (this.calculating_initial_payment_cost) {
      this.realtySlider.set(newVal);
    }
  },

  stgMax(newVal) {
    if (!this.realtySlider || !this.realtySlider.updateOptions) return;
    
    const min = Math.min(this.initial_payment_from_cost, newVal);
    const max = Math.max(this.initial_payment_from_cost, newVal);
    
    this.realtySlider.updateOptions({
      range: {
        min: min,
        max: max
      }
    });
    
    // Обновляем текущее значение, если оно выходит за новые границы
    const currentValue = parseInt(this.realtySlider.get());
    if (currentValue > newVal) {
      this.realtySlider.set(newVal);
    }
  }
}


beforeDestroy() {
  if (this.realtySlider && this.realtySlider.destroy) {
    this.realtySlider.destroy();
  }
}
