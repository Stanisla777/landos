clickYear(e, dates) {
  let isClicked = false;
  const key_word_this = this;

  const observer = new MutationObserver(function(mutations) {
    for (let mutation of mutations) {
      for (let node of mutation.addedNodes) {
        if (node.nodeType === 1) {
          const monthElements = node.querySelectorAll('.vanilla-calendar-months_month');
          if (monthElements.length > 0) {
            monthElements.forEach(function(monthEl) {
              const monthText = monthEl.textContent.trim().toLowerCase();
              const monthIndex = key_word_this.month.indexOf(monthText);
              const selectedYearEl = document.querySelector('.js-calendar-mobile-shedule .vanilla-calendar-year');
              const year = selectedYearEl ? parseInt(selectedYearEl.textContent, 10) : null;

              if (monthIndex === -1 || year === null) return;

              const dateToCheck = {
                month: monthIndex + 1,
                year: year
              };

              const minDateNum = key_word_this.dateToNumber(key_word_this.minDate);
              const maxDateNum = key_word_this.dateToNumber(key_word_this.maxDate);
              const currentNum = key_word_this.dateToNumber(dateToCheck);

              const isSelected = monthEl.classList.contains('vanilla-calendar-months_month_selected');

              if (currentNum < minDateNum || currentNum > maxDateNum) {
                // Убираем selected, делаем disabled
                monthEl.classList.remove('vanilla-calendar-months_month_selected');
                monthEl.classList.add('vanilla-calendar-months_month_disabled');
                if (isSelected) {
                  // Блокируем клик, если был выбран
                  monthEl.onclick = function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                  };
                }
              } else {
                // Восстанавливаем нормальное поведение
                monthEl.classList.remove('vanilla-calendar-months_month_disabled');
                // Не трогаем selected — пусть календарь сам управляет
              }
            });

            // Отключаем observer после обработки
            observer.disconnect();
            return;
          }
        }
      }
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
}

--------------------------------------------

initPluginCalendarVanilla(month = this.formatMonth(this.min_date_mobile), year = this.formatYear(this.min_date_mobile)) {
  const key_word_this = this;

  // Убедимся, что minDate и maxDate установлены
  let [minYear, minMonth] = this.formatYearMonthMinDate(this.min_date_mobile).split('-');
  let [maxYear, maxMonth] = this.formatYearMonthMaxDate(this.min_date_mobile).split('-');

  this.minDate = { month: parseInt(minMonth), year: parseInt(minYear) };
  this.maxDate = { month: parseInt(maxMonth), year: parseInt(maxYear) };

  const range = {
    min: `${minYear}-${minMonth}`,
    max: `${maxYear}-${maxMonth}`
  };

  const selected = {
    month: month,
    year: year
  };

  const element = document.querySelector('.js-calendar-mobile-shedule');
  if (element !== null) {
    this.parent = element.closest('.js--container-block');
    this.calendarMobile = new VanillaCalendar('.js-calendar-mobile-shedule', {
      type: 'year',
      settings: {
        lang: 'ru',
        range: range,
        selected: selected,
      },
      actions: {
        clickMonth(e, dates) {
          if (dates.length !== 0) {
            const parent = e.target.closest('.js--credit-calendar-input');
            const container = e.target.closest('.js__vanilla-calendar-calc');
            const array_month = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь'];
            let title_year;
            if (container && container.querySelector('.vanilla-calendar-year')) {
              title_year = container.querySelector('.vanilla-calendar-year').textContent;
            }
            if (parent) {
              e.target.closest('.js__vanilla-calendar-calc').classList.remove('active');
              parent.querySelector('input').value = `${array_month[dates.selectedMonth]}, ${dates.selectedYear}`;
              if (e.target.closest('.js--calc-row-input')) {
                e.target.closest('.js--calc-row-input').querySelector('.js--clear-calc-tax').classList.add('active');
              }
            }
            key_word_this.$emit('sendDateMobile', [dates.selectedYear, parseInt(dates.selectedMonth) + 1]);
          }
        },
        clickYear(e, dates) {
          let isClicked = false;
          const observer = new MutationObserver(function(mutations) {
            for (let mutation of mutations) {
              for (let node of mutation.addedNodes) {
                if (node.nodeType === 1) {
                  const monthElements = node.querySelectorAll('.vanilla-calendar-months_month');
                  if (monthElements.length > 0) {
                    monthElements.forEach(function(monthEl) {
                      const monthText = monthEl.textContent.trim().toLowerCase();
                      const monthIndex = key_word_this.month.indexOf(monthText);
                      const selectedYearEl = document.querySelector('.js-calendar-mobile-shedule .vanilla-calendar-year');
                      const year = selectedYearEl ? parseInt(selectedYearEl.textContent, 10) : null;

                      if (monthIndex === -1 || year === null) return;

                      const dateToCheck = {
                        month: monthIndex + 1,
                        year: year
                      };

                      const minDateNum = key_word_this.dateToNumber(key_word_this.minDate);
                      const maxDateNum = key_word_this.dateToNumber(key_word_this.maxDate);
                      const currentNum = key_word_this.dateToNumber(dateToCheck);

                      const isSelected = monthEl.classList.contains('vanilla-calendar-months_month_selected');

                      if (currentNum < minDateNum || currentNum > maxDateNum) {
                        monthEl.classList.remove('vanilla-calendar-months_month_selected');
                        monthEl.classList.add('vanilla-calendar-months_month_disabled');
                        if (isSelected) {
                          monthEl.onclick = function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            return false;
                          };
                        }
                      } else {
                        monthEl.classList.remove('vanilla-calendar-months_month_disabled');
                      }
                    });
                    observer.disconnect();
                    return;
                  }
                }
              }
            }
          });

          observer.observe(document.body, {
            childList: true,
            subtree: true
          });
        }
      }
    });
    this.calendarMobile.init();
  }
},
