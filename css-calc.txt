function fullnessFieldToActiveButton() {
  const forms = document.querySelectorAll('.js--fullness-field');

  forms.forEach(form => {
    const requiredFields = form.querySelectorAll('[required]');
    const submitButton = form.querySelector('.js--button-status-form');

    // Функция проверки заполненности/валидности одного поля
    const isFieldValid = (field) => {
      // Чекбоксы и радио
      if (field.type === 'checkbox' || field.type === 'radio') {
        return field.checked;
      }

      const value = field.value.trim();

      // Пустое поле — невалидно
      if (value === '') {
        return false;
      }

      // Email: проверка по регулярке
      if (field.classList.contains('js--validate-mask-email')) {
        const emailRegex = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;
        return emailRegex.test(value);
      }

      // Телефон: минимум 16 символов (как в "+7 000 000 00 00")
      if (field.classList.contains('js--validate-mask-tel')) {
        return field.value.length >= 16; // именно field.value, без trim(), т.к. пробелы важны
      }

      // Все остальные поля (включая hidden, textarea, обычные input)
      return value !== '';
    };

    const updateButtonState = () => {
      const allValid = Array.from(requiredFields).every(isFieldValid);
      if (allValid) {
        submitButton.classList.remove('disabled');
      } else {
        submitButton.classList.add('disabled');
      }
    };

    // Навешиваем обработчики
    requiredFields.forEach(field => {
      field.addEventListener('input', updateButtonState);
      field.addEventListener('change', updateButtonState); // на случай селектов или чекбоксов
    });

    // Инициализация состояния кнопки
    updateButtonState();
  });
}
