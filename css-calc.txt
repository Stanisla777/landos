initPluginCalendarVanilla(month=this.formatMonth(this.min_date_mobile),year=this.formatYear(this.min_date_mobile)){
  const key_word_this=this
  let range={
    min:key_word_this.formatYearMonthMinDate(key_word_this.min_date_mobile),
    max:key_word_this.formatYearMonthMaxDate(key_word_this.min_date_mobile)
  }
  let selected= {
    month: key_word_this.formatMonth(this.min_date_mobile),
    year:key_word_this.formatYear(this.min_date_mobile)
  }
  
  // Получаем текущую дату
  const currentDate = new Date();
  const currentMonth = currentDate.getMonth() + 1; // +1 потому что в JS месяцы 0-11
  const currentYear = currentDate.getFullYear();
  
  // Проверяем, попадает ли текущий месяц в диапазон
  const isCurrentMonthInRange = (
    (currentYear > parseInt(range.min.split('-')[0]) || 
     (currentYear === parseInt(range.min.split('-')[0]) && currentMonth >= parseInt(range.min.split('-')[1]))) &&
    (currentYear < parseInt(range.max.split('-')[0]) || 
     (currentYear === parseInt(range.max.split('-')[0]) && currentMonth <= parseInt(range.max.split('-')[1])))
  
  // Если текущий месяц не в диапазоне, используем минимальную дату как выбранную
  if (!isCurrentMonthInRange) {
    selected = {
      month: parseInt(range.min.split('-')[1]),
      year: parseInt(range.min.split('-')[0])
    }
  }

  const element = document.querySelector('.js-calendar-mobile-shedule')
  if (element!==null) {
    this.parent = element.closest('.js--container-block')
    this.calendarMobile = new VanillaCalendar('.js-calendar-mobile-shedule', {
      type: 'year',
      settings: {
        lang: 'ru',
        range: range,
        selected: selected,
        visibility: {
          theme: 'light',
        },
      },
      actions: {
        clickMonth(e, dates) {
          if (dates.length !== 0) {
            const parent = e.target.closest('.js--credit-calendar-input');
            const container = e.target.closest('.js__vanilla-calendar-calc')
            const array_month = [ 'январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
            let title_month;
            let title_year;
            if (container && container.querySelector('.vanilla-calendar-year')) {
              title_year = container.querySelector('.vanilla-calendar-year').textContent
            }
            if(parent){
              e.target.closest('.js__vanilla-calendar-calc').classList.remove('active');
              parent.querySelector('input').value = `${array_month[dates.selectedMonth]}, ${dates.selectedYear}`;
              if (e.target.closest('.js--calc-row-input')) {
                e.target.closest('.js--calc-row-input').querySelector('.js--clear-calc-tax').classList.add('active')
              }
            }
            key_word_this.$emit('sendDateMobile',[dates.selectedYear,parseInt(dates.selectedMonth)+1])
          }
        },
        clickYear(e, dates) {
          let isClicked = false
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              const targetElement = document.querySelector(('.js-calendar-mobile-shedule .vanilla-calendar-header__content .vanilla-calendar-month'))
              if (targetElement) {
                if (!isClicked) {
                  targetElement.click()
                  isClicked=true
                  observer.disconnect()
                }
              }
            })
          })
          observer.observe(document.body, {
            childList: true,
            subtree: true
          })
        }
      }
    })
    this.calendarMobile.init();
  }
},
