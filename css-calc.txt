<script>
import eventBus from '../development-tools/eventBus.vue';
import Storage from '../development-tools/state.vue';
import VanillaCalendar from '../../vanilla-calendar2';
import numberFormatting from '../mixin/numberFormatting.js';

export default {
  name: 'v-2-component-calendar',
  mixins: [numberFormatting],
  data() {
    return {
      calendarMobile: null,
      parent: null,
      month: ["январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь"],
      minDate: { month: 1, year: 1995 },
      maxDate: { month: 12, year: 2026 }
    };
  },
  methods: {
    initPluginCalendarVanilla(month = this.formatMonth(this.min_date_mobile), year = this.formatYear(this.min_date_mobile)) {
      const key_word_this = this;
      const range = {
        min: this.formatYearMonthMinDate(this.min_date_mobile),
        max: this.formatYearMonthMaxDate(this.min_date_mobile)
      };

      const element = document.querySelector('.js-calendar-mobile-shedule');
      if (element !== null) {
        this.parent = element.closest('.js--container-block');

        // Уничтожаем старый экземпляр
        if (this.calendarMobile) {
          this.calendarMobile.destroy();
          this.calendarMobile = null;
        }

        this.calendarMobile = new VanillaCalendar('.js-calendar-mobile-shedule', {
          type: 'year',
          settings: {
            lang: 'ru',
            range: range,
            selected: {
              month: month,
              year: year
            },
          },
          actions: {
            clickMonth(e, dates) {
              if (dates.length !== 0) {
                const parent = e.target.closest('.js--credit-calendar-input');
                const container = e.target.closest('.js__vanilla-calendar-calc');
                const array_month = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь'];

                if (parent) {
                  container.classList.remove('active');
                  const input = parent.querySelector('input');
                  if (input) {
                    input.value = `${array_month[dates.selectedMonth]}, ${dates.selectedYear}`;
                  }
                  const clearBtnParent = parent.closest('.js--calc-row-input');
                  if (clearBtnParent) {
                    const clearBtn = clearBtnParent.querySelector('.js--clear-calc-tax');
                    if (clearBtn) {
                      clearBtn.classList.add('active');
                    }
                  }
                }

                key_word_this.$emit('sendDateMobile', [dates.selectedYear, parseInt(dates.selectedMonth) + 1]);
              }
            },
            clickYear(e, dates) {
              let isClicked = false;
              const observer = new MutationObserver((mutations) => {
                for (const mutation of mutations) {
                  const targetElement = document.querySelector('.js-calendar-mobile-shedule .vanilla-calendar-header__content .vanilla-calendar-month');
                  if (targetElement && !isClicked) {
                    targetElement.click();
                    isClicked = true;
                    observer.disconnect();
                    break;
                  }
                }
              });
              observer.observe(document.body, { childList: true, subtree: true });
            }
          }
        });

        this.calendarMobile.init();

        // После инициализации — обновляем стили
        this.$nextTick(() => {
          this.disableOutOfRangeMonths();
        });
      }
    },

    // Основная функция: отключает месяцы вне диапазона
    disableOutOfRangeMonths() {
      const calendarContainer = document.querySelector('.js-calendar-mobile-shedule');
      if (!calendarContainer) return;

      // Ждём, пока календарь полностью отрисуется
      const monthElems = calendarContainer.querySelectorAll('.vanilla-calendar-month');
      const yearElem = calendarContainer.querySelector('.vanilla-calendar-year');

      if (monthElems.length === 0 || !yearElem) {
        // Повторяем через 50мс, если ещё не готово
        setTimeout(() => this.disableOutOfRangeMonths(), 50);
        return;
      }

      const displayYearText = yearElem.textContent.trim();
      const displayYear = parseInt(displayYearText, 10);
      if (isNaN(displayYear)) return;

      // Создаём граничные даты
      const minDate = new Date(this.minDate.year, this.minDate.month - 1); // 0-based month
      const maxDate = new Date(this.maxDate.year, this.maxDate.month - 1);

      monthElems.forEach((el, index) => {
        const testDate = new Date(displayYear, index); // index — это номер месяца (0-11)

        const isOutOfRange = testDate < minDate || testDate > maxDate;

        if (isOutOfRange) {
          el.style.pointerEvents = 'none';
          el.style.opacity = '0.4';
          el.style.cursor = 'not-allowed';
          el.classList.add('disabled-by-range');
        } else {
          el.style.pointerEvents = '';
          el.style.opacity = '';
          el.style.cursor = '';
          el.classList.remove('disabled-by-range');
        }
      });
    },

    showCalendar(el) {
      const element = el.currentTarget;
      document.querySelectorAll('.js__vanilla-calendar-calc').forEach(item => {
        item.classList.remove('active');
      });

      const parent = element.closest('.js--credit-calendar-input');
      if (!parent) return;

      const calendarBlock = parent.querySelector('.js__vanilla-calendar-calc');
      if (calendarBlock) {
        calendarBlock.classList.add('active');
      }

      // После открытия — обновляем отключение месяцев
      this.$nextTick(() => {
        this.disableOutOfRangeMonths();
      });
    },

    CalendarVanillaClose() {
      let count = 0;
      document.body.onclick = () => {
        const array_parent = document.querySelectorAll('.js--credit-calendar-input');
        const array_element = document.querySelectorAll('.js__vanilla-calendar-calc.active');

        array_parent.forEach(item => {
          item.onclick = (w) => w.stopImmediatePropagation();
        });

        if (count > 0) {
          array_element.forEach(el => el.classList.remove('active'));
        }
        count++;
      };
    },

    // Остальные методы без изменений
    fieldNotEmpty(e) {
      const element = e.currentTarget || e;
      const parent = element.closest('.js--calc-row-input');
      if (parent && element.value.length > 0) {
        const clearBtn = parent.querySelector('.js--clear-calc-tax');
        if (clearBtn) {
          clearBtn.classList.add('active');
        }
      } else {
        const clearBtn = parent && parent.querySelector('.js--clear-calc-tax');
        if (clearBtn) {
          clearBtn.classList.remove('active');
        }
      }
    },

    clearInputCalendar(e) {
      const element = e.currentTarget;
      const parent = element.closest('.js--tex-deduc-input');
      if (parent) {
        const input = parent.querySelector('input');
        if (input) {
          input.value = '';
          input.classList.remove('active');
        }
        element.classList.remove('active');
      }
    },

    changeDate(e) {
      const target = e.target;
      let
