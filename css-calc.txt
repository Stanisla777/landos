<script>
import eventBus from '../development-tools/eventBus.vue';
import Storage from '../development-tools/state.vue';

import VanillaCalendar from '../../vanilla-calendar2';
import numberFormatting from '../mixin/numberFormatting.js';

let maskCalendarMortgageData;

export default {
  name: 'v-2-component-calendar',
  mixins: [numberFormatting],
  data() {
    return {
      calendarMobile: null,
      parent: null,
      month: ["январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь"],
      minDate: { month: 1, year: 1995 },
      maxDate: { month: 12, year: 2026 }
    };
  },
  methods: {
    initPluginCalendarVanilla(month = this.formatMonth(this.min_date_mobile), year = this.formatYear(this.min_date_mobile)) {
      const key_word_this = this;

      // Формируем диапазон
      let range = {
        min: key_word_this.formatYearMonthMinDate(key_word_this.min_date_mobile),
        max: key_word_this.formatYearMonthMaxDate(key_word_this.min_date_mobile)
      };

      const element = document.querySelector('.js-calendar-mobile-shedule');
      if (element === null) return;

      this.parent = element.closest('.js--container-block');

      // Уничтожаем предыдущий экземпляр
      if (this.calendarMobile) {
        this.calendarMobile.destroy();
      }

      this.calendarMobile = new VanillaCalendar('.js-calendar-mobile-shedule', {
        type: 'year',
        settings: {
          lang: 'ru',
          range: range,
          selected: {
            month: month,
            year: year
          },
        },
        actions: {
          clickMonth(e, dates) {
            if (dates.length !== 0) {
              const parent = e.target.closest('.js--credit-calendar-input');
              const container = e.target.closest('.js__vanilla-calendar-calc');
              const array_month = ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь'];
              let title_year;

              if (container && container.querySelector('.vanilla-calendar-year')) {
                title_year = container.querySelector('.vanilla-calendar-year').textContent;
              }

              if (parent) {
                e.target.closest('.js__vanilla-calendar-calc').classList.remove('active');
                parent.querySelector('input').value = `${array_month[dates.selectedMonth]}, ${dates.selectedYear}`;
                const clearBtn = parent.querySelector('.js--clear-calc-tax');
                if (clearBtn && e.target.closest('.js--calc-row-input')) {
                  clearBtn.classList.add('active');
                }
              }
              key_word_this.$emit('sendDateMobile', [dates.selectedYear, parseInt(dates.selectedMonth) + 1]);
            }
          },
          clickYear(e, dates) {
            let isClicked = false;
            const observer = new MutationObserver((mutations) => {
              mutations.forEach(() => {
                const targetElement = document.querySelector('.js-calendar-mobile-shedule .vanilla-calendar-header__content .vanilla-calendar-month');
                if (targetElement && !isClicked) {
                  targetElement.click();
                  isClicked = true;
                  observer.disconnect();
                }
              });
            });
            observer.observe(document.body, {
              childList: true,
              subtree: true
            });
          }
        }
      });

      this.calendarMobile.init();

      // === ПОСТ-ОБРАБОТКА: Отключаем месяцы вне диапазона ===
      this.disableOutOfRangeMonths();
    },

    // Основной метод: отключает месяцы вне min/max диапазона
    disableOutOfRangeMonths() {
      const calendarEl = document.querySelector('.js-calendar-mobile-shedule');
      if (!calendarEl) return;

      const monthEls = calendarEl.querySelectorAll('.vanilla-calendar-months__month');
      const yearText = calendarEl.querySelector('.vanilla-calendar-year')?.textContent?.trim();

      if (!yearText) return;

      const currentYear = parseInt(yearText, 10);
      if (isNaN(currentYear)) return;

      const minNum = this.dateToNumber(this.minDate);
      const maxNum = this.dateToNumber(this.maxDate);

      monthEls.forEach((monthEl, index) => {
        const monthIndex = index; // 0 = январь
        const dateObj = { year: currentYear, month: monthIndex + 1 };
        const dateNum = this.dateToNumber(dateObj);

        if (dateNum < minNum || dateNum > maxNum) {
          // Убираем кликабельность
          monthEl.style.pointerEvents = 'none';
          // Добавляем класс для стилизации (необязательно, но хорошо для CSS)
          monthEl.classList.add('vanilla-calendar-months__month--disabled');
        } else {
          monthEl.style.pointerEvents = ''; // возвращаем
          monthEl.classList.remove('vanilla-calendar-months__month--disabled');
        }
      });
    },

    // Остальные методы без изменений
    CalendarVanillaClose() {
      let count = 0;
      document.body.onclick = () => {
        const array_parent = document.querySelectorAll('.js--credit-calendar-input');
        const array_element = document.querySelectorAll('.js__vanilla-calendar-calc.active');
        for (const item of array_parent) {
          item.onclick = function (w) {
            w.stopImmediatePropagation();
          };
        }
        if (count > 0) {
          for (let i = 0; i < array_element.length; i++) {
            array_element[i].classList.remove('active');
          }
        }
        if (count < 1) {
          count += 1;
        }
      };
    },

    fieldNotEmpty(e) {
      let element;
      if (e instanceof Event) {
        element = e.currentTarget;
      } else if (e instanceof HTMLElement) {
        element = e;
      }

      const parent = element.closest('.js--calc-row-input');
      if (parent) {
        if (element.value.length > 0) {
          parent.querySelector('.js--clear-calc-tax').classList.add('active');
        } else {
          parent.querySelector('.js--clear-calc-tax').classList.remove('active');
        }
      }
    },

    clearInputCalendar(e) {
      const element = e.currentTarget;
      const parent = element.closest('.js--tex-deduc-input');
      if (parent) {
        parent.querySelector('input').value = '';
        parent.querySelector('input').classList.remove('active');
        element.classList.remove('active');
      }
    },

    changeDate(e) {
      const target = e.target;
      let value = target.value.replace(/[^\d.]/g, '');
      let parts = value.split('.');
      let monthPart = parts[0].substring(0, 2);
      let yearPart = parts[1] ? parts[1].substring(0, 4) : '';
      let newValue = monthPart;
      if (monthPart.length >= 2 || (parts.length > 1 && yearPart.length > 0)) {
        newValue += '.' + yearPart;
      }
      if (newValue !== target.value) {
        const cursorPos = target.selectionStart;
        target.value = newValue;
        target.setSelectionRange(cursorPos, cursorPos);
      }
      if (target.value.length === 3 && newValue[2] === '.') {
        target.setSelectionRange(3, 3);
      }
      if (target.value.replace(/(_|\s)+/g, "").length === 7) {
        let [monthStr, yearStr] = e.target.value.split('.');
        let month = parseInt(monthStr, 10) || 0;
        let year = parseInt(yearStr, 10) || 0;
        if (month < 1 || month > 12) month = Math.min(Math.max(month, 1), 12);
        if (year < this.minDate.year) {
          year = this.minDate.year;
          month = this.minDate.month;
        } else if (year > this.maxDate.year) {
          year = this.maxDate.year;
          month = this.maxDate.month;
        }
        if (year === this.minDate.year) month = Math.max(month, this.minDate.month);
        if (year === this.maxDate.year) month = Math.min(month, this.maxDate.month);
        const current = { month, year };
        if (this.dateToNumber(current) < this.dateToNumber(this.minDate)) {
          Object.assign(current, this.minDate);
        } else if (this.dateToNumber(current) > this.dateToNumber(this.maxDate)) {
          Object.assign(current, this.maxDate);
        }
        e.target.value = this.formatDate(current.month, current.year);
        setTimeout(() => {
          this.$emit('sendDateMobile', [current.year, parseInt(current.month)]);
        }, 400);
      }

      if (target.value.replace(/(_|\s)+/g, "").length === 7 && target.value.replace(/(_|\s)+/g, "").substr(3, 6) <= new Date().getFullYear()) {
        const month = parseInt(target.value.replace(/(_|\s)+/g, "").substr(0, 2) - 1);
        const year = target.value.replace(/(_|\s)+/g, "").substr(3, 6);
        this.calendarMobile.destroy();
        this.calendarMobile = null;
        this.initPluginCalendarVanilla(month, year);
        setTimeout(() => {
          target.closest('.js--credit-calendar-input').querySelector('.js__vanilla-calendar-calc').classList.remove('active');
        }, 300);
      }
    },

    showCalendar(el) {
      const element = el.currentTarget;
      const array_calendar = document.querySelectorAll('.js__vanilla-calendar-calc');
      for (let item of array_calendar) {
        item.classList.remove('active');
      }
      element.closest('.js--credit-calendar-input').querySelector('.js__vanilla-calendar-calc').classList.add('active');
    },

    formatMonth(dateStr) {
      if (dateStr !== null) {
        let [year, month] = dateStr.split('-');
        month = parseInt(month) + 1;
        if (month === 13) {
          month = 1;
        }
        return month;
      }
    },

    formatYear(dateStr) {
      if (dateStr !== null) {
        let [year] = dateStr.split('-');
        return year;
      }
    },

    formatYearMonthMinDate(dateStr) {
      if (dateStr !== null) {
        let [year, month] = dateStr.split('-');
        month = parseInt(month) + 2;
        if (month === 13) {
          month = 1;
          year = parseInt(year) + 1;
        }
        if (month === 14) {
          month = 2;
          year = parseInt(year) + 1;
        }
        const formattedMonth = month.toString().padStart(2, '0');
        return `${year}-${formattedMonth}`;
      }
    },

    formatYearMonthMaxDate(dateStr) {
      if (this.loanTerm !== 0) {
        let [year, month] = dateStr.split('-');
        const date = new Date(year, month, 1);
        date.setMonth(date.getMonth() + 1 + this.loanTerm);
        let newMonth = date.getMonth();
        let newYear = date.getFullYear();
        let formattedMonth, yearFun;
        if (newMonth === 0) {
          formattedMonth = "12";
          yearFun = newYear - 1;
        } else {
          formattedMonth = newMonth.toString().padStart(2, '0');
          yearFun = newYear;
        }
        return `${yearFun}-${formattedMonth}`;
      } else {
        return `${new Date().getFullYear() + 1}-12`;
      }
    },

    resetCalendar() {
      this.calendarMobile.destroy();
      this.calendarMobile = null;
      this.initPluginCalendarVanilla(new Date().getMonth(), new Date().getFullYear());
    },

    replaceMonth(e) {
      let element;
      if (e instanceof Event) {
        element = e.currentTarget;
      } else if (e instanceof HTMLElement) {
        element = e;
      }
      const value = element.value.trim();
      const parts = value.split('.');
      if (parts.length !== 2) return;
      const monthPart = parts[0].trim();
      const yearPart = parts[1].trim();
      const monthNumber = parseInt(monthPart, 10);
      if (isNaN(monthNumber) || monthNumber < 1 || monthNumber > 12) return;
      element.value = `${this.month[monthNumber - 1]}, ${yearPart}`;
    },

    inputKeyDown(e) {
      const target = e.target;
      if (e.key === 'Backspace' && target.selectionStart === 3) {
        target.setSelectionRange(2, 2);
      }
    },

    replaceMonthFocus(e) {
      let element;
      if (e instanceof Event) {
        element = e.currentTarget;
      } else if (e instanceof HTMLElement) {
        element = e;
      }
      const currentValue = element.value;
      const parts = currentValue.split(', ');
      if (parts.length === 2) {
        const [monthName, year] = parts;
        const monthIndex = this.month.indexOf(monthName);
        if (monthIndex !== -1 && year.length === 4) {
          element.value = `${String(monthIndex + 1).padStart(2, '0')}.${year}`;
        }
      }
    },

    formattedDateInput(param) {
      const parts = param.split('-');
      const year = parseInt(parts[0], 10);
      const monthNumber = parseInt(parts[1], 10);
      if (isNaN(monthNumber)) return;
      if (monthNumber + 2 === 12) {
        return `${this.month[1]}, ${year + 1}`;
      } else if (monthNumber + 2 === 13) {
        return `${this.month[2]}, ${year + 1}`;
      } else if (monthNumber + 2 < 12) {
        return `${this.month[monthNumber + 2]}, ${year}`;
      }
    },

    inputBlur(e) {
      const target = e.target;
      let [monthStr, yearStr] = e.target.value.split('.');
      if (!monthStr || !yearStr || monthStr.length !== 2 || yearStr.length !== 4) {
        e.target.value = '';
      }
      this.replaceMonth(target);
    },

    formatDate(month, year) {
      return `${String(month).padStart(2, '0')}.${String(year).padStart(4, '0')}`;
    },

    dateToNumber(date) {
      return date.year * 12 + (date.month - 1);
    }
  },
  mounted() {
    // Можно вызвать здесь, если нужно
    // this.initPluginCalendarVanilla();
    // this.CalendarVanillaClose();
  },
  computed: {
    loanTerm() {
      return Storage.getters.TIMECREDIT;
    },
    min_date_mobile() {
      return Storage.getters.MINDATEMOBILE;
    }
  },
  watch: {
    min_date_mobile() {
      this.initPluginCalendarVanilla();
      this.CalendarVanillaClose();

      let [year, month] = this.formatYearMonthMinDate(this.min_date_mobile).split('-');
      let [yearMax, monthMax] = this.formatYearMonthMaxDate(this.min_date_mobile).split('-');

      this.minDate.month = parseInt(month);
      this.minDate.year = parseInt(year);
      this.maxDate.month = parseInt(monthMax);
      this.maxDate.year = parseInt(yearMax);
    },
    loanTerm() {
      this.initPluginCalendarVanilla();
      this.CalendarVanillaClose();

      let [year, month] = this.formatYearMonthMinDate(this.min_date_mobile).split('-');
      let [yearMax, monthMax] = this.formatYearMonthMaxDate(this.min_date_mobile).split('-');

      this.minDate.month = parseInt(month);
      this.minDate.year = parseInt(year);
      this.maxDate.month = parseInt(monthMax);
      this.maxDate.year = parseInt(yearMax);
    }
  },
  components: {},
  created() {}
};
</script>

.vanilla-calendar-months__month--disabled {
  opacity: 0.4;
  pointer-events: none;
  cursor: not-allowed;
}
