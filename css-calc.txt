methods: {
  // ... остальные методы ...

  disableOutOfRangeMonths() {
    const calendarContainer = document.querySelector('.js-calendar-mobile-shedule');
    if (!calendarContainer) return;

    // Подождать, пока календарь отрендерит месяцы
    const observer = new MutationObserver(() => {
      const monthElems = calendarContainer.querySelectorAll('.vanilla-calendar-month');
      if (monthElems.length === 0) return;

      observer.disconnect();

      const minYear = this.minDate.year;
      const minMonth = this.minDate.month - 1; // календарь использует 0-индекс
      const maxYear = this.maxDate.year;
      const maxMonth = this.maxDate.month - 1;

      const currentYearElem = calendarContainer.querySelector('.vanilla-calendar-year');
      if (!currentYearElem) return;
      const displayYear = parseInt(currentYearElem.textContent.trim(), 10);

      monthElems.forEach((el, index) => {
        const monthIndex = index; // 0 = январь, 11 = декабрь
        const date = new Date(displayYear, monthIndex);

        const minDate = new Date(minYear, minMonth);
        const maxDate = new Date(maxYear, maxMonth);
        const currentDate = new Date(displayYear, monthIndex);

        const isOutOfRange = currentDate < minDate || currentDate > maxDate;

        if (isOutOfRange) {
          el.style.pointerEvents = 'none';
          el.style.opacity = '0.4';
          el.style.cursor = 'not-allowed';
        } else {
          el.style.pointerEvents = '';
          el.style.opacity = '';
          el.style.cursor = '';
        }
      });
    });

    observer.observe(calendarContainer, {
      childList: true,
      subtree: true
    });
  },

  showCalendar(el) {
    const element = el.currentTarget;
    const array_calendar = document.querySelectorAll('.js__vanilla-calendar-calc');
    for (let item of array_calendar) {
      item.classList.remove('active');
    }
    const calendarBlock = element.closest('.js--credit-calendar-input').querySelector('.js__vanilla-calendar-calc');
    calendarBlock.classList.add('active');

    // Запускаем отключение месяцев после рендера
    this.$nextTick(() => {
      setTimeout(() => {
        this.disableOutOfRangeMonths();
      }, 100);
    });
  },

  // Также вызывать после инициализации
  initPluginCalendarVanilla(month = this.formatMonth(this.min_date_mobile), year = this.formatYear(this.min_date_mobile)) {
    // ... существующий код инициализации ...

    this.calendarMobile.init();

    // После инициализации тоже проверить
    this.$nextTick(() => {
      setTimeout(() => {
        this.disableOutOfRangeMonths();
      }, 150);
    });
  }
}

-----------------------------------------------------------------------
