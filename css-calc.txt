errorMessage() {
  // Приводим значения к строке, если они не строка, и убираем пробелы
  const totalStr = String(this.total_calculate); // -> гарантированно строка
  const deductionStr = String(this.dataField_deduction); // -> гарантированно строка

  // Убираем все пробелы
  const totalNum = parseInt(totalStr.replace(/\s/g, ''), 10) || 0;
  const deductionNum = parseInt(deductionStr.replace(/\s/g, ''), 10) || 0;

  let shouldShowError = false;

  // Правило 1: Вычеты > максимально возможного лимита
  if (totalNum > 0 && deductionNum > 0 && totalNum > deductionNum) {
    shouldShowError = true;
  }
  // Правило 2: Есть вычеты, но доходы не указаны (лимит = 0)
  else if (totalNum > 0 && deductionNum === 0) {
    shouldShowError = true;
  }
  // Правило 3: КЛЮЧЕВОЕ ИСПРАВЛЕНИЕ — очистили вычеты, но доходы были
  // Это НЕ ошибка! Предупреждение должно исчезнуть.
  else if (totalNum === 0 && deductionNum > 0) {
    shouldShowError = false;
  }
  // Все остальные случаи — ошибки нет
  else {
    shouldShowError = false;
  }

  this.$nextTick(() => {
    this.error_message = shouldShowError;
  });
},
