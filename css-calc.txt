getDaysInGrid() {
  const days = [];
  const firstDay = new Date(this.currentYear, this.currentMonth, 1).getDay(); // 0 = вс
  const daysInMonth = new Date(this.currentYear, this.currentMonth + 1, 0).getDate();

  // ——— Дни предыдущего месяца ———
  const prevMonth = this.currentMonth === 0 ? 11 : this.currentMonth - 1;
  const prevYear = this.currentMonth === 0 ? this.currentYear - 1 : this.currentYear;
  const daysInPrevMonth = new Date(prevYear, prevMonth + 1, 0).getDate();

  const prevDaysCount = firstDay === 0 ? 6 : firstDay - 1;

  for (let i = 0; i < prevDaysCount; i++) {
    const dayNumber = daysInPrevMonth - (prevDaysCount - 1 - i);
    const date = new Date(prevYear, prevMonth, dayNumber);
    const dateStr = this.formatDateForData(date);
    const normalizedDate = this.normalizeDate(dateStr);
    const eventItem = this.events.find(e => this.normalizeDate(e.date) === normalizedDate);

    days.push({
      number: dayNumber,
      date: dateStr,
      isPrevMonth: true,
      isNextMonth: false,
      hasEvents: !!eventItem,
      events: eventItem ? eventItem.events : [],
      month: prevMonth, // ← добавляем месяц
      year: prevYear     // ← и год
    });
  }

  // ——— Дни текущего месяца ———
  for (let day = 1; day <= daysInMonth; day++) {
    const date = new Date(this.currentYear, this.currentMonth, day);
    const dateStr = this.formatDateForData(date);
    const normalizedDate = this.normalizeDate(dateStr);
    const eventItem = this.events.find(e => this.normalizeDate(e.date) === normalizedDate);

    days.push({
      number: day,
      date: dateStr,
      isPrevMonth: false,
      isNextMonth: false,
      hasEvents: !!eventItem,
      events: eventItem ? eventItem.events : [],
      month: this.currentMonth, // ← текущий месяц
      year: this.currentYear     // ← текущий год
    });
  }

  // ——— Дни следующего месяца ———
  const nextMonth = this.currentMonth === 11 ? 0 : this.currentMonth + 1;
  const nextYear = this.currentMonth === 11 ? this.currentYear + 1 : this.currentYear;

  while (days.length < 42) {
    const dayNumber = days.length - daysInMonth - prevDaysCount + 1;
    const date = new Date(nextYear, nextMonth, dayNumber);
    const dateStr = this.formatDateForData(date);
    const normalizedDate = this.normalizeDate(dateStr);
    const eventItem = this.events.find(e => this.normalizeDate(e.date) === normalizedDate);

    days.push({
      number: dayNumber,
      date: dateStr,
      isPrevMonth: false,
      isNextMonth: true,
      hasEvents: !!eventItem,
      events: eventItem ? eventItem.events : [],
      month: nextMonth, // ← следующий месяц
      year: nextYear     // ← следующий год
    });
  }

  // Разбиваем на недели
  const weeks = [];
  for (let i = 0; i < days.length; i += 7) {
    weeks.push(days.slice(i, i + 7));
  }

  // Фильтруем недели — оставляем только те, где есть хотя бы один день текущего месяца
  const filteredWeeks = weeks.filter(week => {
    return week.some(day => day.month === this.currentMonth && day.year === this.currentYear);
  });

  // Возвращаем плоский массив
  return filteredWeeks.flat();
}
