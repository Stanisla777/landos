async smoothScrollToElement(element) {
  const container = this.$refs.mobileShedule;
  
  // Вычисляем все необходимые позиции
  const elementRect = element.getBoundingClientRect();
  const containerRect = container.getBoundingClientRect();
  
  // Вычисляем конечную позицию скролла внутри контейнера
  const relativeTop = elementRect.top - containerRect.top;
  const targetContainerScroll = container.scrollTop + relativeTop - 20;
  
  // Проверяем, виден ли элемент в контейнере
  const isElementVisibleInContainer = 
    relativeTop >= 0 && 
    (relativeTop + elementRect.height) <= containerRect.height;
  
  // Проверяем, виден ли контейнер полностью
  const isContainerFullyVisible = this.isElementFullyInViewport(container);
  
  if (!isContainerFullyVisible) {
    // Вычисляем позицию скролла страницы, чтобы контейнер был виден
    // и элемент был доступен для скролла внутри контейнера
    const containerTopRelativeToViewport = containerRect.top - window.scrollY;
    const containerBottomRelativeToViewport = containerRect.bottom - window.scrollY;
    const viewportHeight = window.innerHeight || document.documentElement.clientHeight;
    
    let targetWindowScroll;
    
    if (containerRect.height > viewportHeight) {
      // Если контейнер выше viewport, скроллим к его началу
      targetWindowScroll = window.scrollY + containerRect.top - 20;
    } else {
      // Иначе центрируем контейнер в viewport
      targetWindowScroll = window.scrollY + containerRect.top - ((viewportHeight - containerRect.height) / 2);
    }
    
    // Анимируем скролл страницы и контейнера одновременно
    await Promise.all([
      this.animateScroll(window, targetWindowScroll, 600),
      this.animateScroll(container, targetContainerScroll, 600)
    ]);
  } else if (!isElementVisibleInContainer) {
    // Если контейнер виден, но элемент нет - скроллим только контейнер
    await this.animateScroll(container, targetContainerScroll, 600);
  }
  // Если и контейнер и элемент видны - ничего не делаем
},

isElementFullyInViewport(el) {
  const rect = el.getBoundingClientRect();
  const viewportHeight = window.innerHeight || document.documentElement.clientHeight;
  
  return (
    rect.top >= 0 &&
    rect.bottom <= viewportHeight
  );
},
