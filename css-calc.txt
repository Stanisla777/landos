exportToPDF() {
      // === ВСТАВЬТЕ СЮДА ВАШИ BASE64-СТРОКИ ДЛЯ GILROY ===
      // const gilroyMediumBase64 = '...'; // Gilroy-Medium.ttf в base64
      // const gilroySemiBoldBase64 = '...'; // Gilroy-SemiBold.ttf в base64

      pdfMake.fonts = {
        Manrope: {
          normal: monropeMediumBase64,      // Medium → normal
          bold: monropeSemiBoldBase64,      // SemiBold → bold
          italics: monropeMediumBase64,
          bolditalics: monropeSemiBoldBase64
        }
      };

      console.log('First 10 chars:', monropeMediumBase64.substring(0, 10)); // должно быть "AAEAAA"
      console.log('Last 10 chars:', monropeMediumBase64.substring(monropeMediumBase64.length - 10)); // не должно быть "\n" или " "
      console.log('Contains newline:', monropeMediumBase64.includes('\n')); // должно быть false
      console.log('Length:', monropeMediumBase64.length); // должно быть > 500000


      const docDefinition = {
        pageSize: 'A4',
        pageMargins: [40, 80, 40, 40],

        header: (currentPage) => {
          if (currentPage === 1) {
            return {
              columns: [
                {
                  stack: [
                    { text: 'Калькулятор', style: 'headerTitle' },
                    {
                      text: 'досрочного погашения',
                      background: '#daff01',
                      style: 'headerTitleHighlighted'
                    },
                    { text: 'ипотеки', style: 'headerTitle' }
                  ]
                },
                {
                  image: 'logo',
                  width: 104,
                  alignment: 'right'
                }
              ],
              margin: [40, 20, 40, 16]
            };
          }
          return {};
        },

        content: [
          {
            columns: [
              {
                text: `Расчет платежей от ${this.currentDate}`,
                style: 'metaText',
                width: '*'
              },
              {
                text: 'Сделать новый расчет',
                link: 'https://xn--h1alcedd.xn--d1aqf.xn--p1ai/calculators/kalkulyator-dosrochnogo-pogasheniya-ipoteki/',
                style: 'link',
                width: 'auto',
                alignment: 'right'
              }
            ],
            margin: [0, 0, 0, 16]
          },

          this.createInfoBlock('Расчет носит справочный характер и не может быть основанием для совершения юридически значимых действий'),

          this.createSectionBox(this.createMortgageSection(), 290),
          this.createSectionBox(this.createRepaymentSection(), 275),
          (this.holidays_term && this.holidays_term !== 0)
            ? this.createSectionBox(this.createHolidaysSection(), 160)
            : {}
        ],

        images: {
          logo: logoBase64,
          iconSymbol: iconSymbolBase64
        },

        styles: {
          // Шапка
          headerTitle: {
            fontSize: 17,        // 22px → 16.5 → 17pt
            bold: true,          // Manrope-SemiBold
            color: '#252628'
          },
          headerTitleHighlighted: {
            fontSize: 17,
            bold: true,
            color: '#252628'
          },

          // Метка времени и ссылка
          metaText: {
            fontSize: 12,        // 16px → 12pt
            bold: true,          // SemiBold
            color: '#252628'
          },
          link: {
            fontSize: 11,        // 14px → 10.5 → 11pt
            bold: true,          // SemiBold
            color: '#252628',
            decoration: 'underline'
          },

          // Блок "Расчёт носит справочный характер"
          infoText: {
            fontSize: 11,        // 14px → 11pt
            font: 'Manrope',      // Medium
            color: '#252628'
          },

          // Заголовки секций
          sectionTitle: {
            fontSize: 15,        // 20px → 15pt
            bold: true,          // SemiBold
            color: '#252628',
            margin: [0, 0, 0, 18] // mt24 → 18pt
          },

          // Метки полей: "Сумма кредита, ₽"
          label: {
            fontSize: 11,        // 14px → 11pt
            bold: true,          // SemiBold
            color: '#6d6d6d',
            margin: [0, 0, 0, 6] // mb8 → 6pt
          },

          // Значения в закруглённых блоках
          dataValue: {
            fontSize: 11,        // 14px → 11pt
            bold: true,          // SemiBold
            color: '#252628'
          },

          // Тип платежа: "Аннуитетный"
          paymentTypeValue: {
            fontSize: 11,        // 14px → 11pt
            font: 'Manrope',      // Medium
            color: '#252628'
          },

          // Результаты: "Вы закроете ипотеку"
          resultLabel: {
            fontSize: 11,        // 14px → 11pt
            bold: true,          // SemiBold
            color: '#6d6d6d',
            margin: [0, 0, 0, 6] // mb8 → 6pt
          },

          // Основной текст результатов
          resultValue: {
            fontSize: 12,        // 16px → 12pt
            bold: true,          // SemiBold
            color: '#252628'
          },

          // Зелёный текст: "Экономия"
          resultValueGreen: {
            fontSize: 12,
            bold: true,
            color: '#699b12'
          },

          // Доп. текст: "Раньше на..."
          additionalText: {
            fontSize: 9,         // 12px → 9pt
            font: 'Manrope',      // Medium
            color: '#699b12',
            margin: [0, 2, 0, 0] // mt2 → 2pt
          }
        },

        defaultStyle: {
          font: 'Manrope',        // вместо Roboto
          fontSize: 10
        }
      };

      pdfMake.createPdf(docDefinition).download('расчёт-ипотеки.pdf');
    },
    createMortgageBlock() {
  return {
    stack: [
      {
        columns: [
          {
            width: '*',
            stack: [
              { text: 'Сумма кредита, ₽', style: 'label' },
              this.createDataBlock(this.$options.filters.format_decimal(this.loanAmount))
            ]
          },
          {
            width: '*',
            stack: [
              { text: 'Дата получения', style: 'label' },
              this.createDataBlock(`${this.$options.filters.capitalize(this.obj_month[this.startMonth - 1])} ${this.startYear}`)
            ]
          }
        ],
        columnGap: 18, // 24px → 18pt
        margin: [0, 0, 0, 18] // mt24 → 18pt
      },
      {
        columns: [
          {
            width: '*',
            stack: [
              { text: 'Ставка, %', style: 'label' },
              this.createDataBlock(this.$options.filters.replace_point(this.annualInterestRate))
            ]
          },
          {
            width: '*',
            stack: [
              { text: 'Срок кредита', style: 'label' },
              this.createDataBlock(this.formattedTerm)
            ]
          }
        ],
        columnGap: 18,
        margin: [0, 0, 0, 18]
      },
      {
        columns: [
          {
            width: '*',
            stack: [
              {
                text: [
                  { text: 'Тип платежа: ', style: 'label' },
                  {
                    text: this.state.payment_type === 'annuity' ? 'Аннуитетный' : 'Дифференцированный',
                    style: 'paymentTypeValue' // ← обновлённый стиль
                  }
                ]
              }
            ]
          }
        ],
        columnGap: 18
      }
    ]
  };
},
    createRepaymentBlock() {
  const ri = this.repayment_information;
  const hasEarly = this.array_early_repayment.length > 0;
  const isAnnuity = this.state.payment_type === 'annuity';

  let paymentText = '';
  if (hasEarly) {
    if (ri.monthly_payment_min === ri.monthly_payment_max) {
      paymentText = `${this.$options.filters.format_decimal(ri.monthly_payment_min)} ₽`;
    } else {
      paymentText = `от ${this.$options.filters.format_decimal(ri.monthly_payment_max)} до ${this.$options.filters.format_decimal(ri.monthly_payment_min)} ₽`;
    }
  } else {
    if (isAnnuity) {
      paymentText = `${this.$options.filters.format_decimal(ri.monthly_payment_annuity)} ₽`;
    } else {
      paymentText = `от ${this.$options.filters.format_decimal(ri.monthly_payment_max)} до ${this.$options.filters.format_decimal(ri.monthly_payment_min)} ₽`;
    }
  }

  const leftStackRow1 = [
    { text: 'Вы закроете ипотеку', style: 'resultLabel' },
    {
      text: `${this.$options.filters.capitalize(ri.mortgage_closure_month)} ${ri.mortgage_closure_year} года`,
      style: ri.if_earlier_month > 0 ? 'additionalText' : 'resultValue'
    }
  ];
  if (ri.if_earlier_month > 0) {
    leftStackRow1.push({
      text: `Раньше на ${ri.if_earlier_month} ${this.getMonthDeclension(ri.if_earlier_month)}`,
      style: 'additionalText'
    });
  }

  const row1 = {
    columns: [
      { width: '*', stack: leftStackRow1 },
      {
        width: '*',
        stack: [
          { text: 'Ежемесячный платеж', style: 'resultLabel' },
          { text: paymentText, style: 'resultValue' }
        ]
      }
    ],
    columnGap: 18, // 24px → 18pt
    margin: [0, 0, 0, 12] // mt16 → 12pt
  };

  const row2 = {
    columns: [
      {
        width: '*',
        stack: [
          { text: 'Основной долг', style: 'resultLabel' },
          { text: `${this.$options.filters.format_decimal(this.loanAmount)} ₽`, style: 'resultValue' }
        ]
      },
      {
        width: '*',
        stack: [
          { text: 'Проценты', style: 'resultLabel' },
          { text: `${this.$options.filters.format_decimal(ri.percentages)} ₽`, style: 'resultValue' }
        ]
      }
    ],
    columnGap: 18,
    margin: [0, 0, 0, 12]
  };

  const row3Columns = [
    {
      width: '*',
      stack: [
        { text: 'Всего заплатите', style: 'resultLabel' },
        { text: `${this.$options.filters.format_decimal(ri.pay_in_total)} ₽`, style: 'resultValue' }
      ]
    }
  ];
  if (hasEarly) {
    row3Columns.push({
      width: '*',
      stack: [
        { text: 'Экономия', style: 'resultLabel' },
        { text: `${this.$options.filters.format_decimal(ri.savings)} ₽`, style: 'resultValueGreen' }
      ]
    });
  }

  const row3 = {
    columns: row3Columns,
    columnGap: 18
  };

  return { stack: [row1, row2, row3] };
},
    createDataBlock(text) {
  const padding = [15, 8, 15, 8]; // 20px → 15pt, 10px → 8pt
  const blockHeight = 28; // немного уменьшено под 11pt шрифт
  const borderWidth = 1;
  const borderColor = '#c8c8cb';
  const borderRadius = 20;

  return {
    stack: [
      {
        canvas: [
          {
            type: 'rect',
            x: 0,
            y: 0,
            w: 235, // чуть увеличено для 15pt padding
            h: blockHeight,
            r: borderRadius,
            lineWidth: borderWidth,
            lineColor: borderColor
          }
        ],
        margin: [0, 0, 0, -blockHeight]
      },
      {
        text: text,
        style: 'dataValue', // ← обновлённый стиль
        margin: padding
      }
    ],
    width: 235
  };
},
    createHolidaysSection() {
  if (!this.holidays_term || this.holidays_term === 0) {
    return { text: '' };
  }
  const startDateText = `${this.$options.filters.capitalize(this.obj_month[this.holidays_date[0].month - 1])} ${this.holidays_date[0].year}`;
  const termText = this.holidays_term;

  return {
    stack: [
      { text: 'Ипотечные каникулы', style: 'sectionTitle' },
      {
        columns: [
          {
            width: '*',
            stack: [
              { text: 'Начало каникул', style: 'label' },
              this.createDataBlock(startDateText)
            ]
          },
          {
            width: '*',
            stack: [
              { text: 'Срок каникул, мес.', style: 'label' },
              this.createDataBlock(termText)
            ]
          }
        ],
        columnGap: 18
      }
    ],
    unbreakable: true
  };
},
