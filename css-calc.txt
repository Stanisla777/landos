receivedDateMobile([year, month]) {
  const dateString = `${year}-${month}`;
  this.$nextTick(() => {
    const container = this.$refs.mobileShedule;
    const element = container.querySelector(`[data-date="${dateString}"]`);
    
    if (!element) return;

    // Функция для плавного скролла
    const smoothScroll = (target, scrollContainer, offset = 0) => {
      const targetRect = target.getBoundingClientRect();
      const containerRect = scrollContainer.getBoundingClientRect();
      
      // Вычисляем позицию элемента относительно контейнера
      const scrollPosition = targetRect.top - containerRect.top + scrollContainer.scrollTop - offset;
      
      // Анимируем скролл
      const start = scrollContainer.scrollTop;
      const change = scrollPosition - start;
      const startTime = performance.now();
      const duration = 800; // Продолжительность анимации в мс
      
      const animateScroll = (currentTime) => {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const ease = easeInOutQuad(progress);
        scrollContainer.scrollTop = start + change * ease;
        
        if (progress < 1) {
          requestAnimationFrame(animateScroll);
        }
      };
      
      requestAnimationFrame(animateScroll);
    };

    // Функция для плавности анимации
    const easeInOutQuad = (t) => {
      return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    };

    // Сначала скроллим страницу, чтобы контейнер был в видимой области
    const containerTop = container.getBoundingClientRect().top;
    const pageOffset = window.pageYOffset;
    const viewportHeight = window.innerHeight;
    const containerHeight = container.offsetHeight;
    
    // Если контейнер не полностью в видимой области
    if (containerTop < 0 || containerTop + containerHeight > viewportHeight) {
      smoothScroll(container, document.documentElement, 20);
    }
    
    // Затем скроллим внутри контейнера к нужному элементу
    setTimeout(() => {
      smoothScroll(element, container, 20);
    }, 100);
  });
}
