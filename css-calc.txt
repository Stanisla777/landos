export default function contentNote() {
  const notes = document.querySelectorAll('.js--content-note');

  // === Вспомогательная функция: центрирование тултипа на мобильных (<600px) ===
  function centerTooltip(tooltip, rect, windowWidth) {
    tooltip.style.inset = 'unset';
    tooltip.style.left = '0';
    tooltip.style.right = 'auto';
    tooltip.style.transform = `translateX(${
      -(rect.left - tooltip.offsetWidth / 2 + 7) + (windowWidth / 2 - tooltip.offsetWidth / 2)
    }px)`;
  }

  // === Вспомогательная функция: добавление класса направления и смещения ===
  function adjustTooltipArrow(icon) {
    const tooltip = icon.querySelector('.content-note__text');
    if (!tooltip) return;

    // Убираем старые классы направления
    tooltip.classList.remove('left', 'right');

    // Определяем горизонтальное направление
    const leftStyle = tooltip.style.left;
    const rightStyle = tooltip.style.right;

    if (leftStyle && leftStyle !== 'auto' && leftStyle !== '') {
      tooltip.classList.add('right');
    } else if (rightStyle && rightStyle !== 'auto' && rightStyle !== '') {
      tooltip.classList.add('left');
    }

    // Применяем смещения, только если есть .js--with-arrow
    if (icon.classList.contains('js--with-arrow')) {
      // === Горизонтальное смещение ===
      if (tooltip.classList.contains('right')) {
        const currentLeft = parseFloat(tooltip.style.left) || 0;
        tooltip.style.left = (currentLeft - 6) + 'px';
      }

      // === Вертикальное смещение ===
      const topStyle = tooltip.style.top;
      const bottomStyle = tooltip.style.bottom;

      if (topStyle && topStyle !== 'auto' && topStyle !== '') {
        const currentTop = parseFloat(topStyle) || 0;
        tooltip.style.top = (currentTop + 25) + 'px';
      } else if (bottomStyle && bottomStyle !== 'auto' && bottomStyle !== '') {
        const currentBottom = parseFloat(bottomStyle) || 0;
        tooltip.style.bottom = (currentBottom + 25) + 'px';
      }
    }
  }

  // === iOS / touch handling ===
  const isIOS = (/(iPad|iPhone|iPod)/.test(navigator.userAgent) && !window.MSStream) ||
    (navigator.userAgent.includes('Mac') && 'ontouchend' in document);

  if (isIOS) {
    document.addEventListener('touchstart', (e) => {
      if (e.target.classList.contains('js--content-note') && e.target.classList.contains('active')) {
        e.target.classList.remove('active');
        const textEl = e.target.querySelector('.content-note__text');
        if (textEl) textEl.classList.remove('active');
      }

      if (!e.target.classList.contains('js--content-note')) {
        for (const note of notes) {
          note.classList.remove('active');
          const textEl = note.querySelector('.content-note__text');
          if (textEl) textEl.classList.remove('active');
        }
      }

      if (e.target.classList.contains('js--content-note')) {
        for (const note of notes) {
          note.classList.remove('active');
          const textEl = note.querySelector('.content-note__text');
          if (textEl) textEl.classList.remove('active');
        }

        e.target.classList.add('active');
        const textEl = e.target.querySelector('.content-note__text');
        if (textEl) textEl.classList.add('active');

        const rect = e.target.getBoundingClientRect();
        const tooltip = e.target.querySelector('.content-note__text');
        if (!tooltip) return;

        const windowWidth = document.body.offsetWidth;
        const windowHeight = window.innerHeight;
        const topOffset = rect.top + rect.height / 2;

        // === Горизонтальное позиционирование с поддержкой js--focus-on-parent ===
        const focusParent = e.target.closest('.js--focus-on-parent');

        if (focusParent) {
          const parentRect = focusParent.getBoundingClientRect();
          const iconCenterInParent = rect.left - parentRect.left + rect.width / 2;
          const parentCenter = parentRect.width / 2;

          if (iconCenterInParent > parentCenter) {
            tooltip.style.left = 'auto';
            tooltip.style.right = '-4px';
          } else {
            tooltip.style.left = '4px';
            tooltip.style.right = 'auto';
          }

          if (windowWidth < 600) {
            centerTooltip(tooltip, rect, windowWidth);
          }
        } else if (
          e.target.closest('.js--courses-accord-content') ||
          e.target.closest('.js--element-overflow') ||
          e.target.closest('.js--element-overflow-x')
        ) {
          const parent = e.target.parentElement;
          const parentPos = parent.getBoundingClientRect();
          const relativePosLeftElement = rect.left - parentPos.left;
          const parentWidth = parent.offsetWidth;

          if (parentWidth / 2 < relativePosLeftElement) {
            tooltip.style.left = 'auto';
            tooltip.style.right = '-4px';
          } else {
            tooltip.style.left = '4px';
            tooltip.style.right = 'auto';
          }

          if (windowWidth < 600) {
            centerTooltip(tooltip, rect, windowWidth);
          }
        } else {
          const leftOffset = rect.left + rect.width / 2;
          if (windowWidth / 2 < leftOffset) {
            tooltip.style.left = 'auto';
            tooltip.style.right = '-4px';
          } else {
            tooltip.style.left = '4px';
            tooltip.style.right = 'auto';
          }

          if (windowWidth < 600) {
            centerTooltip(tooltip, rect, windowWidth);
          }
        }

        // === Вертикальное позиционирование ===
        if (
          e.target.closest('.js--courses-accord-content') ||
          e.target.closest('.js--element-overflow')
        ) {
          const notesParentBounding = e.target.closest('.js--courses-accord-content').getBoundingClientRect();
          const locationDifference = rect.top - notesParentBounding.top;
          const heightTooltip = tooltip.offsetHeight;
          if (heightTooltip >= locationDifference) {
            tooltip.style.top = 'calc(100% + 4px)';
            tooltip.style.bottom = 'auto';
          } else if (windowHeight / 2 < topOffset) {
            tooltip.style.top = 'auto';
            tooltip.style.bottom = 'calc(100% + 4px)';
          } else {
            tooltip.style.top = 'calc(100% + 4px)';
            tooltip.style.bottom = 'auto';
          }
        } else {
          if (windowHeight / 2 > topOffset) {
            tooltip.classList.remove('up');
            tooltip.classList.add('down');
            tooltip.style.top = 'calc(100% + 4px)';
            tooltip.style.bottom = 'auto';
          } else {
            tooltip.classList.remove('down');
            tooltip.classList.add('up');
            tooltip.style.top = 'auto';
            tooltip.style.bottom = 'calc(100% + 4px)';
          }
        }

        adjustTooltipArrow(e.target);
      }
    });
  }

  // === Desktop: mouseover ===
  document.addEventListener('mouseover', (e) => {
    if (e.target.classList.contains('js--content-note')) {
      e.target.classList.add('active');
      const textEl = e.target.querySelector('.content-note__text');
      if (textEl) textEl.classList.add('active');

      const rect = e.target.getBoundingClientRect();
      const tooltip = e.target.querySelector('.content-note__text');
      if (!tooltip) return;

      const windowWidth = document.body.offsetWidth;
      const windowHeight = window.innerHeight;
      const topOffset = rect.top + rect.height / 2;

      // === Горизонтальное позиционирование с поддержкой js--focus-on-parent ===
      const focusParent = e.target.closest('.js--focus-on-parent');

      if (focusParent) {
        const parentRect = focusParent.getBoundingClientRect();
        const iconCenterInParent = rect.left - parentRect.left + rect.width / 2;
        const parentCenter = parentRect.width / 2;

        if (iconCenterInParent > parentCenter) {
          tooltip.style.left = 'auto';
          tooltip.style.right = '-4px';
        } else {
          tooltip.style.left = '4px';
          tooltip.style.right = 'auto';
        }

        if (windowWidth < 600) {
          centerTooltip(tooltip, rect, windowWidth);
        }
      } else if (
        e.target.closest('.js--courses-accord-content') ||
        e.target.closest('.js--element-overflow') ||
        e.target.closest('.js--element-overflow-x')
      ) {
        const parent = e.target.parentElement;
        const parentPos = parent.getBoundingClientRect();
        const relativePosLeftElement = rect.left - parentPos.left;
        const parentWidth = parent.offsetWidth;

        if (parentWidth / 2 < relativePosLeftElement) {
          tooltip.style.left = 'auto';
          tooltip.style.right = '-4px';
        } else {
          tooltip.style.left = '4px';
          tooltip.style.right = 'auto';
        }

        if (windowWidth < 600) {
          centerTooltip(tooltip, rect, windowWidth);
        }
      } else {
        const leftOffset = rect.left + rect.width / 2;
        if (windowWidth / 2 < leftOffset) {
          tooltip.style.left = 'auto';
          tooltip.style.right = '-4px';
        } else {
          tooltip.style.left = '4px';
          tooltip.style.right = 'auto';
        }

        if (windowWidth < 600) {
          centerTooltip(tooltip, rect, windowWidth);
        }
      }

      // === Вертикальное позиционирование ===
      if (
        e.target.closest('.js--courses-accord-content') ||
        e.target.closest('.js--element-overflow')
      ) {
        const notesParentBounding = e.target.closest('.js--courses-accord-content').getBoundingClientRect();
        const locationDifference = rect.top - notesParentBounding.top;
        const heightTooltip = tooltip.offsetHeight;
        if (heightTooltip >= locationDifference) {
          tooltip.style.top = 'calc(100% + 4px)';
          tooltip.style.bottom = 'auto';
        } else if (windowHeight / 2 < topOffset) {
          tooltip.style.top = 'auto';
          tooltip.style.bottom = 'calc(100% + 4px)';
        } else {
          tooltip.style.top = 'calc(100% + 4px)';
          tooltip.style.bottom = 'auto';
        }
      } else {
        if (windowHeight / 2 > topOffset) {
          tooltip.classList.remove('up');
          tooltip.classList.add('down');
          tooltip.style.top = 'calc(100% + 4px)';
          tooltip.style.bottom = 'auto';
        } else {
          tooltip.classList.remove('down');
          tooltip.classList.add('up');
          tooltip.style.top = 'auto';
          tooltip.style.bottom = 'calc(100% + 4px)';
        }
      }

      adjustTooltipArrow(e.target);
    }

    if (e.target.closest && e.target.closest('.content-note__text')) {
      const root = e.target.closest('.js--content-note');
      if (root) {
        root.classList.add('active');
        const textEl = root.querySelector('.content-note__text');
        if (textEl) textEl.classList.add('active');
      }
    }
  });

  // === Desktop: mouseout ===
  document.addEventListener('mouseout', (e) => {
    const from = e.relatedTarget || e.toElement;
    const currentTooltip = e.target.closest && e.target.closest('.js--content-note');
    const fromInsideSameTooltip = from && from.closest && from.closest('.js--content-note');

    if (currentTooltip && !fromInsideSameTooltip) {
      currentTooltip.classList.remove('active');
      const textEl = currentTooltip.querySelector('.content-note__text');
      if (textEl) textEl.classList.remove('active');
    }
  });
}
