.select-list__wr-search
    .select-list__search-item(
      v-if="answerLink.hasOwnProperty('link')"
      :data-link="answerLink.link!==''?answerLink.link:''"    
      @click="handleCopyClick"
    )
      //- ... остальное без изменений
    
    a.select-list__search-item(
      v-if="answerLink.hasOwnProperty('vk')"
      :href="answerLink.vk!==''?answerLink.vk:''"
      @click.prevent="handleLinkClick('vk', $event)"
    )
      //- ... остальное без изменений
    
    a.select-list__search-item(
      v-if="answerLink.hasOwnProperty('tg')"
      :href="answerLink.tg!==''?answerLink.tg:''"
      @click.prevent="handleLinkClick('tg', $event)"
    )
      //- ... остальное без изменений
    
    a.select-list__search-item(
      v-if="answerLink.hasOwnProperty('wp')"
      :href="answerLink.wp!==''?answerLink.wp:''"
      @click.prevent="handleLinkClick('wp', $event)"
    )
      //- ... остальное без изменений
    
    .select-list__search-item(@click="openModalMail")
      //- ... остальное без изменений



data() {
  return {
    lastSentAnswers: null, // храним последние отправленные данные
    isSending: false,      // флаг отправки
    pendingLink: null       // ссылка, которую нужно открыть после отправки
  }
},
methods: {
  // Обработчик клика для копирования ссылки
  async handleCopyClick(event) {
    if (await this.needsToSendResults()) {
      this.pendingAction = () => this.copyLink(event);
      this.sendingResult('result');
    } else {
      this.copyLink(event);
    }
  },
  
  // Обработчик клика для ссылок
  async handleLinkClick(type, event) {
    const url = this.answerLink[type];
    if (!url) return;
    
    if (await this.needsToSendResults()) {
      this.pendingLink = url;
      this.sendingResult('result');
    } else {
      window.open(url, '_blank');
    }
  },
  
  // Проверяем, нужно ли отправлять данные
  async needsToSendResults() {
    if (!this.answersToSand || this.answersToSand.length === 0) return false;
    
    // Если данные не менялись с последней отправки - не отправляем
    if (this.lastSentAnswers && 
        JSON.stringify(this.lastSentAnswers) === JSON.stringify(this.answersToSand)) {
      return false;
    }
    
    return true;
  },
  
  // Модифицированная отправка результатов
  sendingResultToApi(token) {
    if (this.isSending) return;
    this.isSending = true;
    
    let data = {
      "calculatorId": this.calculatorId,
      "answers": this.answersToSand,
      "smart-token": token
    }
    
    axios({
      method: 'post',
      url: '/api/',
      headers: {
        "Content-type": "application/json; charset=UTF-8",
        'X-Bitrix-Csrf-Token': window.BX.bitrix_sessid(),
      },
      data: data
    })
    .then((res) => {
      if (res.data.code === 200 && res.data.result) {
        this.lastSentAnswers = [...this.answersToSand]; // сохраняем отправленные данные
        
        Storage.dispatch('ActionDescriptionAfterSand', null);
        Storage.dispatch('ActionAnswersId', res.data.result.answersId);
        Storage.dispatch('ActionAnswerLink', res.data.result.answerLink);
        
        // Выполняем отложенное действие (открытие ссылки или копирование)
        if (this.pendingLink) {
          window.open(this.pendingLink, '_blank');
          this.pendingLink = null;
        } else if (this.pendingAction) {
          this.pendingAction();
          this.pendingAction = null;
        }
      }
      
      if (res.data.code !== 200) {
        if (res.data.description) {
          Storage.dispatch('ActionDescriptionAfterSand', res.data.description);
        }
        if (res.data.code) {
          this.answer_code = res.data.code;
        }
      }
      
      this.answersToSand = [];
    })
    .catch((error) => {
      if (error.response) {
        if (error.response.data !== undefined) {
          console.log(error.response);
          Storage.dispatch('ActionDescriptionAfterSand', error.response.data.description);
        }
      }
      console.log(error);
    })
    .finally(() => {
      this.isSending = false;
    });
  },
  
  // Остальные методы без изменений
  // ...
}
